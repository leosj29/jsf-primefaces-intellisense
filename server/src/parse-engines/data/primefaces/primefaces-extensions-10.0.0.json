{
  "components": {
    "component": [
      {
        "name": "convertJson",
        "description": "",
        "attribute": [
          {
            "description": "Data type of the value object (optional). Any primitive type, array, non generic or generic type is supported. Data type is sometimes required to convert a value to a JSON representation. All data types should be fully qualified. Default is null.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "convertLocale",
        "description": "",
        "attribute": [
          {
            "description": "Character which will be used to separate the country and language. Default is '_'.",
            "name": "separator",
            "required": false,
            "type": "java.lang.Character"
          }
        ]
      },
      {
        "name": "javascript",
        "description": "",
        "attribute": [
          {
            "description": "The javascript which should be executed.",
            "name": "execute",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the behavior, when set to false behavior will not be rendered.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The name of the event.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "badge",
        "description": "Badge adds an iOS like badge to a given button.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Color of the badge, the default is \"red\".",
            "name": "color",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The position of the badge on the button: 'top-left', top-right', 'bottom-left', bottom-right'. Default is 'top-right'.",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The content to diplay in the badge. If null NO badge is displayed.",
            "name": "content",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target button using Search Expression framework.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "calculator",
        "description": "Calculator adds a popup calculator to a given input field. Client behavior events: open - fires when the calculator is opened (org.primefaces.extensions.event.OpenEvent), close - fires when the calculator is closed (org.primefaces.extensions.event.CloseEvent), button - fires when each calculator button is pressed (org.primefaces.extensions.event.ButtonEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When to display the calculator: 'focus' for popup on focus, 'button' for trigger button, 'both' for either, 'operator' for non-numeric character entered, 'opbutton' for operator/button combination.",
            "name": "showOn",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The layout of keys: 'standard', scientific', or a custom defined layout.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is a locale specified in view root.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "The number of digits of precision to use in rounding for display. Default is 10.",
            "name": "precision",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target input.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before a popup calculator opens and allows the field value to be altered before use.",
            "name": "onopen",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when the calculator closes and provides the (possibly updated) field value, and the calculator instance object.",
            "name": "onclose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute for each activated button and provides the button's label, the current calculator value, and the calculator instance object.",
            "name": "onbutton",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "monacoEditor",
        "description": "A JSF component that wraps the JavaScript libary <a href=\"https://microsoft.github.io/monaco-editor/\">Monaco Editor</a>. This component renders the editor directly into the host page without an iframe. Available client behavior events: <ul> <li>blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidblureditorwidget\">IStandaloneCodeEditor#onDidBlurEditorWidget</a>.</li> <li>change - fired if the content has been changed (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidchangemodelcontent\">IStandaloneCodeEditor#onDidChangeModelContent</a>.</li> <li>focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidfocuseditorwidget\">IStandaloneCodeEditor#onDidFocusEditorWidget</a>.</li>, <li>initialized - fired when the editor has become ready (javax.faces.event.AjaxBehaviorEvent). That is, after required resources have been downloaded and the editor was fully created and can now be interacted with by the user.</li> <li>keydown - fired when a key was pressed down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onkeydown\">IStandaloneCodeEditor#onKeyDown</a>.</li>, <li>keyup - fired when a key was released on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onkeyup\">IStandaloneCodeEditor#onKeyUp</a>.</li>, <li>mousedown - fired when a mouse button was pressed down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmousedown\">IStandaloneCodeEditor#onMouseDown</a>.</li>, <li>mousemove - fired when the mouse was moved over the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmousemove\">IStandaloneCodeEditor#onMouseMove</a>.</li>, <li>mouseup - fired when a mouse button was released down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmouseup\">IStandaloneCodeEditor#onMouseUp</a>.</li>, <li>paste - fired when the text was pasted into the editor (javax.faces.event.AjaxBehaviorEvent),</li>, </ul>",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "CSS style(s) to be applied when this component is rendered.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value is passed through as the \"class\" attribute to the generated markup.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines if the editor is readonly.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the editor is disabled.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The tab index to assign to the editor. If not given, no tab index will be assigned.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression referring to a method validating the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Client side callback when the editor area receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor area loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor content changes.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor was rendered.",
            "name": "oninitialized",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when text was pasted into the editor.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mousedown event was triggered on the editor area.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mousemove event was triggered on the editor area.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mouseup event was triggered on the editor area.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a keyup event was triggered on the editor area.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a keydown event was triggered on the editor area.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a keypress (onDidType) event was triggered on the editor area.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allows you to register custom themes with the editor via Java. This must be a Map<String, org.primefaces.extensions.model.monacoeditor.EditorStandaloneTheme> . It maps between the name of the theme and the styling data for that theme. You can then specify the theme name for the theme option in the editorOptions .",
            "name": "customThemes",
            "required": false,
            "type": "java.lang.Map"
          },
          {
            "description": "Locale for the user interface. Can be either a java.util.Locale object or a string with the locale code. Built-in languages are \"bg\", \"de\", \"en\", \"es\", \"fr\", \"hu\", \"it\", \"ja\", \"ko\", \"ps\", \"pt_BR\", \"ru\", \"tr\", \"uk\", \"zh_CN\", and \"zh_TW\". To use a custom language or translation, you can specify a language file with custom translations via the option localeUrl .",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "For custom language files. If given, this is used instead of the built-in language files. This URL must point to a JavaScript file that, when executed, adds the localization to window.MonacoEnvironment.Locale[\"LOCALE_CODE\"] , where LOCALE_CODE is the value you set for locale . See the language file the widget downloads (when locale is not set to English) for an example and all available messages that need to be translated.",
            "name": "localeUrl",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": " An extender object to further customize the monaco editor via JavaScript. This can be either: <ul> <li>unset, in which case no further customization is performed</li> <li>or a JavaScript expression that evaluates to an extender object</li> </ul> The extender object may have one or more of the following optional properties: <ul> <li>beforeCreate(editorWidget, options). Called before the monaco editor is created. It is passed the current options object that would be used to initialize the monaco editor. If this callback does not return a value, the options are used as they were passed to the callback. The callback is allowed to modify the passed options object. If the callback returns an options object, that options object is used instead. If it returns a thenable/Promise, the monaco editor is created only once the Promise resolves (successfully). If the Promise resolves with an options object, that options object is used to create the editor. See <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html\">IEditorConstructionOptions</a> for all editor options.</li> <li>afterCreate(editorWidget). Called after the editor was created.</li> <li>beforeDestroy(editorWidget). Called before the editor is destroyed, eg. when updating a component via AJAX.</li> <li>afterDestroy(editorWidget). Called after the editor is destroyed, eg. when updating a component via AJAX. Note that editorWidget.getMonaco() now returns undefined.</li> <li>createModel(editorWidget, options). Called when a model needs to retrieved or created. The options contains value (current value that should be set on the model by the extender), url (default URL that was determined for the model), language (requested code language), and editorOptions (monaco editor constructor options). Should return the model. When it returns nothing, the default mechanism for creating a model is used. Note that editorWidget.getMonaco() returns undefined as the monaco editor was not created yet.</li> <li>createEditorOverrideServices(editorWidget, options). Called when the monaco editor is created. May return an object with services that should be overriden. See <a href=\"https://github.com/Microsoft/monaco-editor/issues/935#issuecomment-402174095\">here on github</a> for details on the available services. The options are the editor constructor options that will be used to create the editor, they are readonly and must not be changed.</li> <li>createWorker(editorWidget, moduleId, label). Called when a worker for additional language support needs to be created. By default, monaco editor ships with the workers for JSON, CSS, HTML, and TYPESCRIPT. The label is the name of the language, eg. css or javascript . Must return the worker to be used for the given language. Note that editorWidget.getMonaco() returns undefined as the monaco editor was not created yet.</li> </ul>",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the scheme (protocol) for that URI. Defaults to inmemory .",
            "name": "scheme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the directory (path) for that URI, with parts separated by slashes. If not given, it is taken from the client ID of this component.",
            "name": "directory",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the basename for that URI, without the extension. If not given, default to 'file'.",
            "name": "basename",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the extension for that URI, with or without the period. If not given, it is inferred from the (code) language.",
            "name": "extension",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the editor with CSS units, set as an inline style. For example 500px or 100%/code>. Set this to the empty string in case you want to size the editor via CSS.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the editor with CSS units, set as an inline style. For example 500px or 100%/code>. Set this to the empty string in case you want to size the editor via CSS.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Options for the Monaco code editor. This is a simple wrapper around the JavaScript API, see <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html\">IEditorConstructionOptions</a> The code language can be set via the EditorOptions#setLanguage option.",
            "name": "editorOptions",
            "required": false,
            "type": "org.primefaces.extensions.model.monacoeditor.EditorOptions"
          },
          {
            "description": "If true , resizes the editor automatically when the iframe element changes its size. Please note that this makes uses of the <a href=\"https://wicg.github.io/ResizeObserver/\">new ResizeObserver API</a> and <a href=\"https://caniuse.com/#feat=resizeobserver\">works only in newer browers.</a> This widget checks whether ResizeObserver API is available, and when it is not, no resizing is performed. To support resizing for older browsers, search for a ResizeObserver polyfill. If you know when the size of the editor conainer could have changed, you can resize the editor manually via PF(\"editorWidgetVar\").layout() ",
            "name": "autoResize",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "monacoEditorFramed",
        "description": "A JSF component that wraps the JavaScript libary <a href=\"https://microsoft.github.io/monaco-editor/\">Monaco Editor</a>. This component renders the editor inside an iframe for improved encapsulation, as the monaco editor library and its settings are window global. This also mean that you cannot get access to the monaco editor instance from the PrimeFaces widget. However, the widget offers a method invokeMonaco(methodName, ...params) that lets you call a method on the monaco editor instance in the iframe -- the method parameters are sent via postMessage . Note, however, that this does not work for methods that takes a non-data object as a parameter or return such an object (i.e. an object that cannot be structurally cloned). Available client behavior events: <ul> <li>blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidblureditorwidget\">IStandaloneCodeEditor#onDidBlurEditorWidget</a>.</li> <li>change - fired if the content has been changed (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidchangemodelcontent\">IStandaloneCodeEditor#onDidChangeModelContent</a>.</li> <li>focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#ondidfocuseditorwidget\">IStandaloneCodeEditor#onDidFocusEditorWidget</a>.</li>, <li>initialized - fired when the editor has become ready (javax.faces.event.AjaxBehaviorEvent). That is, after required resources have been downloaded and the editor was fully created and can now be interacted with by the user.</li> <li>keydown - fired when a key was pressed down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onkeydown\">IStandaloneCodeEditor#onKeyDown</a>.</li>, <li>keyup - fired when a key was released on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onkeyup\">IStandaloneCodeEditor#onKeyUp</a>.</li>, <li>mousedown - fired when a mouse button was pressed down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmousedown\">IStandaloneCodeEditor#onMouseDown</a>.</li>, <li>mousemove - fired when the mouse was moved over the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmousemove\">IStandaloneCodeEditor#onMouseMove</a>.</li>, <li>mouseup - fired when a mouse button was released down on the editor (javax.faces.event.AjaxBehaviorEvent). Corresponds to <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#onmouseup\">IStandaloneCodeEditor#onMouseUp</a>.</li>, <li>paste - fired when the text was pasted into the editor (javax.faces.event.AjaxBehaviorEvent),</li>, </ul>",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "CSS style(s) to be applied when this component is rendered.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value is passed through as the \"class\" attribute to the generated markup.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines if the editor is readonly.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the editor is disabled.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The tab index to assign to the editor. If not given, no tab index will be assigned.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression referring to a method validating the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Client side callback when the editor area receives focus. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor area loses focus. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor content changes. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when the editor was rendered. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "oninitialized",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when text was pasted into the editor. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mousedown event was triggered on the editor area. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mousemove event was triggered on the editor area. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a mouseup event was triggered on the editor area. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a keyup event was triggered on the editor area. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback when a keydown event was triggered on the editor area. Please not that the callback is run in the context of the main window, not in the iframe context.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allows you to register custom themes with the editor via Java. This must be a Map<String, org.primefaces.extensions.model.monacoeditor.EditorStandaloneTheme> . It maps between the name of the theme and the styling data for that theme. You can then specify the theme name for the theme option in the editorOptions .",
            "name": "customThemes",
            "required": false,
            "type": "java.lang.Map"
          },
          {
            "description": "Locale for the user interface. Can be either a java.util.Locale object or a string with the locale code. Built-in languages are \"bg\", \"de\", \"en\", \"es\", \"fr\", \"hu\", \"it\", \"ja\", \"ko\", \"ps\", \"pt_BR\", \"ru\", \"tr\", \"uk\", \"zh_CN\", and \"zh_TW\". To use a custom language or translation, you can specify a language file with custom translations via the option localeUrl .",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "For custom language files. If given, this is used instead of the built-in language files. This URL must point to a JavaScript file that, when executed, adds the localization to window.MonacoEnvironment.Locale[\"LOCALE_CODE\"] , where LOCALE_CODE is the value you set for locale . See the language file the widget downloads (when language is not set to English) for an example and all available messages that need to be translated.",
            "name": "localeUrl",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "  An extender object to further customize the monaco editor via JavaScript. This must be a URL to a JavaScript file with the extender. The JavaScript file is loaded inside the iframe context and must (synchronously, i.e. upon its execution) set window.MonacoEnvironment.Extender to the extender object that is to be used.  The extender object may have one or more of the following optional properties: <ul> <li>beforeCreate(monacoContext, options). Called before the monaco editor is created. It is passed the current options object that would be used to initialize the monaco editor. If this callback does not return a value, the options are used as they were passed to the callback. The callback is allowed to modify the passed options object. If the callback returns an options object, that options object is used instead. If it returns a thenable/Promise, the monaco editor is created only once the Promise resolves (successfully). If the Promise resolves with an options object, that options object is used to create the editor. See <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html\">IEditorConstructionOptions</a> for all editor options.</li> <li>afterCreate(monacoContext). Called after the editor was created.</li> <li>beforeDestroy(monacoContext). Called before the editor is destroyed, eg. when updating a component via AJAX.</li> <li>afterDestroy(monacoContext). Called after the editor is destroyed, eg. when updating a component via AJAX. Note that monacoContext.getMonaco() now returns undefined.</li> <li>createEditorOverrideServices(monacoContext, options). Called when the monaco editor is created. May return an object with services that should be overriden. See <a href=\"https://github.com/Microsoft/monaco-editor/issues/935#issuecomment-402174095\">here on github</a> for details on the available services. The options are the editor constructor options that will be used to create the editor, they are readonly and must not be changed.</li> <li>createModel(monacoContext, options). Called when a model needs to retrieved or created. The options contains value (current value that should be set on the model by the extender), url (default URL that was determined for the model), language (requested code language), and editorOptions (monaco editor constructor options). Should return the model. When it returns nothing, the default mechanism for creating a model is used. Note that monacoContext.getMonaco() returns undefined as the Monaco editor was not created yet.</li> <li>createWorker(monacoContext, moduleId, label). Called when a worker for additional language support needs to be created. By default, monaco editor ships with the workers for JSON, CSS, HTML, and TYPESCRIPT. The label is the name of the language, eg. css or javascript . Must return the worker to be used for the given language. Note that monacoContext.getMonaco() returns undefined as the Monaco editor was not created yet.</li> </ul> All methods of the extender are evaluated within the iframe page, so the editor widget instance is not available. The monacoContext passed as the first argument to the extender methods is an object with one essential method: getMonaco() . Use this method to get the current monaco editor instance and interact with the editor.",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Additional URL parameters that are added to the iframe URL where the framed Monaco editor is loaded. This may be useful, for example, when you wish to pass additional arguments to the extender script. Must be either a java.lang.Map<String, String | List<String>> (i.e. a map where keys are strings and values are strings or lists of strings); or a java.lang.String with a JavaScript expression that evaluates to an object representing such a map.",
            "name": "iframeUrlParams",
            "required": false,
            "type": "java.util.Map"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the scheme (protocol) for that URI. Defaults to inmemory .",
            "name": "scheme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the directory (path) for that URI, with parts separated by slashes. If not given, it is taken from the client ID of this component.",
            "name": "directory",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the basename for that URI, without the extension. If not given, default to 'file'.",
            "name": "basename",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The monaco editor requires a unique URI for an opened model (i.e. the code currently being edited). This is the extension for that URI, with or without the period. If not given, it is inferred from the (code) language.",
            "name": "extension",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the editor with CSS units, set as an inline style. For example 500px or 100%/code>. Set this to the empty string in case you want to size the editor via CSS.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the editor with CSS units, set as an inline style. For example 500px or 100%/code>. Set this to the empty string in case you want to size the editor via CSS.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Options for the monaco code editor. This is a simple wrapper around the JavaScript API, see <a href=\"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html\">IEditorConstructionOptions</a> The code language can be set via the EditorOptions#setLanguage option.",
            "name": "editorOptions",
            "required": false,
            "type": "org.primefaces.extensions.model.monacoeditor.EditorOptions"
          },
          {
            "description": "If true , resizes the editor automatically when the iframe element changes its size. Please note that this makes uses of the <a href=\"https://wicg.github.io/ResizeObserver/\">new ResizeObserver API</a> and <a href=\"https://caniuse.com/#feat=resizeobserver\">works only in newer browers.</a> This widget checks whether ResizeObserver API is available, and when it is not, no resizing is performed. To support resizing for older browsers, search for a ResizeObserver polyfill. If you know when the size of the editor conainer could have changed, you can resize the editor manually via PF(\"editorWidgetVar\").layout() ",
            "name": "autoResize",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "ckEditor",
        "description": "NOTICE: You must also include the org.primefaces.extensions.resources-ckeditor:*.jar artifact. Client behavior events: save - fired when the save button will be pressed (javax.faces.event.AjaxBehaviorEvent), initialize - fired after the editor was successfully intialized (javax.faces.event.AjaxBehaviorEvent), focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent), blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent), wysiwygMode - fired after switching to the wysiwyg mode (javax.faces.event.AjaxBehaviorEvent), sourceMode - fired after switching to the source mode (javax.faces.event.AjaxBehaviorEvent), dirty - fired once after the content has been changed; will be fired again after a change occurs if the editor gains focus after a blur (javax.faces.event.AjaxBehaviorEvent), change - fired if the content has been changed (javax.faces.event.AjaxBehaviorEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Height of the editor. Default value: 200px.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the editor. Default value: 600px.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Theme of the editor.",
            "name": "theme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Skin of the editor. Valid skins are: flat, icy_orange, kama, minimalist, moono-lisa, moono, Moono_blue, moonocolor, moono-dark, office2013.",
            "name": "skin",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The toolbar layout.",
            "name": "toolbar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the editor is readonly.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The color of the interface. For example: #33fc14.",
            "name": "interfaceColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Default language is used in case no language is set using language option and the editor is not able to use the user language.",
            "name": "language",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "This setting is used to set the CKEditor language. In case this option is not set, the editor will automatically try to load with user language if supported, otherwise the default language will be used.",
            "name": "defaultLanguage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "This setting specifies the CSS file to be used to apply style to the contents.",
            "name": "contentsCss",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Path to a custom CKEditor js config file.",
            "name": "customConfig",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the CKEditor Advanced Content Filter is enabled or disabled. Default is true.",
            "name": "advancedContentFilter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "By default, native browser spell check functionality is disabled in the editor. To enable it set this value to false. Default is true.",
            "name": "disableNativeSpellChecker",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets the behavior of the Enter key. It also determines other behavior rules of the editor, like whether the <br> element is to be used as a paragraph separator when indenting text. Default is CKEDITOR.ENTER_P.",
            "name": "enterMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets the behavior of the Shift+Enter key. It also determines other behavior rules of the editor, like whether the <br> element is to be used as a paragraph separator when indenting text. Default is CKEDITOR.ENTER_P.",
            "name": "shiftEnterMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Default font to set the editor to such as 'Arial'. Default is null.",
            "name": "font",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Default font size to set the editor to such as '12px'. Only used if Font is set.",
            "name": "fontSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tab index to assign to the editor. If not given, no tab index will be assigned.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A display name for this component.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "HTML5 inputmode attribute for hinting at the type of data this control has for touch devices to display appropriate virtual keyboard.",
            "name": "inputmode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the content of the component should be escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the mouse wheel rolls up or down over an element.",
            "name": "onwheel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user copies the content of an element.",
            "name": "oncut",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user cuts the content of an element.",
            "name": "oncopy",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user pastes some content in an element.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element gets user input.",
            "name": "oninput",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a context menu is triggered.",
            "name": "oncontextmenu",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is invalid.",
            "name": "oninvalid",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the Reset button in a form is clicked.",
            "name": "onreset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user writes something in a search field.",
            "name": "onsearch",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is dragged.",
            "name": "ondrag",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the end of a drag operation.",
            "name": "ondragend",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element has been dragged to a valid drop target.",
            "name": "ondragenter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element leaves a valid drop target.",
            "name": "ondragleave",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is being dragged over a valid drop target.",
            "name": "ondragover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the start of a drag operation.",
            "name": "ondragstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragged element is being dropped.",
            "name": "ondrop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element's scrollbar is being scrolled.",
            "name": "onscroll",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "clipboard",
        "description": "Clipboard allows copy/cut functions without the need for Flash. Client behavior events: success - fires when the clipboard sucessfully copies/cuts (org.primefaces.extensions.event.ClipboardSuccessEvent), error - fires when the clipboard fails to copy/cut (org.primefaces.extensions.event.ClipboardErrorEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Action whether to 'copy' or 'cut'. Default is 'copy'.",
            "name": "action",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The trigger to execute the action. Typically a button.",
            "name": "trigger",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "The target component to copy/cut the text from.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If you don't use target you can set text to the value you want copied/cut. Default is 'PrimeFaces Rocks!' if you forget to set it.",
            "name": "text",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute if text is successfully copied/cut.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when text fails to copy/cut to clipboard.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "codeMirror",
        "description": "NOTICE: You must also include the org.primefaces.extensions.resources-codemirror:*.jar artifact. Client behavior events: change - fired every time the content of the editor is changed (javax.faces.event.AjaxBehaviorEvent), highlightComplete - fired whenever the editor's content has been fully highlighted (javax.faces.event.AjaxBehaviorEvent), focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent), blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the mouse wheel rolls up or down over an element.",
            "name": "onwheel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user copies the content of an element.",
            "name": "oncut",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user cuts the content of an element.",
            "name": "oncopy",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user pastes some content in an element.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element gets user input.",
            "name": "oninput",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a context menu is triggered.",
            "name": "oncontextmenu",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is invalid.",
            "name": "oninvalid",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the Reset button in a form is clicked.",
            "name": "onreset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user writes something in a search field.",
            "name": "onsearch",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is dragged.",
            "name": "ondrag",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the end of a drag operation.",
            "name": "ondragend",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element has been dragged to a valid drop target.",
            "name": "ondragenter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element leaves a valid drop target.",
            "name": "ondragleave",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is being dragged over a valid drop target.",
            "name": "ondragover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the start of a drag operation.",
            "name": "ondragstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragged element is being dropped.",
            "name": "ondrop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element's scrollbar is being scrolled.",
            "name": "onscroll",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method providing suggestions.",
            "name": "completeMethod",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "The theme to style the editor with.",
            "name": "theme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The mode to use. When not given, this will default to the first mode that was loaded. It may be a string, which either simply names the mode or is a MIME type associated with the mode. Alternatively, it may be an object containing configuration options for the mode, with a name property that names the mode (for example {name: \"javascript\", json: true}).",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "How many spaces a block (whatever that means in the edited language) should be indented. The default is 2.",
            "name": "indentUnit",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Whether to use the context-sensitive indentation that the mode provides (or just indent the same as the line before). Defaults to true.",
            "name": "smartIndent",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The width of a tab character. Defaults to 4.",
            "name": "tabSize",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Configures whether the editor should re-indent the current line when a character is typed that might change its proper indentation (only works if the mode supports indentation). Default is true.",
            "name": "electricChars",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Configures the keymap to use. The default is \"default\", which is the only keymap defined in codemirror.js itself. Extra keymaps are found in the keymap directory.",
            "name": "keyMap",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).",
            "name": "lineWrapping",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to show line numbers to the left of the editor.",
            "name": "lineNumbers",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "At which number to start counting lines. Default is 1.",
            "name": "firstLineNumber",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Can be used to force a 'gutter' (empty space on the left of the editor) to be shown even when no line numbers are active. This is useful for setting markers.",
            "name": "gutter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled (off by default), this will make the gutter stay visible when the document is scrolled horizontally.",
            "name": "fixedGutter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "This disables editing of the editor content by the user. If the special value \"nocursor\" is given (instead of simply true), focusing of the editor is also disallowed.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Determines whether brackets are matched whenever the cursor is moved next to a bracket.",
            "name": "matchBrackets",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Highlighting is done by a pseudo background-thread that will work for workTime milliseconds, and then use timeout to sleep for workDelay milliseconds. The defaults are 200 and 300, you can change these options to make the highlighting more or less aggressive.",
            "name": "workTime",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Highlighting is done by a pseudo background-thread that will work for workTime milliseconds, and then use timeout to sleep for workDelay milliseconds. The defaults are 200 and 300, you can change these options to make the highlighting more or less aggressive.",
            "name": "workDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Indicates how quickly CodeMirror should poll its input textarea for changes. Most input is captured by events, but some things, like IME input on some browsers, doesn't generate events that allow CodeMirror to properly detect it. Thus, it polls. Default is 100 milliseconds.",
            "name": "pollInterval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The maximum number of undo levels that the editor stores. Defaults to 40.",
            "name": "undoDepth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The tab index to assign to the editor. If not given, no tab index will be assigned.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A display name for this component.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "HTML5 inputmode attribute for hinting at the type of data this control has for touch devices to display appropriate virtual keyboard.",
            "name": "inputmode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Can be used to specify extra keybindings for the editor. When given, should be an object with property names like Ctrl-A, Home, and Ctrl-Alt-Left.",
            "name": "extraKeys",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default value: true.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued. Default value: false.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the content of the component should be escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the suggestions should be escaped or not.",
            "name": "escapeSuggestions",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          }
        ]
      },
      {
        "name": "counter",
        "description": "Counter component animates a numerical value by counting to it. Client behavior events: start - fires when the counter is started (org.primefaces.event.SelectEvent<Double>), end - fires when the counter is stopped (org.primefaces.event.SelectEvent<Double>).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number to start at. Default is 0.",
            "name": "start",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "The value you want to arrive at.",
            "name": "end",
            "required": true,
            "type": "java.lang.Double"
          },
          {
            "description": "Number of decimal places. Default is 0.",
            "name": "decimals",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Animation duration in seconds. Default is 2.",
            "name": "duration",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Example: 1,000 vs 1000. Default is true.",
            "name": "useGrouping",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Ease animation. Default is true.",
            "name": "useEasing",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Smooth easing for large numbers above this if useEasing. Default is 999.",
            "name": "smartEasingThreshold",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Amount to be eased for numbers above threshold. Default is 333.",
            "name": "smartEasingAmount",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is a locale specified in view root.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Grouping separator. Default is your locale's default.",
            "name": "separator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decimal separator. Default is your locale's default.",
            "name": "decimal",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text prepended to result.",
            "name": "prefix",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text appended to result.",
            "name": "suffix",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In autoStart mode, the counter will start immediately. Default is true.",
            "name": "autoStart",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Set to false to hide the counter. The listener will be fired anyway. Default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript handler executed the counter starts.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler executed the counter stops.",
            "name": "onend",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "creditCard",
        "description": "CreditCard will take any card form and make it the best part of the checkout process.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the card image in pixels. Default is 350px.",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Whether or not formatting is applied to the input fields. Default is true.",
            "name": "formatting",
            "required": false,
            "type": "javax.lang.Boolean"
          },
          {
            "description": "Localization of the Valid Date string on the card. Default 'valid\\nthru'",
            "name": "labelValidDate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Localization of the Month Year string on the card. Default 'month/year'",
            "name": "labelMonthYear",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder for the card number. Default '•••• •••• •••• ••••'",
            "name": "placeholderNumber",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder for the name. Default 'Full Name'",
            "name": "placeholderName",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder for the expiry. Default '••/••'",
            "name": "placeholderExpiry",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder for the CVC. Default '•••'",
            "name": "placeholderCvc",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "dynaForm",
        "description": "DynaForm allows to show a dynamic form described by model.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIOutput"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Instance of type DynaFormModel representing model of this component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the request-scoped variable for the underlaying object for each iteration.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the request-scoped variable which contains the prefix of the client Id within pe:dynaFormControl. This property allows to get the whole clientId of a component within pe:dynaFormControl. The whole client Id is sometimes required for JavaScript or RequestContext.update(...).",
            "name": "varContainerId",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag whether the form has to be submitted automatically after current page has been loaded. Note: the form can be submitted if it contains at least one submit button. Default value is false.",
            "name": "autoSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Flag whether the extended grid has to be shown opened on page load. Default value is false.",
            "name": "openExtended",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Button bar position. Possible values are \"top\" | \"bottom\" | \"both\". Default value is \"bottom\".",
            "name": "buttonBarPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Comma separated list of label and control style classes. Default value is null.",
            "name": "columnClasses",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "dynaFormControl",
        "description": "Specifies a control for a certain typed element within DynaForm.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIOutput"
          },
          {
            "description": "Type corresponding to form control. Default value is \"default\".",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Provided reference between label and corresponding control like \"for\" attribute in h:outputLabel or p:outputLabel. Default value is null.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the container element for this control. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element for this control. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "fluidGrid",
        "description": "FluidGrid is a grid layout library. Client behavior events: layoutComplete - fired after a layout and all positioning transitions have been completed. (org.primefaces.extensions.event.LayoutCompleteEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIOutput"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Collection of items (FluidGridItem) representing model of this component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the request-scoped variable for the underlaying object for each iteration.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the request-scoped variable which contains the prefix of the client Id within pe:fluidGridItem. This property allows to get the whole clientId of a component within pe:fluidGridItem. The whole client Id is sometimes required for JavaScript or RequestContext.update(...).",
            "name": "varContainerId",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Horizontal space between item elements (interpreted as pixels). Default is 0.",
            "name": "hGutter",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Vertical space between item elements (interpreted as pixels). Default is 0.",
            "name": "vGutter",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Sets the width of the container to fit the available number of columns, based on the size of container's parent element. When enabled, you can center the container with CSS. Note: This option does not work with percentage width of items. Default is false.",
            "name": "fitWidth",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls the horizontal flow of the layout. By default, item elements start positioning at the left. Set to false for right-to-left layouts.",
            "name": "originLeft",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls the vertical flow of the layout. By default, item elements start positioning at the top. Set to false for bottom-up layouts. It's like Tetris!",
            "name": "originTop",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Binds layout to window resizing. You can bind and unbind resize layout afterwards with the bindResize and unbindResize client-side widget's methods. Default is true.",
            "name": "resizeBound",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies which elements are stamped within the layout. These are special layout elements which will not be laid out. Rather, FluidGrid will layout item elements below stamped elements. You can use here every search expressions supported by PrimeFaces Search Expression Framework. Default is null.",
            "name": "stamp",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Duration of the transition when items change position or appearance, set in a CSS time format. To disable all transitions, set this attribute to null. Default is 0.4s.",
            "name": "transitionDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean flag if items contain any images. This can fix overlapping items which are caused by items that change size after a layout due to unloaded media like images. Setting this flag allows to layout all items after they have their proper sizes (images have been loaded). Default value is false.",
            "name": "hasImages",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "fluidGridItem",
        "description": "Specifies an item for a certain typed element within FluidGrid.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIOutput"
          },
          {
            "description": "Type corresponding to FluidGridItem. Default value is \"default\".",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element for this item. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "fuzzySearch",
        "description": "\"Fast SublimeText-like fuzzy search for JavaScript.\"",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component when set to true.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A localized user presentable name for this component.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "unselectable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Highlight the matched fuzzy text in the search results with bold HTML tags. Default is true.",
            "name": "highlight",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the result elements.",
            "name": "resultStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the result elements.",
            "name": "resultStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify if the items will be listed at the beginning. Dafault is false.",
            "name": "listItemsAtTheBeginning",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "exporter",
        "description": "",
        "attribute": [
          {
            "description": "Server side id(s) of the DataTable/DataList whose data would be exported. Multiple components must be comma \",\" separated",
            "name": "target",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Export type: \"pdf\",\"xlsx\".",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Filename of the generated export file, defaults to DataTable/DataList server side id.",
            "name": "fileName",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Table/List header title to use.",
            "name": "tableTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Exports only current page instead of whole dataset.",
            "name": "pageOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "PreProcessor for the exported document.",
            "name": "preProcessor",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "PostProcessor for the exported document.",
            "name": "postProcessor",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Character encoding to use.",
            "name": "encoding",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, only selection would be exported.",
            "name": "selectionOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, subtable would be exported.",
            "name": "subTable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Facet background to use.Ex:Hex Colors like #FFFF00,#FF0000...",
            "name": "facetBackground",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Facet font size to use.Ex:10,12..",
            "name": "facetFontSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Facet font color to use.Hex Colors like #FFFF00,#FF0000...",
            "name": "facetFontColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Facet Font Style to use.Ex:normal,bold,italic.Default value is Bold",
            "name": "facetFontStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Font Name/Font family to use.Ex:Courier New,Verdana..",
            "name": "fontName",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Cell Font size to use.Ex:10,12",
            "name": "cellFontSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Cell Font Color to use.Ex:Hex Colors like #FFFF00,#FF0000...",
            "name": "cellFontColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Cell Font style to use.Ex:normal,bold,italic.Default value is normal",
            "name": "cellFontStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Spacing between multiple DataTables/DataLists",
            "name": "datasetPadding",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "PDF format orientation.Possible values are Portrait or Landscape.Default value:Portrait",
            "name": "orientation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The list of components to be skipped in the pdf and excel export",
            "name": "skipComponents",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "head",
        "description": "",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIOutput"
          },
          {
            "description": "The page title.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The shortcut icon.",
            "name": "shortcutIcon",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "imageAreaSelect",
        "description": "Widget for selecting a rectangular area of an image. Client behavior events: selectEnd - fired after the selection finished (org.primefaces.extensions.event.ImageAreaSelectEvent), selectStart - fired after the selection started (org.primefaces.extensions.event.ImageAreaSelectEvent), selectChange - fired after the selection changed (org.primefaces.extensions.event.ImageAreaSelectEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target image.",
            "name": "for",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "A string of the form \"width:height\" which represents the aspect ratio to maintain. Example: \"4:3\".",
            "name": "aspectRatio",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If set to true, selection area will disappear when selection ends. Default value: false.",
            "name": "autoHide",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If set to a number greater than zero, showing or hiding the plugin is done with a graceful fade in/fade out animation. Default value: 0.",
            "name": "fadeSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "If set to true, resize handles are shown on the selection area; if set to \"corners\", only corner handles are shown. Default value: false.",
            "name": "handles",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If set to true, selection area is hidden.",
            "name": "hide",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "True height of the image (if scaled with the CSS width and height properties).",
            "name": "imageHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "True width of the image (if scaled with the CSS width and height properties).",
            "name": "imageWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Determines whether the selection area should be movable. Default value: true.",
            "name": "movable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If set to true, clicking outside the selection area will not start a new selection (ie. the user will only be able to move/resize the existing selection area). Default value: false.",
            "name": "persistent",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Determines whether the selection area should be resizable. Default value: true.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If set to true, selection area is shown.",
            "name": "show",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The z-index value to be assigned to plugin elements; normally, imgAreaSelect figures it out automatically, but there are a few cases when it's necessary to set it explicitly.",
            "name": "zIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum selection height (in pixels).",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum selection width (in pixels).",
            "name": "maxWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum selection height (in pixels).",
            "name": "minHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum selection width (in pixels).",
            "name": "minWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "A jQuery object or selector string that specifies the parent element that the plugin will be appended to. Default value: \"body\".",
            "name": "parentSelector",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables/disables keyboard support. Default value: false.",
            "name": "keyboardSupport",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "imageRotateAndResize",
        "description": "Widget for rotating or resizing an image. Client behavior events: rotate - fired after image rotation (org.primefaces.extensions.event.RotateEvent), resize - fired after image resizing (org.primefaces.extensions.event.ResizeEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target image.",
            "name": "for",
            "required": true,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "legend",
        "description": "Legend is a key value based legend.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Values is a Map where key=text and value=HTML color.",
            "name": "values",
            "required": false,
            "type": "java.util.Map"
          },
          {
            "description": "The layout of the legend: 'vertical' or 'horizontal'. Default is 'vertical'.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The title text of the legend.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The footer text of the legend.",
            "name": "footer",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "letterAvatar",
        "description": "Generate avatars with initials from names.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The name used to generate initials.",
            "name": "value",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean specifying if the returned image should be a circle. Default: false.",
            "name": "rounded",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Avatar size. Change this value anything, e.g., 100px, 10rem, etc. Default: 3rem.",
            "name": "size",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text color. Default: #fff.",
            "name": "color",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Background color.",
            "name": "backgroundColor",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "remoteCommand",
        "description": "RemoteCommand provides a way to execute JSF backing bean methods directly from javascript.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of the command.",
            "name": "name",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to update with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default value: true.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued. Default value: false.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, command will be invoked on page load.",
            "name": "autoRun",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, unresolvable components referenced in the update/process attribute are ignored. Default is 'false' and therefore a ComponentNotFoundException will be thrown.",
            "name": "ignoreComponentNotFound",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "assignableParam",
        "description": "AssignableParam can be used the apply a parameter of the RemoteCommand to a backing bean.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the parameter.",
            "name": "name",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "ValueExpression where the parameter will be applied.",
            "name": "assignTo",
            "required": true,
            "type": "javax.el.ValueExpression"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          }
        ]
      },
      {
        "name": "methodParam",
        "description": "Method can be used to receive a parameter of the RemoteCommand in the actionListener or action method.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the parameter.",
            "name": "name",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          }
        ]
      },
      {
        "name": "methodSignature",
        "description": "",
        "attribute": [
          {
            "description": "A comma separated list with full qualified class names. Class names should match passed parameters in the same order as they were defined.",
            "name": "parameters",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "tooltip",
        "description": "Advanced Tooltip component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component than can be either an EL expression of a literal text.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component.",
            "name": "converter",
            "required": false,
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A global tooltip converts each title attribute to a tooltip. Default value is false.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A shared tooltip - one tooltip, multiple targets. Default value is false.",
            "name": "shared",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "This flag enables showing tooltips automatically after page loading. Auto shown tooltips can not be global or shared. Default value is false.",
            "name": "autoShow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "This flag enables tooltip's positioning in relation to the mouse. Default value is false.",
            "name": "mouseTracking",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, the tooltip will not hide if moused over, allowing the contents to be clicked and interacted with. Default value is false.",
            "name": "fixed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class of the tooltip will override ThemeRoller theme. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Header or Titlebar of the tooltip. Not applicable on global tooltips. Default value is null.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A positive or negative pixel value by which to offset the tooltip in the horizontal plane (x-axis). Negative values cause a reduction in the value (moves tooltip to the left). Default value is 0.",
            "name": "adjustX",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "A positive or negative pixel value by which to offset the tooltip in the vertical plane (y-axis). Negative values cause a reduction in the value (moves tooltip upwards). Default value is 0.",
            "name": "adjustY",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The corner of the target element to position the tooltips corner at. Default value is 'bottom right'.",
            "name": "atPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The corner of the tooltip to position in relation to the target element. Default value is 'top left'.",
            "name": "myPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event displaying the tooltip. Default value is mouseenter.",
            "name": "showEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay time for displaying the tooltip. Default value is 0.",
            "name": "showDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Effect to be used for displaying. Default value is fadeIn.",
            "name": "showEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Time in milliseconds to display the effect. Default value is 500.",
            "name": "showEffectLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Event hiding the tooltip. Default value is mouseleave.",
            "name": "hideEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay time for hiding the tooltip. Default value is 0.",
            "name": "hideDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Effect to be used for hiding. Default value is fadeOut.",
            "name": "hideEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Time in milliseconds to process the hide effect. Default value is 500.",
            "name": "hideEffectLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Id of the component to attach the tooltip.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "layout",
        "description": "Page Layout component. Client behavior events: open - fires after a layout pane gets opened (org.primefaces.extensions.event.OpenEvent), close - fires after a layout pane gets closed (org.primefaces.extensions.event.CloseEvent), resize - fires after a layout pane gets resized (org.primefaces.extensions.event.ResizeEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies whether layout should span all page or not. Default value is true.",
            "name": "fullPage",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Layout options as an instance of the class LayoutOptions or an JSON String representing serialized LayoutOptions. LayoutOptions created as Java model takes precedence over layout options as tag attributes. Serializing of layout options to an JSON string can increase the time of layout building when the layout is built during application startup in an application scoped bean (LayoutOptions gets always serialized to JSON to be able to be used in the underlying widget). Use the method toJson() in the LayoutOptions if you want to serialize all options to an JSON string.",
            "name": "options",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Style of the main Layout container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main Layout container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Indicates server-side state management. A hash (JSON string) containing all dimensions and close, open state of existing layout panes. It can be bound to a bean.",
            "name": "state",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Indicates client-side state management. When set to true the current layout state will be stored in HTML5 LocalStorage on window unload and restored during layout build-up when user enters the same page. Default is false.",
            "name": "stateCookie",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Tip when resizer-bar can be dragged to resize a pane. Default is 'Resize'.",
            "name": "resizerTip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip when the resizer-bar will trigger 'sliding open'. Default is 'Slide Open'.",
            "name": "sliderTip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip on toggler when pane is 'open'. Default is 'Close'.",
            "name": "togglerTipOpen",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip on toggler when pane is 'closed'. Default is 'Open'.",
            "name": "togglerTipClosed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Useful flag if you are dealing with iframes or objects like applets inside layout panes. This option triggers masking each time the mouse moves over a resizer - instead of waiting until your 'grab it' with your mouse. This is done just in case you are about to grab & drag the resizer. Enabling this avoids the slight delay that sometimes occurs when you quickly grab a resizer and try to drag over an iframe or object. Default is false.",
            "name": "maskPanesEarly",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "layoutPane",
        "description": "Layout pane within Layout component. 5 regions are supported: 'north', 'south', 'center', 'west' und 'east'.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Position of a pane. Possible values are 'north', 'south', 'west', 'east', 'center'. Default value is 'center'.",
            "name": "position",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the pane's header. Default value is null.",
            "name": "styleHeader",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the pane's header. Default value is null.",
            "name": "styleClassHeader",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the pane's content. Default value is null.",
            "name": "styleContent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the pane's content. Default value is null.",
            "name": "styleClassContent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes a pane resizable. Default is true.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Makes a pane closable. Default is true.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When closed, can a pane 'slide open' over adjacent panes. Default is true.",
            "name": "slidable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies the initial size of a pane in px or %. Default value is null.",
            "name": "size",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the minimum-size limit in px or % when resizing a pane. Default value is null.",
            "name": "minSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the maximum-size limit in px or % when resizing a pane. Default value is null.",
            "name": "maxSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the minimum-width limit in px or % when resizing a pane. Default value is null - as small as pane can go.",
            "name": "minWidth",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the maximum-width limit in px or % when resizing a pane. Default value is null - as large as pane can go.",
            "name": "maxWidth",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the minimum-height limit in px or % when resizing a pane. Default value is null - as small as pane can go.",
            "name": "minHeight",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the maximum-height limit in px or % when resizing a pane. Default value is null - as large as pane can go.",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Spacing in px between pane and adjacent pane - when pane is 'open'. Default value is 6.",
            "name": "spacingOpen",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Spacing in px between pane and adjacent pane - when pane is 'closed'. Default value is 6.",
            "name": "spacingClosed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Tip when resizer-bar can be dragged to resize a pane. Default is 'Resize'.",
            "name": "resizerTip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip when the resizer-bar will trigger 'sliding open'. Default is 'Slide Open'.",
            "name": "sliderTip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip on toggler when pane is 'open'. Default is 'Close'.",
            "name": "togglerTipOpen",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tip on toggler when pane is 'closed'. Default is 'Open'.",
            "name": "togglerTipClosed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, then pane is 'closed' when layout is created. Default is false.",
            "name": "initClosed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, then pane is hidden when layout is created - no resizer or spacing is visible, as if the pane does not exist. Default is false.",
            "name": "initHidden",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, then pane gets resized live while it is dragging. If false, only helper element shows resizing. Default is false.",
            "name": "resizeWhileDragging",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Useful flag if you are dealing with iframes inside layout panes. If true, this option adds a DIV-mask over-or-inside this pane, so user can drag (resize) the pane over iframe. Default is false.",
            "name": "maskContents",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Useful flag if you are dealing with objects like applets inside layout panes. If true, this option add IFRAME-mask over-or-inside this pane to cover objects / applets - content-mask will overlay this mask. Default is false.",
            "name": "maskObjects",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "masterDetail",
        "description": "MasterDetail component allows to group contents into levels (sections) and saves page space. Smart and flexible navigation between levels via breadcrumbs or command components gives a neat and stylish interface for users.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Current level in flow. It can be arbitrary initialized and gets updated with each navigation. It allows to show any initial level when a view with MasterDetail component(s) is displayed. Default is 1.",
            "name": "level",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Context value for the current level. It can be arbitrary initialized at beginning and gets updated with each navigation. Default is null.",
            "name": "contextValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Method with signature int methodName(SelectLevelEvent). Server-side listener invoking when a navigation attempt takes place (via pe:selectDetailLevel). Return value defines the level to go. Default is null.",
            "name": "selectLevelListener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Flag whether a breadcrumb navigation is shown or not. Default is true.",
            "name": "showBreadcrumb",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Per default breadcrumb items right from the current level are not shown. This flag allows to show all breadcrumb items right from the current level as disabled. Default is false.",
            "name": "showAllBreadcrumbItems",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean flag to allow rendering of breadcrumb above or below header facet. Default is true.",
            "name": "breadcrumbAboveHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style of the main MasterDetail container element. Default is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main MasterDetail container element. Default is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "masterDetailLevel",
        "description": "",
        "attribute": [
          {
            "description": "Unique identifier of the component in a naming container.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Level of this detail. Level is unique inside of masterDetail component. This is a required attribute. Default is none.",
            "name": "level",
            "required": true,
            "type": "java.lang.Integer"
          },
          {
            "description": "Variable to access the value set by pe:selectDetailLevel when the level is changed. If the value was not set by currently invoking pe:selectDetailLevel, the last set value is be used. Default is null.",
            "name": "contextVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for the corresponding breadcrumb item shown on top. Default is none.",
            "name": "levelLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether the breadcrumb item is disabled (not clickable). Default is dalse.",
            "name": "levelDisabled",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "selectDetailLevel",
        "description": "",
        "attribute": [
          {
            "description": "Context value passing to the level to be navigated. Value defined here is accessible by contextVar in MasterDetailLevel. Default is none.",
            "name": "contextValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Listener method which is fired before action / actionListener of component, pe:selectDetailLevel is attached to, gets called. Return value of this listener is used as a new / modified contextValue. The listener allows to pass a new / modified contextValue between levels. Default is none.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Level to go to. Default is none.",
            "name": "level",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies how many steps to go. Can be negative. If level and step are not specified, then step = 1 is assumed. Default is none.",
            "name": "step",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies comma or blank separated list of clientIds of editable components whose inputs have to be preserved while levels get switched. @all is allowed and means all values within master detail have to be preserved. It makes sense e.g. if corresponding command component has \"immediate\"=true attribute. If nothing specified, input values gets cleared.",
            "name": "preserveInputs",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Specifies comma or blank separated list of clientIds of editable components whose inputs have to be cleared while levels get switched. @all is allowed and means all values within master detail have to be cleared. It takes precedence over clientIds in preserveInputs.",
            "name": "resetInputs",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name(s) of one or several accepted events of f:ajax / p:ajax in case when SelectDetailLevel is attached to any component with ajax behavior. Several events should be defined as space or comma separated list. If no events are specified, all events will be accepted.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "blockUI",
        "description": "blockUI blocks any piece of page during various Ajax calls.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Styles for the message when blocking. Styles should be defined as JSON object, e.g. {backgroundColor: 'fff', width: 30%}.",
            "name": "css",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Styles for the overlay. Styles should be defined as JSON object, e.g. {opacity: 0.4, backgroundColor: 'red'}",
            "name": "cssOverlay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies component(s) which send(s) an ajax request and triggers blocking. If nothing specified, the parent component is used.",
            "name": "source",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies component(s) or HTML element(s) to be blocked. If the target is null or not defined, the entire page is blocked.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the component in terms of findComponent to be used as content shown during blocking. If nothing specified, the content of blockUI component is used.",
            "name": "content",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name(s) of one or several accepted events. Several events should be defined as space or comma separated list.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag whether the blocking is shown automatically without the need to use JavaScript widget. Default value is false.",
            "name": "autoShow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Time in millis to wait before auto-unblocking. Don't define it or set to 0 to disable auto-unblock. Default value is 0.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Set this attribute to true to have the message automatically centered along the X axis. Note: it only effects element blocking (page blocking controlled by CSS via the css attribute). Default value is true.",
            "name": "centerX",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Set this attribute to true to have the message automatically centered along the Y axis. Default value is true.",
            "name": "centerY",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Fade In time in millis; set to 0 to disable fadeIn on block.",
            "name": "fadeIn",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Fade Out time in millis; set to 0 to disable fadeOut on unblock.",
            "name": "fadeOut",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Disable if you do not want to show the overlay. Default value is true.",
            "name": "showOverlay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Focus will be placed in the first available input field when page blocking. Default value is true.",
            "name": "focusInput",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "timePicker",
        "description": "Time picker component for time (hours / minutes) inputs. Client behavior events: timeSelect - fires when an hour / minutes is selected (org.primefaces.extensions.event.TimeSelectEvent), close - fires when the time picker is closed (org.primefaces.extensions.event.CloseEvent), beforeShow - fires before the time picker is rendered and displayed (org.primefaces.extensions.event.BeforeShowEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component. Either java.util.Date or java.time.LocalTime",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the time picker when set to true.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "HTML5 inputmode attribute for hinting at the type of data this control has for touch devices to display appropriate virtual keyboard.",
            "name": "inputmode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A localized user presentable name for this component.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the mouse wheel rolls up or down over an element.",
            "name": "onwheel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user copies the content of an element.",
            "name": "oncut",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user cuts the content of an element.",
            "name": "oncopy",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user pastes some content in an element.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element gets user input.",
            "name": "oninput",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a context menu is triggered.",
            "name": "oncontextmenu",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is invalid.",
            "name": "oninvalid",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the Reset button in a form is clicked.",
            "name": "onreset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user writes something in a search field.",
            "name": "onsearch",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is dragged.",
            "name": "ondrag",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the end of a drag operation.",
            "name": "ondragend",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element has been dragged to a valid drop target.",
            "name": "ondragenter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element leaves a valid drop target.",
            "name": "ondragleave",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is being dragged over a valid drop target.",
            "name": "ondragover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the start of a drag operation.",
            "name": "ondragstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragged element is being dropped.",
            "name": "ondrop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element's scrollbar is being scrolled.",
            "name": "onscroll",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the time picker input element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the time picker input element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The character to use to separate hours and minutes. Default is :.",
            "name": "timeSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether or not to show AM/PM with selected time. Default is false.",
            "name": "showPeriod",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Corner of the dialog to position. Default is 'left top'.",
            "name": "dialogPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of the input to position. Default is 'left bottom'.",
            "name": "inputPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Mode specifies appearance of time picker. Possible values are 'popup', 'spinner', 'inline'. Default is 'spinner'.",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies first displayed hour. Possible range is 0-23. Default is 0.",
            "name": "startHours",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies last displayed hour. Possible range is 0-23. Default is 23.",
            "name": "endHours",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies first displayed minute. Possible range is 0-55. Default is 0.",
            "name": "startMinutes",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies last displayed minute. Possible range is 0-55. Default is 55.",
            "name": "endMinutes",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies interval of displayed minutes. Default is 5.",
            "name": "intervalMinutes",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies number of rows for the input tables, minimum 2, makes more sense if you use multiple of 2. Default is 4.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines if the hours section is displayed or not. Set to false to get a minute only dialog. Default is true.",
            "name": "showHours",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the minutes section is displayed or not. Set to false to get a hours only dialog. Default is true.",
            "name": "showMinutes",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Shows an 'ok' button to confirm the edit. Default is false.",
            "name": "showCloseButton",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Shows the 'deselect' time button. Default is false.",
            "name": "showDeselectButton",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Shows the 'now' button. Default is false.",
            "name": "showNowButton",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines a callback to enable / disable certain hours. Example: function onHourShow(hour). Default is null.",
            "name": "onHourShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines a callback to enable / disable certain minutes. Example: function onMinuteShow(hour, minute). Default is null.",
            "name": "onMinuteShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Define when the timepicker is shown. 'focus': when the input gets focus, 'button' when the button trigger element is clicked, 'both': when the input gets focus and when the button is clicked. Default is 'focus'.",
            "name": "showOn",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is a locale specified in view root.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Set the minimum hour selectable by the user, disable hours previous to min. hours. Default is null (not set).",
            "name": "minHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Set the minimum minutes selectable by the user, disable minutes previous to min. minutes. Default is null (not set).",
            "name": "minMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Set the maximum hour selectable by the user, disable hours after max. hours. Default is null (not set).",
            "name": "maxHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Set the maximum minutes selectable by the user, disable minutes after max. minutes. Default is null (not set).",
            "name": "maxMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Makes input text of a popup calendar readonly. Default is false.",
            "name": "readonlyInput",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element. Default is 5.",
            "name": "size",
            "required": false,
            "type": "int"
          }
        ]
      },
      {
        "name": "triStateManyCheckbox",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disable the component.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "User presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Layout of the checkboxes, valid values are �lineDirection�(horizontal) and �pageDirection�(vertical).",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback on change event.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main Layout container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateOne as a css class.",
            "name": "stateOneIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateTwo as a css class.",
            "name": "stateTwoIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateThree as a css class.",
            "name": "stateThreeIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateOne.",
            "name": "stateOneTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateTwo.",
            "name": "stateTwoTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateThree.",
            "name": "stateThreeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tab index to assign to the component, If not given, tabindex=0 will be assigned.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "waypoint",
        "description": "Waypoint makes it easy to execute a custom logic whenever you scroll to an element. Client behavior events: reached - fired when the user scrolls past the element. (org.primefaces.extensions.event.WaypointEvent)",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target component registered as waypoint. If null, the parent component will be taken as target. Default is null.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The context defines which scrollable element the waypoint belongs to and acts within. It can be a component or plain HTML element like a div. Default is window if nothing specified.",
            "name": "forContext",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If false, this waypoint will be created but will be disabled from triggering. You can call widget's method \"enable\" to turn it back on. Default is true.",
            "name": "enabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Default waypoints live on the vertical axis. Their offset is calculated in relation to the top of the viewport and they listen for vertical scroll changes. If horizontal is set to true, offset is calculated in relation to the left of the viewport and listens for horizontal scroll changes. For instance, the value 50 means \"when the left side of this element reaches 50px from the left side of the viewport\". Default is false.",
            "name": "horizontal",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "This option determines how far the top of the element must be from the top of the viewport to trigger a waypoint (callback function). It can be a number, which is taken as a number of pixels (can be also negativ, e.g. -10), a string representing a percentage of the viewport height (e.g. '50%') or a function that will return a number of pixels. Default is 0.",
            "name": "offset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, and multiple waypoints are triggered in one scroll, this waypoint will trigger even if it is not the last waypoint reached. If false, it will only trigger if it is the last waypoint. Default is true.",
            "name": "continuous",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, the waypoint will be destroyed when triggered. Default is false.",
            "name": "triggerOnce",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "switch",
        "description": "Tag to simulate a java switch.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          }
        ]
      },
      {
        "name": "case",
        "description": "Tag which defines a case for the switch component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The switch component will check wheter this value is equal to it's value. If so, the childs of this declared case will be rendered.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Style will be applied to the switch container div if this case matches. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class will be applied to the switch container div if this case matches. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "defaultCase",
        "description": "Tag which defines the default case for the switch component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Style will be applied to the switch container div if default case is renderend. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class will be applied to the switch container div if default case is renderend. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "qrCode",
        "description": "Generate QR codes dynamically",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An EL expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Render method: canvas, img or div. Default value is canvas",
            "name": "renderMethod",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Render method: 0: normal 1: label strip 2: label box 3: image strip 4: image box Default value is 0",
            "name": "renderMode",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Version min range. Default value is 1",
            "name": "minVersion",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Version max range. Default value is 40",
            "name": "maxVersion",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "error correction level: ''L'', ''M'', ''Q'' or ''H'. Default value ''L''",
            "name": "ecLevel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "offset in pixel if drawn onto existing canvas. Default is 0",
            "name": "leftOffset",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "offset in pixel if drawn onto existing canvas. Default is 0",
            "name": "topOffset",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "Size in pixel. Default is 200px",
            "name": "size",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "QRCode content text. Default is empty",
            "name": "text",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "QRCode content label font. Default is sans",
            "name": "fontName",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "QRCode content label color. Default is #000",
            "name": "fontColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "QRCode content label. Default is empty",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code color or image element. Default is #000",
            "name": "fillColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Background color or image element, empty for transparent background. Default is transparent",
            "name": "background",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner radius relative to module width: 0.0 .. 0.5. Default value is 0.0",
            "name": "radius",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Quiet zone in modules. Default value is 0.0",
            "name": "quiet",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Label size percentage. Default value is 0.1",
            "name": "mSize",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Label relative Y position. Default value is 0.5",
            "name": "mPosX",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Label relative Y position. Default value is 0.5",
            "name": "mPosY",
            "required": false,
            "type": "java.lang.Double"
          }
        ]
      },
      {
        "name": "gravatar",
        "description": "",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "size of the image (1px up to 2048px)",
            "name": "size",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "CSS style of the viewer frame.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "'not found' icon",
            "name": "notFound",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "email of the chosen profile",
            "name": "value",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "use true to print a qrCode instead of the user photo",
            "name": "qrCode",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If https or http should be used. Default is true",
            "name": "secure",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "documentViewer",
        "description": "",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Width of the viewer frame. Default to 100%.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the viewer frame.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS style of the viewer frame.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title of the viewer frame per Section 508.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "URL of the document to view.",
            "name": "url",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser caching mode of the resource. Default is false",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Locale to be used for labels.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Start page of the document.",
            "name": "page",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Pagemode: either \"thumbs\" or \"bookmarks\".",
            "name": "pagemode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "You should use a name in your StreamedContent but if you are using a URL value you can give the file a name. NOTE: Must end in .pdf for PDF.js to pick it up!",
            "name": "download",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Zoom level. Example: zoom=200 (accepted formats: '[zoom],[left],[top]', 'page-width', 'page-height', 'page-fit', 'auto')",
            "name": "zoom",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the document.",
            "name": "name",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Nameddest: go to a named destination in the document.",
            "name": "nameddest",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Library name of the document",
            "name": "library",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          }
        ]
      },
      {
        "name": "gChart",
        "description": "GChart is a JSF wrapper of Google Charts API. Client behavior events: select - fired when a \"row\" is selected (org.primefaces.event.SelectEvent)",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "width of the chart",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "height of the chart",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Title of the chart",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component. Use the GChartModelBuilder to create a new GChartModel",
            "name": "value",
            "required": false,
            "type": "org.primefaces.extensions.component.gchart.model.GChartModel"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Google Maps API Key. Can also be provided globally in web.xml as primefaces.GOOGLE_MAPS_API_KEY",
            "name": "apiKey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "he code for the language or locale that should be to customize text that might be part of the chart. Default is \"en\"",
            "name": "language",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of javascript function to extend the options of the underlying GChart",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "timer",
        "description": "Timer Component",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "set to false to hide the timer. The listener will be fired anyway. Default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Timeout in seconds to do the ajax ajax requests. Default is 10.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Interval in milliseconds the timer fires. Default is 1000.",
            "name": "interval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Component(s) to be updated with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression to invoke by polling.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId, when true actions are processed at apply_request_values, when false at invoke_application phase.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component id(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default is true.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is 300. If the value of delay is the literal string 'none' without the quotes, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The format to use when diplaying the value. Accepted values are: 'percentage' to diplay the remaining time as percentage. 'Human' to print a human readable interval. Any other value will be evaluated as a moment.js format",
            "name": "format",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "client-side function used to format the remaining duration",
            "name": "formatFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When set to true, ajax requests are not queued. Default is false.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "In autoStart mode, the timer will start immediatly. Default is true.",
            "name": "autoStart",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Use this attribute to set the timer direction. Default value is false (backward)",
            "name": "forward",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is a locale specified in view root.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "set to true to false the timer periodic. Default is true",
            "name": "singleRun",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript handler executed every second",
            "name": "ontimerstep",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler executed the timeout stops",
            "name": "ontimercomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, unresolvable components referenced in the update/process attribute are ignored. Default is 'false' and therefore a ComponentNotFoundException will be thrown.",
            "name": "ignoreComponentNotFound",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "slideout",
        "description": "SlideOut adds a tab slideout from the screen edge. Client behavior events: open - fires when the slideout is opened (org.primefaces.extensions.event.OpenEvent), close - fires when the slideout is closed (org.primefaces.extensions.event.CloseEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Action which will open the panel, 'hover' or 'click'.",
            "name": "showOn",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text value to display on the handle. Default value is null.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon image to display on the handle. Default value is null.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Location on screen either left, right, top or bottom. Default value is right.",
            "name": "location",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the slide out animation. Default is 300.",
            "name": "animateSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "How many bounces when 'bounce' is called. Default is 4.",
            "name": "bounceTimes",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "How far bounce event will move everything. Default value is 50px.",
            "name": "bounceDistance",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "True to have the tab follow the scroll of the window.",
            "name": "sticky",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Close the tab when the rest of screen is clicked. Default is true.",
            "name": "clickScreenToClose",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Automatically open tab on DOM load. Default is false.",
            "name": "autoOpen",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Panel distance from top or left (bottom or right if offsetReverse is true). Default value is 200px.",
            "name": "offset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Panel is aligned with right or bottom of window. Default is false.",
            "name": "offsetReverse",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Handle distance from top or left. If null, detects panel border to align handle nicely. Default value is NULL.",
            "name": "handleOffset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Handle is aligned with right or bottom of window. Default is false.",
            "name": "handleOffsetReverse",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class of the tab handle element. Default value is null.",
            "name": "handleStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style applied to the tab handle element. Default value is null.",
            "name": "handleStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the slideout container element. Default value is null.",
            "name": "panelStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style applied to the slideout container element. Default value is null.",
            "name": "panelStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when the slideout opens.",
            "name": "onopen",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when the slideout closes.",
            "name": "onclose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler called after opening or closing.",
            "name": "onslide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler called before opening, return false to cancel.",
            "name": "onbeforeopen",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler called before closing, return false to cancel.",
            "name": "onbeforeclose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler called before opening or closing, return false to cancel.",
            "name": "onbeforeslide",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "social",
        "description": "Social is a component to display your social media.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A string name of the share. Social supports following build-in shares: \"email\" | \"twitter\" | \"facebook\" | \"googleplus\" | \"linkedin\" | \"pinterest\" | \"stumbleupon\" | \"pocket\" | \"whatsapp\" | \"viber\" | \"messenger\" | \"vkontakte\" | \"telegram\" | \"line\" | \"rss\"",
            "name": "shares",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Theme for the CSS: \"classic\" | \"flat\" | \"minima\" | \"plain\". Default to \"classic\"",
            "name": "theme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A string specifying url to share. Value of window.location.href is used by default.",
            "name": "url",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A string specifying text to share. The content of meta name=\"description\" or title (if first is missing) is used by default.",
            "name": "text",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\"blank\" - share in the new browser tab \"popup\" - share in the new browser popup window \"self\" - share in the same browser tab.",
            "name": "shareIn",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A boolean specifying whether to show the text on the share button. Default is true.",
            "name": "showLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A boolean or \"inside\" specifying whether and how to show share count. Default is true.",
            "name": "showCount",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "TO e-mail address for the email share option.",
            "name": "emailTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A Twitter username specifying the source of a Tweet.",
            "name": "twitterUsername",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A comma-separated list of hashtags to be appended to Tweet text.",
            "name": "twitterHashtags",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A a url of media to share on Pinterest.",
            "name": "pinterestMedia",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute for each social media share that is clicked on.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute for each social media share that the mouse hovers over.",
            "name": "onmouseenter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute for each social media share that the mouse leaves.",
            "name": "onmouseleave",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "speedtest",
        "description": "Speedtest adds a view with Speedtest gauges. Fires an event when the speedtest has been finished.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "File name (URL) of the dummy file to download. Best results with an 5MB random-test-file.",
            "name": "file",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Caption of Ping result. Default is 'Ping'.",
            "name": "captionPing",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Caption of Jitter result. Default is 'Jitter'.",
            "name": "captionJitter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Caption of Download result. Default is 'Download'.",
            "name": "captionDownload",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Caption of Upload result. Default is 'Upload'.",
            "name": "captionUpload",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Color of Ping result. Default is '#993333'.",
            "name": "colorPing",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Color of Jitter result. Default is '#d2900a'.",
            "name": "colorJitter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Color of Download result. Default is '#339933'.",
            "name": "colorDownload",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Color of Upload result. Default is '#333399'.",
            "name": "colorUpload",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "sheet",
        "description": "Data sheet providing Excel like editing, frozen columns and rows, copy/paste, sorting, etc.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The style class to apply dynamically to the selected column.",
            "name": "currentColClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The style class to apply dynamically to the selected row.",
            "name": "currentRowClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The message to be displayed if no records exist in the sheet.",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A global error message to be added when the Sheet is invalid. If not specified, no global message is added. If specified, a global message will be added with this value.",
            "name": "errorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "List to keep the filtered/sorted data if filtering/sorting is enabled.",
            "name": "filteredValue",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "Maximum number of rows. Default is infinity.",
            "name": "maxRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum number of rows. At least that many of rows will be created during initialization. Default is 0.",
            "name": "minRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum number of columns. Default is infinity.",
            "name": "maxCols",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum number of columns. At least that many of columns will be created during initialization. Default is 0.",
            "name": "minCols",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The number of columns to fix or freeze on the left when scrolling.",
            "name": "fixedCols",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The number of rows to fix or freeze on the top when scrolling.",
            "name": "fixedRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The number of rows to fix or freeze on the bottom when scrolling.",
            "name": "fixedRowsBottom",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The IL8N Locale langauge. Default is en-US.",
            "name": "locale",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allow the columns to be manually resizable. Default to false",
            "name": "resizableCols",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Allow the rows to be manually resizable. Default to false",
            "name": "resizableRows",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Allow the columns to be manually moved. Default to false",
            "name": "movableCols",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Allow the rows to be manually moved. Default to false",
            "name": "movableRows",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The height of the sheet in pixels. It is recommended you use this property instead of a style class to ensure it is applied to the proper element. This can be left empty, but performance may suffer.",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An el expression resolving to a unique key value for each row. Required.",
            "name": "rowKey",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "The style class to apply each row.",
            "name": "rowStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the column headers.",
            "name": "showColumnHeaders",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to specify the rendering of the row headers.",
            "name": "showRowHeaders",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression resolving to a header for each row. Optional.",
            "name": "rowHeader",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Boolean value to specify whether the sheet should be rendered as a read only. This is more efficient than cell by cell, but renders the entire sheet as read only.",
            "name": "readOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "How the sheet rows should be sorted initially. If it is an expression, it must evaluate to the property to be used for sorting - this will not work when columns are specified dynamically. Otherwise, it can also be the ID (without any naming containers prefixed, ie. no parent elements with colons) of a sheet column by which the sheet rows should be sorted. In this case, you also need to set the sortBy attribute on the sheet column.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Sets sorting order. Default is \"ascending\". Valid values are \"ascending\" and \"descending\".",
            "name": "sortOrder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Case sensitivity for sorting, insensitive by default.",
            "name": "caseSensitiveSort",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines where the null values are placed in ascending sort order. Default value is \"1\" meaning null values are placed at the end in ascending mode and at beginning in descending mode. Set to \"-1\" for the opposite behavior.",
            "name": "nullSortOrder",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The Handsontable StretchH value. Affects rendering of the column widths. Valid values are \"none\", \"hybrid\", \"last\", \"all\".",
            "name": "stretchH",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Choose between selecting a single cell, a range of adjacent cells and multiple ranges of non-contiguous cells.. Valid values are \"single\", \"multiple\", \"range\".",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the html container element. Width and Height can be configured here in viewport units",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The additional style classes for the rendered table. Multiple classes may be specified delimited by a space.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The width of the sheet in pixels. For auto width, leave empty.",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of javascript function to extend the options of the underlying Handsontable plugin.",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for all active headers in selections. The header will be marked with this class name only when a whole column or row will be selected.",
            "name": "activeHeaderStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name added to the commented cells.",
            "name": "commentedCellStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for all visible columns in the current selection.",
            "name": "currentColStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for all visible headers in current selection.",
            "name": "currentHeaderStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for all visible rows in the current selection.",
            "name": "currentRowStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for cells that did not pass validation.",
            "name": "invalidCellStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name added to cells with cell meta wordWrap: false",
            "name": "noWordWrapStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for cells that have a placeholder in use.",
            "name": "placeholderCellStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS class name for read-only cells.",
            "name": "readOnlyCellStyleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "sheetcolumn",
        "description": "Data sheet column used to define the available columns in a Sheet component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The column data entry type. Currently supports \"text\", \"numeric\", \"date\", \"password\", \"dropdown\", \"autocomplete\", and \"checkbox\" are experimental.",
            "name": "colType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The column width in pixels.",
            "name": "colWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Property to be used for filtering.",
            "name": "filterBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Property to define the filter match mode of startsWith, endsWith, contains, exact.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A collection of selectitems for filter dropdown.",
            "name": "filterOptions",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "The header text to display above the column.",
            "name": "headerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Password mask defaulted to asterisks *. Note that you can't change symbol used by the input field due to browsers limitations.",
            "name": "passwordHashSymbol",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "By default every password has length equal to the length of value that it corresponds with. Use this option to set fixed hash length.",
            "name": "passwordHashLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Numbers can be formatted to look like currency, percentages, times, or even plain old numbers with decimal places, thousands, and abbreviations.",
            "name": "numericPattern",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is \"en-US\".",
            "name": "numericLocale",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Moment.js date format for colType=\"date\". Default is \"DD/MM/YYYY\".",
            "name": "dateFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "JSON config for coltype=\"date\". DatePicker additional options (see https://github.com/dbushell/Pikaday#configuration).",
            "name": "datePickerConfig",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Moment.js time format for colType=\"date\". Default is \"h:mm:ss a\".",
            "name": "timeFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value if true, the autocomplete cells will only accept values that are defined in the source array. Default true.",
            "name": "autoCompleteStrict",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value If true, allows manual input of value that does not exist in the source. In this case, the field background highlight becomes red and the selection advances to the next cell.",
            "name": "autoCompleteAllowInvalid",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value If true, trims the dropdown to fit the cell size. Default to true.",
            "name": "autoCompleteTrimDropdown",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Number of rows visible in the autocomplete dropdown.",
            "name": "autoCompleteVisibleRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Collection of values to display in colType=\"dropdown\" or \"autocomplete\".",
            "name": "selectItems",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Boolean value to specify whether the column should be rendered as a read only column. This is more efficient than cell by cell, but renders the entire column as read only. The var value may not be referenced.",
            "name": "readOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to specify whether the cell should be rendered as a read only. The EL expression may reference the var value.",
            "name": "readonlyCell",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Property to be used for sorting.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Sets sorting order. Default is \"ascending\". Valid values are \"ascending\" and \"descending\".",
            "name": "sortOrder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The additional style classes for the rendered table cell. Multiple classes may be specified delimited by a space.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether column should trim the whitespace at the beginning and the end of the cell contents. Default Value: true",
            "name": "trimWhitespace",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The value to bind to this column.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Controls the visibilty of the column, default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, the text of the cell content is wrapped if it does not fit in the fixed column width. Default is true.",
            "name": "wordWrap",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A Javascript function, regular expression or a string, which will be used in the process of cell validation. If a function is used, be sure to execute the callback argument with either true (callback(true)) if the validation passed or with false (callback(false)), if the validation failed. Note, that this in the function points to the cellProperties object.",
            "name": "onvalidate",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "orgchart",
        "description": "OrgChart based on https://github.com/dabeng/OrgChart",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "It sets one property of datasource as unique identifier of every orgchart node. Default is \"id\"",
            "name": "nodeId",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "It sets one property of datasource as text content of content section of orgchart node. Default is title",
            "name": "nodeContent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The available values are t2b(implies \"top to bottom\", it's default value), b2t(implies \"bottom to top\"), l2r(implies \"left to right\"), r2l(implies \"right to left\").",
            "name": "direction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Users could pan the orgchart by mouse drag&drop if they enable this option. Default is false",
            "name": "pan",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "It indicates the level that at the very beginning orgchart is expanded to. Default is 999",
            "name": "depth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "It enable the export button for orgchart. Default is false",
            "name": "exportButton",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "It's filename when you export current orgchart as a picture. Default is \"Orgchart\"",
            "name": "exportFilename",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Available values are png and pdf. Default is \"png\"",
            "name": "exportFileextension",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of javascript function to extend the options of the underlying OrgChart JS plugin.",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Using font awesome icon to imply that the node has child nodes. Default is \"fa-users\"",
            "name": "parentNodeSymbol",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Users can drag & drop the nodes of orgchart if they enable this option. **Note**: this feature doesn't work on IE due to its poor support for HTML5 drag & drop API. Default is false",
            "name": "draggable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "when you wanna instantiate multiple orgcharts on one page, you should add diffent classname to them in order to distinguish them. Default is \"\"",
            "name": "chartClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Users could zoomin/zoomout the orgchart by mouse wheel if they enable this option. Default is false",
            "name": "zoom",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Once enable this option, users can show/hide left/right sibling nodes respectively by clicking left/right arrow. Default is false",
            "name": "toggleSiblingsResp",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Users are allowed to set a zoom-in limit. Default is 7",
            "name": "zoominLimit",
            "required": false,
            "type": "java.lang.Number"
          },
          {
            "description": "Users are allowed to set a zoom-out limit. Default is 0.5",
            "name": "zoomoutLimit",
            "required": false,
            "type": "java.lang.Number"
          },
          {
            "description": "Users can make use of this option to align the nodes vertically from the specified depth.",
            "name": "verticalDepth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "It sets one property of datasource as text content of title section of orgchart node. In fact, users can create a simple orghcart with only nodeTitle option. Default is \"name\"",
            "name": "nodeTitle",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "inputPhone",
        "description": "InputPhone is an extension to the inputText with optimized handling for phone numbers. Client behavior events: countrySelect - fires when a country is selected (org.primefaces.event.SelectEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "HTML5 inputmode attribute for hinting at the type of data this control has for touch devices to display appropriate virtual keyboard.",
            "name": "inputmode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the mouse wheel rolls up or down over an element.",
            "name": "onwheel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user copies the content of an element.",
            "name": "oncut",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user cuts the content of an element.",
            "name": "oncopy",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user pastes some content in an element.",
            "name": "onpaste",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element gets user input.",
            "name": "oninput",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a context menu is triggered.",
            "name": "oncontextmenu",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is invalid.",
            "name": "oninvalid",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the Reset button in a form is clicked.",
            "name": "onreset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when the user writes something in a search field.",
            "name": "onsearch",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is dragged.",
            "name": "ondrag",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the end of a drag operation.",
            "name": "ondragend",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element has been dragged to a valid drop target.",
            "name": "ondragenter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element leaves a valid drop target.",
            "name": "ondragleave",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element is being dragged over a valid drop target.",
            "name": "ondragover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute at the start of a drag operation.",
            "name": "ondragstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragged element is being dropped.",
            "name": "ondrop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an element's scrollbar is being scrolled.",
            "name": "onscroll",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Input field type. Default \"tel\".",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the input element.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether or not to allow the dropdown. If disabled, there is no dropdown arrow, and the selected flag is not clickable.\nAlso we display the selected flag on the right instead because it is just a country marker.",
            "name": "allowDropdown",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If there is just a dial code in the input: remove it on blur or submit.\nThis is to prevent just a dial code getting submitted with the form. Requires nationalMode to be set to false.",
            "name": "autoHideDialCode",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Set the input's placeholder to an example number for the selected country, and update it if the country changes.\nYou can specify the number type using the placeholderNumberType attribute.\nBy default it is set to \"polite\", which means it will only set the placeholder if the input doesn't already have one.\nYou can also set it to \"aggressive\", which will replace any existing placeholder, or \"off\". Loads the utils script.",
            "name": "autoPlaceholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In the dropdown, display all countries except the ones you specify here.\nEither a comma separated string or collection of ISO 2 country codes. Default is none.",
            "name": "excludeCountries",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Format the input value (according to the nationalMode option) during initialisation, and on setNumber.\nLoads the utils script.",
            "name": "formatOnDisplay",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Set the initial country selection by specifying it's country code.\nIf you leave initialCountry blank, it will default to the first country in the list. Default is \"us\".",
            "name": "initialCountry",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allow users to enter national numbers (and not have to think about international dial codes).\nFormatting, JS validation and placeholders still work. Defaults is true.",
            "name": "nationalMode",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "In the dropdown, display only the countries you specify here.\nEither a comma separated string or collection of ISO 2 country codes. Default is null (so all countries).",
            "name": "onlyCountries",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Specify one of \"fixed_line\", \"mobile\", \"toll_free\", \"shared_cost\", \"voip\", \"personal_number\", \"pager\", \"uan\", \"voicemail\" or \"unknown\".\nDefault is \"mobile\".",
            "name": "placeholderNumberType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specify the countries to appear at the top of the list.\nEither a comma separated string or collection of ISO 2 country codes. Default is none.",
            "name": "preferredCountries",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Display the country dial code next to the selected flag so it's not part of the typed number.\nNote that this will disable nationalMode because technically we are dealing with international numbers,\nbut with the dial code separated. Default false.",
            "name": "separateDialCode",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "When setting initialCountry to \"auto\", you must use this attribute to specify a custom function\nthat looks up the user's location, and then calls the success callback with the relevant country code.\nSee showcase for an example. Default null.",
            "name": "geoIpLookup",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "timeAgo",
        "description": "TimeAgo renders automatically updating fuzzy timestamps.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Date, ZonedDateTime or LocalDateTime object to render.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or java.util.Locale representing user locale. Default is a locale specified in view root.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Pattern defining how the date object should be formatted in the HTML title attribute.",
            "name": "titlePattern",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "fab",
        "description": "Floating Action Button holds menu items which pop out on click.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Position of the items in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for the main button. Default value is \"pi pi-plus\".",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Active variant of the icon for the main button. Default value is null.",
            "name": "iconActive",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Keep the menu open when an item is clicked. Default value is false.",
            "name": "keepOpen",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element. Default value is null.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main button element. Default value is null.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "codeScanner",
        "description": "CodeScanner allows you to scan bar and QR codes using a device camera. Client behavior events: codeScanned - fires when a code is scanned (org.primefaces.event.SelectEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of video in CSS pixels.",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Height of video in CSS pixels.",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code type (\"multi\", \"bar\" or \"qr\"). Default \"multi\".",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating the scanner should start when rendered. Default is true.",
            "name": "autoStart",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when a code scan is successful.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a code scan fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating a video element should be rendered. Default is true.",
            "name": "video",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Id of the video input device to use. Default is null which selects the first video input device.",
            "name": "deviceId",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "lightSwitch",
        "description": "LightSwitch automatically switched to light or dark theme depending on the OS settings. Client behavior events: switch - fires on switch (org.primefaces.event.SelectEvent).",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selected theme. Should point to a value in a session scoped bean which you should also use as the context param 'primefaces.THEME'.",
            "name": "selected",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Light theme. Default 'saga'.",
            "name": "light",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dark theme. Default 'arya'.",
            "name": "dark",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating to switch to the theme based on the OS setting automatically. Default true.",
            "name": "automatic",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    ]
  }
}