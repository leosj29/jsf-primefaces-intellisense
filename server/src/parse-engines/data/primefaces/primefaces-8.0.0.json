{
  "components": {
    "component": [
      {
        "name": "autoUpdate",
        "description": "AutoUpdate is a TagHandler to mark the parent component to be updated at every AJAX request. AutoUpdate is ignored if the trigger (p:commandButton, p:ajax...) of AJAX request has the attribute ignoreAutoUpdate set to 'true'.",
        "attribute": [
          {
            "description": "If autoUpdate should be disabled. Default = false.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dataExporter",
        "description": "DataExporter is handy for exporting data listed using a PrimeFaces Datatable to various formats such as excel, pdf, csv and xml.",
        "attribute": [
          {
            "description": "Server side id of the datatable whose data would be exported.",
            "name": "target",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Export type: \"xls\",\"pdf\",\"csv\", \"xml\".",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Filename of the generated export file, defaults to datatable server side id.",
            "name": "fileName",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Exports only current page instead of whole dataset.",
            "name": "pageOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "PreProcessor for the exported document.",
            "name": "preProcessor",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "PostProcessor for the exported document.",
            "name": "postProcessor",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Character encoding to use.",
            "name": "encoding",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, only selection would be exported.",
            "name": "selectionOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Exports the header and cell content according to the option.",
            "name": "options",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Custom exporter to be used instead of built-in exporters.",
            "name": "exporter",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "OnTableRender to be used to set the options of exported table.",
            "name": "onTableRender",
            "required": false,
            "type": "javax.el.MethodExpression"
          }
        ]
      },
      {
        "name": "fileDownload",
        "description": "The legacy way to present dynamic binary data to the client is to write a servlet or a filter and stream the binary data. FileDownload presents an easier way to do the same.",
        "attribute": [
          {
            "description": "A streamed content instance.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Specifies display mode, valid values are \"attachment\" (default) and \"inline\".",
            "name": "contentDisposition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines setting cookie key for monitorDownload method on client side.",
            "name": "monitorKey",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "collector",
        "description": "Collector is a simple utility to manage collections declaratively.",
        "attribute": [
          {
            "description": "Value to be used in collection operation.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Reference to the Collection instance.",
            "name": "addTo",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Reference to the Collection instance.",
            "name": "removeFrom",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Checks for duplicate items on addition, default is true.",
            "name": "unique",
            "required": true,
            "type": "java.lang.Object"
          }
        ]
      },
      {
        "name": "ajax",
        "description": "AjaxBehavior is an extension to standard f:ajax.",
        "attribute": [
          {
            "description": "Method to process in partial request.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId to execute listener. Default is false meaning \"Invoke Application\" phase, when true phase is \"Apply Request Values\".",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Component(s) to process in partial request. Defaults to @this.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to update with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback execute when ajax request is completed and dom is updated.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback execute when ajax requests returns with error response.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback execute before dom is updated.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables ajax behavior.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side event to trigger ajax request. Default value is defined by parent ClientBehaviorHolder component the behavior is attached to.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Some components skips processing of their children in certain events, setting skipChildren as false to disables this behavior.",
            "name": "skipChildren",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "printer",
        "description": "Printer allows sending a specific JSF component to the printer, not the whole page.",
        "attribute": [
          {
            "description": "Id of the component to print.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "confirm",
        "description": "Confirm is a behavior element used to integrate with global confirm dialog.",
        "attribute": [
          {
            "description": "Header text of the confirmation dialog.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Detail text of the confirmation dialog.",
            "name": "message",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon to display inside the confirm dialog.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables confirm behavior.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Escape the message attribute.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "resetInput",
        "description": "Input components keep their local values at state when validation fails. ResetInput is used to clear the cached values from state so that components retrieve their values from the backing bean model instead.",
        "attribute": [
          {
            "description": "Comma or white-space separated list of component ids.",
            "name": "target",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to assign null values to bound values as well.",
            "name": "clearModel",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "clientValidator",
        "description": "ClientValidator is a behavior element used in Client Side Validation to do instant validation in case you do not want to wait for the users to fill in the form and hit commandButton/commandLink.",
        "attribute": [
          {
            "description": "Event to trigger the validation.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables instant client validation for the attached input.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "repeat",
        "description": "Repeat is an alternative to the standard ui:repeat component, that fix the compatibility with Mojarra. There are no additonal features and usage is same as ui:repeat.",
        "attribute": [
          {
            "description": "The name of a collection of items that this tag iterates over. The collection may be a List, array, java.sql.ResultSet, or an individual java Object. If the collection is null, this tag does nothing.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the exported scoped variable for the current item of the iteration. This scoped variable has nested visibility. Its type depends on the object of the underlying collection.",
            "name": "var",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the exported request scoped variable for the status of the iteration. Object is a POJO with the following read-only JavaBeans properties. This scoped variable has nested visibility.",
            "name": "varStatus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Read-write property setting the offset from the beginning of the collection from which to start the iteration. If not set, this offset is not considered and iteration will start at the beginning of the collection.",
            "name": "offset",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Iteration will only process every step items of the collection, starting with the first one.",
            "name": "step",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Read-write property setting the size of the collection to iterate. If this value is less than the actual size of the collection, a FacesException must be thrown.",
            "name": "size",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "If value specified: Iteration begins at the item located at the specified index. First item of the collection has index 0. If value not specified: Iteration begins with index set at the specified value.",
            "name": "begin",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "If value specified: Iteration ends at the item located at the specified index (inclusive). If value not specified: Iteration ends when index reaches the specified value (inclusive).",
            "name": "end",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "importConstants",
        "description": "Util tag to import constants.",
        "attribute": [
          {
            "description": "The constants class.",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "The EL variable which can be used to obtain the constants. Default value: Name of the class without package.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "importEnum",
        "description": "Util tag to import enums.",
        "attribute": [
          {
            "description": "The enum class.",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "The EL variable which can be used to obtain the enum values. Default value: Name of the class without package.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The suffix mapping for a array with all enum values. Default value: ALL_VALUES.",
            "name": "allSuffix",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "accordionPanel",
        "description": "AccordionPanel is a container component that displays content in stacked format.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the active tab or a comma separated string of indexes when multiple mode is on. Default is zero.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a tab is clicked.",
            "name": "onTabChange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a tab is shown.",
            "name": "onTabShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a tab is closed.",
            "name": "onTabClose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the toggle mode.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if activating a dynamic tab should load the contents from server again.",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of collection iterator to use in dynamic number of tabs.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "List to iterate to display dynamic number of tabs.",
            "name": "value",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "Enables activating multiple tabs, default is false.",
            "name": "multiple",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "AccordionPanel is a naming container thus prepends its id to its children by default, a false value turns this behavior off except for dynamic tabs.",
            "name": "prependId",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the headers in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method providing suggestions.",
            "name": "tabController",
            "required": false,
            "type": "javax.el.MethodExpression"
          }
        ]
      },
      {
        "name": "ajaxExceptionHandler",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Client side callback to execute after a exception with this type occured.",
            "name": "onexception",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Components to update after a exception with this type occured.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Exception type to handle.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "ajaxStatus",
        "description": "AjaxStatus is a global notifier for ajax requests made by PrimeFaces components.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay in milliseconds before displaying the ajax status. Default is 0 meaning immediate.",
            "name": "delay",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute after ajax requests start.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute after ajax requests complete.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute after ajax requests completed succesfully.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when an ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "autoComplete",
        "description": "AutoComplete provides live suggestions while an input is being typed.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method providing suggestions.",
            "name": "completeMethod",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Name of the iterator used in pojo based suggestion.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the item.",
            "name": "itemLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the item.",
            "name": "itemValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "A string to be rendered onto the class tag of the selected items (tokens rendered inside the input container).",
            "name": "itemStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of results to be displayed. Default is unlimited.",
            "name": "maxResults",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Number of characters to be typed before starting to query. Default is 1.",
            "name": "minQueryLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Delay to wait in milliseconds before sending each query to the server. Default is 300.",
            "name": "queryDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When enabled, autoComplete only accepts input from the selection list. Default is false.",
            "name": "forceSelection",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the height of the viewport for autocomplete suggestions.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "dropdown",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "multiple",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of itemtip with respect to item. Default is \"left top\".",
            "name": "itemtipMyPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of item with respect to item. Default is \"right bottom\".",
            "name": "itemtipAtPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled autocomplete caches the searched result list.",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Timeout value for cached results.",
            "name": "cacheTimeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Text to display when there is no data to display.",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the overlay to the element defined by search expression. Defaults to document body.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Hint text for screen readers to provide information about the search results. Default is \"{0} results found, use arrow keys to navigate\".",
            "name": "resultsMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value to group items in categories.",
            "name": "groupBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Event to initiate the query, valid values are \"keyup\" and \"enter\".",
            "name": "queryEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the behavior dropdown button. Default \"blank\" mode sends an empty string and \"current\" mode sends the input value.",
            "name": "dropdownMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Highlights the first suggested item automatically. Default is true.",
            "name": "autoHighlight",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Limits the selection. Default is unlimited.",
            "name": "selectLimit",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the input element.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tooltip to display on group headers.",
            "name": "groupByTooltip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of panel with respect to input Default is \"left top\".",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of input with respect to panel Default is \"left bottom\".",
            "name": "at",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if autocomplete functionality is enabled. Default is true and a false value simply turns the component into a simple inputtext.",
            "name": "active",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Input field type. Default is text.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The text shown in panel when the suggested list is greater than maxResults.",
            "name": "moreText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Ensures uniqueness of selected items.",
            "name": "unique",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if dynamic loading is enabled for the element's panel. If the value is \"true\", the overlay is not rendered on page load to improve performance. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if auto selection of items that are equal to the typed input is enabled. If true, an item that is equal to the typed input is selected. Default is true.",
            "name": "autoSelection",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if autocomplete results are escaped or not. Default is true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies query mode, valid values are \"server\" (default), \"client\" and \"hybrid\".",
            "name": "queryMode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "barcode",
        "description": "Barcode component is used to display various barcode formats.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Type of the barcode.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser caching mode of the resource. Default is true.",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Format of the generated barcode, valid values are png (default) and svg.",
            "name": "format",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The barcode orientation in terms of angle (0, 90, 180, 270).",
            "name": "orientation",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The QR Code error correction level. L (default) - up to 7% damage. M - up to 15% damage. Q - up to 25% damage. H - up to 30% damage",
            "name": "qrErrorCorrection",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The barcode human readable placement of text either \"none\", \"top\", or \"bottom\".",
            "name": "hrp",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Binary data to stream or context relative path.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Alternate text for the image.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the image.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the image.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title of the image.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction of the text displayed.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Language code.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies to use a server-side image map.",
            "name": "ismap",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the client side map.",
            "name": "usemap",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the image.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the image.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onclick dom event handler.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "ondblclick dom event handler.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeydown dom event handler.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeypress dom event handler.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeyup dom event handler.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmousedown dom event handler.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmousemove dom event handler.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseout dom event handler.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseover dom event handler.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseup dom event handler.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "blockUI",
        "description": "BlockUI blocks JSF components during ajax processing.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of component(s) to bind the block UI.",
            "name": "trigger",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component whose UI to block.",
            "name": "block",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Blocks the ui by default when enabled.",
            "name": "blocked",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When disabled, Displays block without animation effect",
            "name": "animate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "breadCrumb",
        "description": "Breadcrumb is a navigation component that provides contextual information about page hierarchy in the workflow.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Style of main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines display mode of root link, valid values are \"icon\" default and \"text\".",
            "name": "homeDisplay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the items in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean flag indicating whether the last item should be disabled. Default is false.",
            "name": "lastItemDisabled",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "button",
        "description": "Button is an extension to the standard h:button component with skinning capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component than can be either an EL expression of a literal text.",
            "name": "value",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Used to resolve a navigation case.",
            "name": "outcome",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to include page parameters in target URI. Default is false.",
            "name": "includeViewParams",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the target page which should be scrolled to.",
            "name": "fragment",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables button.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Access key that when pressed transfers focus to button.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes button read only.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the button.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the button.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over button.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over button.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over button.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over button.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within button.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from button.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto button.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over button.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon of the button.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is left.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Resource to link to.",
            "name": "href",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The window target. Default _self.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if label of the component is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays button inline instead of fitting the content width, only used by mobile.",
            "name": "inline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disable appending the on the rendering of this element.",
            "name": "disableClientWindow",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "cache",
        "description": "Cache component is used to reduce page load time by caching the content after initial rendering.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Disables caching.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Unique id of the cache region, defaults to view id.",
            "name": "region",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Unique id of the cache entry in region, defaults to client id of component.",
            "name": "key",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, lifecycle events such as button actions are executed. Default is false.",
            "name": "processEvents",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "calendar",
        "description": "Calendar is an input component used to provide a date. Other than basic features calendar supports paging, localization, ajax selection and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets calendar's minimum visible date.",
            "name": "mindate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Sets calendar's maximum visible date.",
            "name": "maxdate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Enables multiple page rendering.",
            "name": "pages",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines how the calendar will be displayed. Default is popup",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "DateFormat pattern for localization.",
            "name": "pattern",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "User locale for i18n localization messages. The attribute can be either a String or java.util.Locale object.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Enables month/year navigator. Default is false.",
            "name": "navigator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()",
            "name": "timeZone",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Makes input text of a popup calendar readonly. Default is false.",
            "name": "readonlyInput",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Visibility of button panel containing today and done buttons. Default is false.",
            "name": "showButtonPanel",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Effect to use when displaying and showing the popup calendar.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Duration of the effect. Default is normal.",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side event that displays the popup calendar.",
            "name": "showOn",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays the week number next to each week. Default is false.",
            "name": "showWeek",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables weekend columns. Default is false.",
            "name": "disabledWeekends",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays days belonging to other months. Default is false.",
            "name": "showOtherMonths",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Enables selection of days belonging to other months. Default is false.",
            "name": "selectOtherMonths",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Year range for the navigator, default is \"c-10:c+10\"",
            "name": "yearRange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shows only time picker without date.",
            "name": "timeOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Hour steps, default is 1.",
            "name": "stepHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minute steps, default is 1.",
            "name": "stepMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Second steps, default is 1.",
            "name": "stepSecond",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum boundary for hour selection. Default is 0.",
            "name": "minHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum boundary for hour selection. Default is 23.",
            "name": "maxHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum boundary for minute selection. Default is 0.",
            "name": "minMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum boundary for minute selection. Default is 59.",
            "name": "maxMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum boundary for second selection. Default is 0.",
            "name": "minSecond",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum boundary for second selection. Default is 59.",
            "name": "maxSecond",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Sets the initial date when value is not populated.",
            "name": "pagedate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Callback to execute before displaying a date, used to customize date display.",
            "name": "beforeShowDay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if a mask should be applied to the input field. Default value is \"false\" and valid values to enable are \"true\" that uses the pattern as the mask or a custom template. Refer to inputMask component for more information about custom templates.",
            "name": "mask",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the type of element to use for time picker, valid values are \"slider\" , \"select\" and \"custom\"(with \"timeControlObject\" attribute).",
            "name": "timeControlType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to execute before displaying calendar, element and calendar instance are passed as parameters.",
            "name": "beforeShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "PlaceHolder in mask template.",
            "name": "maskSlotChar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Clears the field on blur when incomplete input is entered.",
            "name": "maskAutoClear",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side object to use in custom timeControlType.",
            "name": "timeControlObject",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allows direct input in time field. Default is false.",
            "name": "timeInput",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to show the hour control, valid values are \"true\" and \"false\".",
            "name": "showHour",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to show the minute control, valid values are \"true\" and \"false\".",
            "name": "showMinute",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to show the second control, valid values are \"true\" and \"false\".",
            "name": "showSecond",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to show the millisecond control, valid values are \"true\" and \"false\".",
            "name": "showMillisec",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to show the \"Current Date\" button if showButtonPanel is rendered. Default is \"true\".",
            "name": "showTodayButton",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the button in the tabbing order.",
            "name": "buttonTabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the input element. Used when mode is popup.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element. Used when mode is popup.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Input field type. Default is text.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If enabled, the input is focused again after selecting a date. Default is false.",
            "name": "focusOnSelect",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Try to show the time dropdowns all on one line. This should be used with controlType 'select'.",
            "name": "oneLine",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Default for hour selection, if no date is given. Default is 0.",
            "name": "defaultHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Default for minute selection, if no date is given. Default is 0.",
            "name": "defaultMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Default for second selection, if no date is given. Default is 0.",
            "name": "defaultSecond",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Default for millisecond selection, if no date is given. Default is 0.",
            "name": "defaultMillisec",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "ResolverStyle for java.time.format.DateTimeFormatter, lenient, smart or strict, Default is smart.",
            "name": "resolverStyle",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "captcha",
        "description": "Captcha is a form validation component based on Recaptcha API.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Theme of the captcha. Default is light.",
            "name": "theme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Key of the supported languages. Default is \"en\".",
            "name": "language",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the input element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback executed when the user submits a successful captcha response.",
            "name": "callback",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback executed when the captcha response expires and the user needs to solve a new captcha.",
            "name": "expired",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The size of the widget.",
            "name": "size",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "carousel",
        "description": "Carousel is a multi purpose component to display a set of data or general content with slide effects.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the first visible item.",
            "name": "firstVisible",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Number of visible items per page. Default is 3.",
            "name": "numVisible",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Sets continuous scrolling. Default is false.",
            "name": "circular",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets vertical scrolling. Default is false",
            "name": "vertical",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets the time in milliseconds to have Carousel start scrolling automatically after being initialized. Default is 0.",
            "name": "autoPlayInterval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines number of pageLinks of paginator.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the animation effect slide or fade. Default is slide.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the animation effect. Default is easeInOutCirc.",
            "name": "easing",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets the speed of the scrolling animation in milliseconds. Default is 500.",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Text format of the pager dropdown elements. Default is \"{page}\".",
            "name": "dropdownTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of each item container.",
            "name": "itemStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of each item container.",
            "name": "itemStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shortcut for header facet.",
            "name": "headerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shortcut for footer facet.",
            "name": "footerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In responsive mode, carousel adjusts its content based on screen size.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Breakpoint value in pixels to switch between small and large viewport. Default is 640",
            "name": "breakpoint",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Makes panel toggleable. Default is false.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Speed of toggling in milliseconds. Default is 500",
            "name": "toggleSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Renders a toggleable panel as collapsed. Default is false.",
            "name": "collapsed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, carousel state is saved in a cookie for the session. Default is false.",
            "name": "stateful",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "cellEditor",
        "description": "CellEditor is a helper component of datatable used for incell editing.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Prevents hidden content to be shown.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "chart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of the chart.",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.chart.ChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In responsive mode, chart is redrawn when window is resized.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "checkbox",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Index of the selectItem of the SelectManyCheckbox.",
            "name": "itemIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute on state change.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the SelectManyCheckbox component to attach to.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "chips",
        "description": "Chips is used to enter multiple values on an inputfield.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of entries allowed.",
            "name": "max",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the input control.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input control.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "clock",
        "description": "Clock displays server or client datetime live.",
        "attribute": [
          {
            "description": "Datetime format.",
            "name": "pattern",
            "required": false,
            "type": "String"
          },
          {
            "description": "Mode of the client, valid values are client and server.",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Syncs time periodically in server mode.",
            "name": "autoSync",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the sync interval in autoSync mode, default is 60000 milliseconds.",
            "name": "syncInterval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()",
            "name": "timeZone",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Display mode, valid values are digital(default) and analog.",
            "name": "displayMode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "colorPicker",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute on value change.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "column",
        "description": "Column is an extended version of the standard column used by various PrimeFaces components like datatable, treetable and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Property to be used for sorting.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Inline style of the column.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the column.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable sortFunction.",
            "name": "sortFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Property to be used for filtering.",
            "name": "filterBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Inline style of the filter element.",
            "name": "filterStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the filter element.",
            "name": "filterStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A collection of selectitems for filter dropdown.",
            "name": "filterOptions",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Match mode for filtering.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Location of the column filter with respect to header content. Options are 'bottom'(default) and 'top'.",
            "name": "filterPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the number of rows the column spans.",
            "name": "rowspan",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines the number of columns the column spans.",
            "name": "colspan",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Shortcut for header facet.",
            "name": "headerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shortcut for footer facet.",
            "name": "footerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables selection mode, valid values are \"single\" and \"multiple\".",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters for an input filter.",
            "name": "filterMaxLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies resizable feature at column level. Datatable's resizableColumns must be enabled to use this option.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the column should be exported by dataexporter.",
            "name": "exportable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Value of the filter field.",
            "name": "filterValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Width of the column in pixels or percentage.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if panel is toggleable by columnToggler component. Default value is true and a false value marks the column as static.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Custom implementation to filter a value against a constraint.",
            "name": "filterFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Name of the field to pass lazy load method for filtering and sorting. If not specified, filterBy-sortBy values are used to identify the field name.",
            "name": "field",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Priority of the column defined as an integer, lower values have more priority.",
            "name": "priority",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Boolean value to mark column as sortable.",
            "name": "sortable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to mark column as filterable.",
            "name": "filterable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls the visibilty of the column, default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether clicking the column selects the row when datatable has row selection enabled, default is true.",
            "name": "selectRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label to read by screen readers, when not specified headerText is used.",
            "name": "ariaHeaderText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable exportFunction.",
            "name": "exportFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Speficies whether to group rows based on the column data.",
            "name": "groupRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the header value of column to be exported.",
            "name": "exportHeaderValue",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the footer value of column to be exported.",
            "name": "exportFooterValue",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "columnGroup",
        "description": "ColumnGroup is used by datatable for grouping.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Type of group, valid values are header and footer.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "columns",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "\n                \n            ",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "\n                \n            ",
            "name": "var",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Property to be used for sorting.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Inline style of the column.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the column.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable sortFunction.",
            "name": "sortFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Property to be used for filtering.",
            "name": "filterBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Inline style of the filter element.",
            "name": "filterStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the filter element.",
            "name": "filterStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A collection of selectitems for filter dropdown.",
            "name": "filterOptions",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Match mode for filtering.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Location of the column filter with respect to header content. Options are 'bottom'(default) and 'top'.",
            "name": "filterPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the filter field.",
            "name": "filterValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines the number of rows the column spans.",
            "name": "rowspan",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines the number of columns the column spans.",
            "name": "colspan",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Shortcut for header facet.",
            "name": "headerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shortcut for footer facet.",
            "name": "footerText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters for an input filter.",
            "name": "filterMaxLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies resizable feature at column level. Datatable's resizableColumns must be enabled to use this option.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the column should be exported by dataexporter.",
            "name": "exportable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of iterator to refer each row index.",
            "name": "columnIndexVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the column in pixels or percentage.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if panel is toggleable by columnToggler component. Default value is true and a false value marks the column as static.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Custom implementation to filter a value against a constraint.",
            "name": "filterFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Name of the field to pass lazy load method for filtering and sorting. If not specified, filterBy-sortBy values are used to identify the field name.",
            "name": "field",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Priority of the column defined as an integer, lower values have more priority.",
            "name": "priority",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Boolean value to mark column as sortable.",
            "name": "sortable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value to mark column as filterable.",
            "name": "filterable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls the visibilty of the column, default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether clicking the column selects the row when datatable has row selection enabled, default is true.",
            "name": "selectRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label to read by screen readers, when not specified headerText is used.",
            "name": "ariaHeaderText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable exportFunction.",
            "name": "exportFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Speficies whether to group rows based on the column data.",
            "name": "groupRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if the header value of column to be exported.",
            "name": "exportHeaderValue",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the footer value of column to be exported.",
            "name": "exportFooterValue",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "columnToggler",
        "description": "ColumnToggler is a helper component for datatable to toggle visibility of columns.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A search expression resolving to a component to get attached to.",
            "name": "trigger",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "A search expression resolving to a DataTable component whose columns to be toggled.",
            "name": "datasource",
            "required": true,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "commandButton",
        "description": "CommandButton is an extended version of standard JSF commandButton with ajax and skinning features.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the submit mode, when set to true (default), submit would be made with Ajax.",
            "name": "ajax",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to be updated with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether to trigger ajaxStatus or not.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Access key that when pressed transfers focus to the button.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the button.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the button.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets the behavior of the button. Default is submit.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the button element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the button element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over button.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over button.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over button.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over button.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within button.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from button.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto button.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over button.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within button is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon of the button.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is left.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays button inline instead of fitting the content width, only used by mobile.",
            "name": "inline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if label of the component is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true client side validation is enabled, global setting is required to be enabled as a prerequisite.",
            "name": "validateClient",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, click event can be added to disabled button",
            "name": "renderDisabledClick",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "commandLink",
        "description": "CommandLink extends standard JSF commandLink with Ajax capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Specifies the submit mode, when set to true (default), submit would be made with Ajax.",
            "name": "ajax",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to be updated with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether to trigger ajaxStatus or not.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Access key that when pressed transfers focus to the link.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Character encoding of the resource designated by this hyperlink.",
            "name": "charset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position and shape of the hot spot on the screen for client use in image maps.",
            "name": "coords",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the link.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Languae code of the resource designated by the link.",
            "name": "hreflang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Relationship from the current document to the anchor specified by the link, values are provided by a space-separated list of link types.",
            "name": "rel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A reverse link from the anchor specified by this link to the current document, values are provided by a space-separated list of link types.",
            "name": "rev",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shape of hot spot on the screen, valid values are default, rect, circle and poly.",
            "name": "shape",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of a frame where the resource targeted by this link will be displayed.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of resource referenced by the link.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style to be applied on the anchor element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass to be applied on the anchor element",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over link.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over link.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over link.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over link.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within link.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from link.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto link.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over link.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When set to true client side validation is enabled, global setting is required to be enabled as a prerequisite.",
            "name": "validateClient",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "confirmDialog",
        "description": "ConfirmDialog is a replacement to the legacy javascript confirmation box. Skinning, customization and avoiding popup blockers are notabled advantages over classic javascript confirmation.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text to be displayed in body. Required.",
            "name": "message",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text for the header.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message severity for the dislayed icon. Default is alert.",
            "name": "severity",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the dialog in pixels. Default is auto.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the dialog.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inner style of the dialog container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the dialog container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if close icon should be displayed or not. Default is true.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Appends the dialog to the given search expression.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets dialogs visibility. Default is false.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Effect to use when showing the dialog.",
            "name": "showEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to use when hiding the dialog.",
            "name": "hideEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if dialog should close when escape key is pressed. Default is false.",
            "name": "closeOnEscape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, confirmDialog becomes a shared for other components that require confirmation.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "In responsive mode, dialog adjusts itself based on screen width.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "contentFlow",
        "description": "ContentFlow is used to display a collection of items.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Collection of items.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator to display an item.",
            "name": "var",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "contextMenu",
        "description": "ContextMenu provides an overlay menu displayed on mouse right-click event.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the component to attach to.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Menu model instance to create menu programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Type of tree nodes to get attached.",
            "name": "nodeType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event to bind the contextmenu default is right click.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before context menu is shown.",
            "name": "beforeShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the selection behavior. Valid values are \"single\" and \"multiple\" (default).",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to filter the elements to attach the menu. Default is null.",
            "name": "targetFilter",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "dashboard",
        "description": "Dashboard provides a portal like layout with drag-drop based reorder capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dashboard model instance representing the layout of the UI.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.DashboardModel"
          },
          {
            "description": "Disables reordering.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the dashboard container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the dashboard container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "dataGrid",
        "description": "DataGrid displays a collection of data in grid layout. Ajax Pagination is a built-in feature and paginator UI is fully customizable via various options like paginatorTemplate, rowPerPageOptions, pageLinks and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of columns of grid. Default is 3.",
            "name": "columns",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Enables pagination.",
            "name": "paginator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the paginator.",
            "name": "paginatorTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the rowsPerPage dropdown.",
            "name": "rowsPerPageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for rowsPerPage dropdown.",
            "name": "rowsPerPageLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the currentPageReport UI.",
            "name": "currentPageReportTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of page links to display. Default is 10.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the paginator. Default is both.",
            "name": "paginatorPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.",
            "name": "paginatorAlwaysVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of iterator to refer each row index.",
            "name": "rowIndexVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text to display when there is no data to display. Default is \"No records found.\"",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if lazy loading is enabled for the data component.",
            "name": "lazy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Layout approach to use, valid values are \"tabular\" (default) and \"grid\" for responsive grid.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Keeps state of its children on a per-row basis. Default is false.",
            "name": "rowStatePreserved",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to keep DataGrid state across views, defaults to false.",
            "name": "multiViewState",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dataList",
        "description": "DataList presents a collection of data in list layout with several display types. Ajax Pagination is a built-in feature and paginator UI is fully customizable via various options like paginatorTemplate, rowsPerPageOptions, pageLinks and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of the list, valid values are \"unordered\", \"ordered\" and \"definition\". Default is unordered.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the list item type.",
            "name": "itemType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables pagination. Default is false.",
            "name": "paginator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the paginator.",
            "name": "paginatorTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the rowsPerPage dropdown.",
            "name": "rowsPerPageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for rowsPerPage dropdown.",
            "name": "rowsPerPageLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the currentPageReport UI.",
            "name": "currentPageReportTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of page links to display. Default is 10.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the paginator. Default is both.",
            "name": "paginatorPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if paginator should be hidden if total data count is less than number of rows per page.",
            "name": "paginatorAlwaysVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of iterator to refer each row index.",
            "name": "rowIndexVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the exported request scoped variable for the status of the iteration.",
            "name": "varStatus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if lazy loading is enabled for the data component.",
            "name": "lazy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Text to display when there is no data to display. Default is \"No records found.\"",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of an item in list. This option is useful to assign specific styles to certain items using an EL expression.",
            "name": "itemStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Keeps state of its children on a per-row basis. Default is false.",
            "name": "rowStatePreserved",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to keep list state across views, defaults to false.",
            "name": "multiViewState",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dataScroller",
        "description": "DataScroller displays a collection of data featuring on demand loading using scroll.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of items to fetch.",
            "name": "chunkSize",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of iterator to refer each row index.",
            "name": "rowIndexVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the target to listen for scroll event, valid values are \"document\" (default) and \"inline\".",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines pixel height of the viewport in inline mode.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if lazy loading is enabled for the data component.",
            "name": "lazy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Percentage height of the buffer between the bottom of the page and the scroll position to initiate the load for the new chunk. Value is defined in integer and default is 10 meaning load would happen after 90% of the viewport is scrolled down.",
            "name": "buffer",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Loads data on demand as the scrollbar gets close to the bottom. Default is false.",
            "name": "virtualScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "if the scrollAtBottom is enabled, scroll position is at bottom and data loading starts from the bottom. Default value is false.",
            "name": "startAtBottom",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dataTable",
        "description": "DataTable is an enhanced version of the standard Datatable that provides built-in solutions to many commons use cases like paging, sorting, selection, lazy loading, filtering and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables pagination. Default is false.",
            "name": "paginator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the paginator.",
            "name": "paginatorTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the rowsPerPage dropdown.",
            "name": "rowsPerPageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for rowsPerPage dropdown.",
            "name": "rowsPerPageLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the currentPageReport UI.",
            "name": "currentPageReportTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of page links to display. Default is 10.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the paginator. Default is both.",
            "name": "paginatorPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.",
            "name": "paginatorAlwaysVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Makes data scrollable with fixed header. Default is false.",
            "name": "scrollable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Height for scrollable data.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width for scrollable data.",
            "name": "scrollWidth",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables data selection, valid values are \"single\" and \"multiple\".",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Reference to the selection data.",
            "name": "selection",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of iterator to refer each row index.",
            "name": "rowIndexVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text to display when there is no data to display. Default is \"No records found.\"",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables live scrolling. Default is false.",
            "name": "liveScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class for each row.",
            "name": "rowStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before row expansion.",
            "name": "onExpandStart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decides whether datatable columns are resizable or not.",
            "name": "resizableColumns",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Property to be used for default sorting.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Sets sorting order. Default is \"ascending\"",
            "name": "sortOrder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable sortFunction for default sorting.",
            "name": "sortFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "\n                \n            ",
            "name": "scrollRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Unique identifier of row data.",
            "name": "rowKey",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Client side event to invoke datatable filtering for input fields. Default is keyup.",
            "name": "filterEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay to wait in milliseconds before sending each filter query. Default is 300.",
            "name": "filterDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the table element.",
            "name": "tableStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the table element.",
            "name": "tableStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decides whether datatable columns can be reordered using dragdrop.",
            "name": "draggableColumns",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls incell editing.",
            "name": "editable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if lazy loading is enabled for the data component.",
            "name": "lazy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "List to keep the filtered data if filtering is enabled.",
            "name": "filteredValue",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "Defines sorting mode, valid values are \"single\" (default) and \"multiple\".",
            "name": "sortMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines edit mode, valid values are \"row\" (default) and \"cell\".",
            "name": "editMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if cell editors of row should be displayed as editable or not. Default is false meaning display mode.",
            "name": "editingRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Separator text to use in output mode of editable cells with multiple components.",
            "name": "cellSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Summary attribute for WCAG.",
            "name": "summary",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to freeze starting from the beginning.",
            "name": "frozenRows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Columns are resized live in this mode without using a resize helper.",
            "name": "liveResize",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sticky header stays in window viewport during scrolling.",
            "name": "stickyHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if row should be rendered as expanded by default.",
            "name": "expandedRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables row selection when true.",
            "name": "disabledSelection",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines row select mode for checkbox based selection, valid values are new (default), add and checkbox.",
            "name": "rowSelectMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines row expand mode, valid values are \"single\" and \"multiple\" (default).",
            "name": "rowExpandMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Locale to be used in features such as filtering and sorting, defaults to view locale.",
            "name": "dataLocale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "In native mode, datatable uses native radio-checkbox elements for row selection instead of extended ones.",
            "name": "nativeElements",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Number of columns to freeze, default is 0.",
            "name": "frozenColumns",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When enabled, rows can be reordered using dragdrop.",
            "name": "draggableRows",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Case sensitivity for sorting, insensitive by default.",
            "name": "caseSensitiveSort",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.",
            "name": "skipChildren",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables text selection on row click. Default is true.",
            "name": "disabledTextSelection",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the field to pass lazy load method for sorting. If not specified, sortBy expression is used to extract the name.",
            "name": "sortField",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines when the datatable is initiated at client side, valid values are \"load\" (default) and \"immediate\".",
            "name": "initMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines where the null values are placed in ascending sort order. Default value is \"1\" meaning null values are placed at the end in ascending mode and at beginning in descending mode. Set to \"-1\" for the opposite behavior.",
            "name": "nullSortOrder",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Reflow mode is a responsive mode to display columns as stacked depending on screen size.",
            "name": "reflow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Percentage height of the buffer between the bottom of the page and the scroll position to initiate the load for the new chunk. Value is defined in integer and default is 0.",
            "name": "liveScrollBuffer",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Adds hover effect to rows, default is false. Hover is always on when selection is enabled.",
            "name": "rowHover",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Keeps state of its children on a per-row basis. Default is false.",
            "name": "rowStatePreserved",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the resize behavior, valid values are \"fit\" (default) and expand.",
            "name": "resizeMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to read by screen readers on checkbox and radio selection.",
            "name": "ariaRowLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Saves the changes in cell editing on blur, when set to false changes are discarded.",
            "name": "saveOnCellBlur",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Caches the next page asynchronously, default is false.",
            "name": "clientCache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to keep table state across views, defaults to false.",
            "name": "multiViewState",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Map of filters; This also allows to filter the table by default.",
            "name": "filterBy",
            "required": false,
            "type": "java.util.Map"
          },
          {
            "description": "Value of the global filter to use when filtering by default.",
            "name": "globalFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the cell edit behavior, valid values are \"eager\" (default) and \"lazy\".",
            "name": "cellEditMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes row groups toggleable, default is false.",
            "name": "expandableRowGroups",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Loads data on demand as the scrollbar gets close to the bottom. Default is false.",
            "name": "virtualScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the element used to reorder rows using dragdrop. Default selector is \"td,span:not(.ui-c)\"",
            "name": "rowDragSelector",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method expression to execute after dragging row.",
            "name": "draggableRowsFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Client side callback to execute after clicking row.",
            "name": "onRowClick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines a client side event to open cell on editable table.",
            "name": "editInitEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side check if rowclick triggered row click event not a clickable element in row content.",
            "name": "rowSelector",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decides whether to disable context menu or not if a table has no records.",
            "name": "disableContextMenuIfEmpty",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if headerText and footerText values on columns are escaped or not. Default is true.",
            "name": "escapeText",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the row edit behavior, valid values are \"eager\" (default) and \"lazy\".",
            "name": "rowEditMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to position on the page according to other fixing elements on the top of the table. Default is null.",
            "name": "stickyTopAt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom implementation to globally filter a value against a constraint.",
            "name": "globalFilterFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          }
        ]
      },
      {
        "name": "dataView",
        "description": "DataView displays data in grid or list layout.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if lazy loading is enabled for the data component.",
            "name": "lazy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Enables pagination.",
            "name": "paginator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the paginator.",
            "name": "paginatorTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the rowsPerPage dropdown.",
            "name": "rowsPerPageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for rowsPerPage dropdown.",
            "name": "rowsPerPageLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the currentPageReport UI.",
            "name": "currentPageReportTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of page links to display. Default is 10.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the paginator. Default is both.",
            "name": "paginatorPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.",
            "name": "paginatorAlwaysVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Layout of the items, valid values are \"list\" and \"grid\".",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "gridIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "listIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to keep DataView state across views, defaults to false.",
            "name": "multiViewState",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dataViewGridItem",
        "description": "dataViewGridItem is a helper component for DataView to add grid items.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Number of columns of grid. Default is 3.",
            "name": "columns",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "dataViewListItem",
        "description": "dataViewListItem is a helper component for DataView to add list items.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "name": "defaultCommand",
        "description": "DefaultCommand defines the default command component to invoke when enter key is pressed in a form.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of the default command component.",
            "name": "target",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of the grouping component to enable multiple default commands in a form.",
            "name": "scope",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "diagram",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "dialog",
        "description": "Dialog is a panel component overlaying other elements. Dialog avoids popup blockers, provides customization, resizing, modality, ajax interactions and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of the header.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies draggability. Default is true.",
            "name": "draggable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies resizability. Default is true.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value that specifies whether the document should be shielded with a partially transparent mask to require the user to close the Panel before being able to activate any elements in the document. Default is false.",
            "name": "modal",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to block scrolling of the document when dialog is modal.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets dialogs visibility. Default is false.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Width of the dialog in pixels. Default is auto.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the dialog.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Minimum width of a resizable dialog. Default is unl.",
            "name": "minWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum height of a resizable dialog. Default is height of titlebar.",
            "name": "minHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the dialog container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the dialog container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to use when showing the dialog.",
            "name": "showEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to use when hiding the dialog.",
            "name": "hideEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the dialog relative to the target. Default is \"center\".",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines where the dialog should be displayed. Default is \"center\".",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if close icon should be displayed or not.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when dialog is displayed.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dialog is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the dialog to the given search expression.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies visibility of header content.",
            "name": "showHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Text of the footer.",
            "name": "footer",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dynamic mode allows dialog to fetch it's contents before it's shown rather than on page load which is useful to reduce initial page load times. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if dialog is minimizable or not. Default false.",
            "name": "minimizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if dialog is maximizable or not. Default false.",
            "name": "maximizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if dialog should close when escape key is pressed. Default is false.",
            "name": "closeOnEscape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines which component to focus.",
            "name": "focus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dialog size might exceeed viewport if content is bigger than viewport in terms of height. fitViewport option automatically adjusts height to fit dialog within the viewport.",
            "name": "fitViewport",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines whether dialog will be kept in viewport on scroll (fixed) or keep its position (absolute). Default is fixed.",
            "name": "positionType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In responsive mode, dialog adjusts itself based on screen width.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "dock",
        "description": "Dock component mimics the well known dock interface of Mac OS X.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Position of the dock, bottom or top. Default is bottom.",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Initial width of items. Default is 40.",
            "name": "itemWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum width of items. Default is 50.",
            "name": "maxWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Distance to enlarge. Default is 90.",
            "name": "proximity",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Horizontal alignment. Default is center.",
            "name": "halign",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to block scrolling of the document. Default is true.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "draggable",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays proxy element instead of actual element. Default is false.",
            "name": "proxy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "dragOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Id of the component to add draggable behavior.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables dragging.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies drag axis, valid values are 'x' and 'y'.",
            "name": "axis",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Constraints dragging within the boundaries of containment element.",
            "name": "containment",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Helper element to display when dragging.",
            "name": "helper",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Reverts draggable to it's original position when not dropped onto a valid droppable. Default is false.",
            "name": "revert",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Draggable will snap to edge of near elements. Default is false.",
            "name": "snap",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies the snap mode. Valid values are 'both', 'inner' and 'outer'.",
            "name": "snapMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Distance from the snap element in pixels to trigger snap. Default is 20.",
            "name": "snapTolerance",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "ZIndex to apply during dragging. Default is -1.",
            "name": "zindex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies a handle for dragging.",
            "name": "handle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the opacity of the helper during dragging. Default is 1.0",
            "name": "opacity",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "In stack mode, draggable overlap is controlled automatically using the provided selector, dragged item always overlays other draggables.",
            "name": "stack",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dragging happens in every x and y pixels.",
            "name": "grid",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Scope key to match draggables and droppables.",
            "name": "scope",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "CSS cursor to display in dragging. Default is crosshair.",
            "name": "cursor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the dashboard to connect with.",
            "name": "dashboard",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A search expression to define which element to append the draggable helper to.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragging starts.",
            "name": "onStart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when dragging stops.",
            "name": "onStop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute while dragging.",
            "name": "onDrag",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Prevents dragging from starting on specified elements.",
            "name": "cancel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "droppable",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the component to add droppable behavior.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables of enables droppable behavior.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class to apply when an acceptable draggable is dragged over.",
            "name": "hoverStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply when an acceptable draggable is being dragged.",
            "name": "activeStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a draggable is dropped.",
            "name": "onDrop",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to define the accepted draggables.",
            "name": "accept",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Scope key to match draggables and droppables.",
            "name": "scope",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the intersection mode to accept a draggable.",
            "name": "tolerance",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of a UIData component to connect with.",
            "name": "datasource",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Avoids parent droppable elements receiving the drop event. Default value is false",
            "name": "greedy",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "editor",
        "description": "Editor is an input component with rich text editing capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "List of controls to customize toolbar.",
            "name": "controls",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the editor. Default is min integer value.",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Width of the editor. Default is min integer value.",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Disables editor.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the editor container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the editor container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when editor data changes.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum length for input.",
            "name": "maxlength",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "effect",
        "description": "Effect component is based on the jQuery UI effects library.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dom event to attach the event that executes the animation. Required.",
            "name": "event",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the name of the animation. Required.",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Component that is animated.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the animation in ms. Default is 1000.",
            "name": "speed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Startup delay on firing animation.",
            "name": "delay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies if effects should be queued. Default is true.",
            "name": "queue",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "feedReader",
        "description": "feedReader displays content from a feed.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "URL of the feed.",
            "name": "value",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Iterator to refer each item in feed.",
            "name": "var",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Number of items to display.",
            "name": "size",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "fieldset",
        "description": "Fieldset is a grouping component with a title and content.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title text.",
            "name": "legend",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the fieldset.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the fieldset.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes content toggleable with animation. Default is false.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets toogle animation speed in milliseconds. Default is 500.",
            "name": "toggleSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines initial visibility state of content. Default is false.",
            "name": "collapsed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether value would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "fileUpload",
        "description": "FileUpload goes beyond the browser input type=\"file\" functionality and features a flash-javascript solution for uploading files. File filtering, multiple uploads, partial page rendering and progress tracking are the significant features compared to legacy fileUploads.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to be updated after fileupload completes.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to be processed during fileupload request.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method expression to listen file upload events.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Allows choosing of multi file uploads from native file browse dialog, turned off by default.",
            "name": "multiple",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, selecting a file starts the upload process implicitly. Default is false.",
            "name": "auto",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label of the browse button, default is 'Choose'.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Regular expression for accepted file types, e.g. /(\\.|\\/)(gif|jpe?g|png)$/",
            "name": "allowTypes",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of files to be uploaded.",
            "name": "fileLimit",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Individual file size limit in bytes. Default is unlimited.",
            "name": "sizeLimit",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "Mode of the uploader, valid values are \"simple\" and \"advanced\".",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the upload button, default is 'Upload'.",
            "name": "uploadLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the cancel button, default is 'Cancel'.",
            "name": "cancelLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when file size validation fails.",
            "name": "invalidSizeMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when file limit validation fails.",
            "name": "invalidFileMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when file count validation fails.",
            "name": "fileLimitMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies dragdrop based file selection from filesystem, default is true and works only on supported browsers.",
            "name": "dragDropSupport",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Callback to execute at the beginning of fileupload.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to execute after fileupload request completes.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to execute after fileupload request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to execute after fileupload request is cancelled.",
            "name": "oncancel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables fileupload user interface interaction.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message template to use when displaying file validation errors. Default is \"{name} {size}\".",
            "name": "messageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width for image previews in pixels. Default value is 80.",
            "name": "previewWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Applies theming to simple uploader, default is false.",
            "name": "skinSimple",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "To filter files in native file browser dialog.",
            "name": "accept",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Uploads are concurrent by default set this option to true for sequential uploads.",
            "name": "sequential",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "chooseIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "uploadIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "cancelIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to execute before adding a file.",
            "name": "onAdd",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether content type validation should be performed, based on the types defined in the accept attribute. Default is false.",
            "name": "validateContentType",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether virus scan should be performed. Default is false.",
            "name": "performVirusScan",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "focus",
        "description": "Focus is a handy component that makes it easy to manage the element focus on a JSF page.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Specifies the exact component to set focus.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The root component to start first input search.",
            "name": "context",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Minimum severity level to be used when finding the first invalid component.",
            "name": "minSeverity",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "fragment",
        "description": "Fragment component is used to define automatically partially processed and updated sections.",
        "attribute": []
      },
      {
        "name": "galleria",
        "description": "Galleria is used to display a set of images.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Collection of images.",
            "name": "value",
            "required": true,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator to display a collection of images.",
            "name": "var",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of animation to use on transitions. Default is fade.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Duration of animation in milliseconds. Default is 500.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Width of the filmstrip frames.",
            "name": "frameWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Height of the filmstrip frames.",
            "name": "frameHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines visibility of filmstrip.",
            "name": "showFilmstrip",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Images are displayed with a slideshow in autoPlay mode, default is true.",
            "name": "autoPlay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Time in milliseconds between each slide in autoPlay mode.",
            "name": "transitionInterval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Width of the content panel.",
            "name": "panelWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Height of the content panel.",
            "name": "panelHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Displays information retrieved from title and alt attributes of images in content caption.",
            "name": "showCaption",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "gmap",
        "description": "GMap component is built on Google Maps API Version 3. Gmap is highly integrated with JSF development model and enhanced with Ajax capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An org.primefaces.model.MapModel instance.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.map.MapModel"
          },
          {
            "description": "Inline style of the map container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the map container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of the map. Required.",
            "name": "type",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Center point of the map. Required.",
            "name": "center",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the initial zoom level. Default is 8.",
            "name": "zoom",
            "required": true,
            "type": "java.lang.Integer"
          },
          {
            "description": "Controls street view support. Default is false.",
            "name": "streetView",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables default UI controls. Default is false.",
            "name": "disableDefaultUI",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines visibility of navigation control. Default is true.",
            "name": "navigationControl",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines visibility of map type control. Default is true.",
            "name": "mapTypeControl",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines draggability of map. Default is true.",
            "name": "draggable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables zooming on mouse double click. Default is false.",
            "name": "disableDoubleClickZoom",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript callback to execute when a point on map is clicked.",
            "name": "onPointClick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines setting center and zoom values auto by included overlays on startup. Default value is false",
            "name": "fitBounds",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls scrollwheel zooming on the map. Default is true.",
            "name": "scrollWheel",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "gmapInfoWindow",
        "description": "GMapInfoWindow is used with GMap component to open a window on map when an overlay is selected.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Maximum width of the info window. Default is min integer value.",
            "name": "maxWidth",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "graphicImage",
        "description": "PrimeFaces GraphicImage extends standard JSF graphic image component with the ability of displaying binary data like an inputstream. Main use cases of GraphicImage is to make displaying images stored in database or on-the-fly images easier. Legacy way to do this is to come up with a Servlet that does the streaming, GraphicImage does all the hard work without the need of a Servlet.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Binary data to stream or context relative path.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Alternate text for the image.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alias to value attribute.",
            "name": "url",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the image.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the image.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title of the image.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction of the text displayed.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Language code.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies to use a server-side image map.",
            "name": "ismap",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the client side map.",
            "name": "usemap",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the image.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the image.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onclick dom event handler.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "ondblclick dom event handler.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeydown dom event handler.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeypress dom event handler.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onkeyup dom event handler.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmousedown dom event handler.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmousemove dom event handler.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseout dom event handler.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseover dom event handler.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "onmouseup dom event handler.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser caching mode of the resource. Default is true",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the image",
            "name": "name",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Library name of the image",
            "name": "library",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the image is streamed or rendered directly as data uri / base64 with ViewScoped support.",
            "name": "stream",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "growl",
        "description": "Growl is based on the Mac's growl notification widget and used to display FacesMessages similar to h:messages.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies if the message should stay instead of hidden automatically. Default is false.",
            "name": "sticky",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if the summary of message should be displayed. Default is true.",
            "name": "showSummary",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if the detail of message should be displayed. Default is false.",
            "name": "showDetail",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When true, only facesmessages without client-ids are displayed. Default is false.",
            "name": "globalOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Duration in milliseconds to display non-sticky messages. Default is 800.",
            "name": "life",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines if already rendered messages should be displayed. Default is true.",
            "name": "redisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the component whose messages to display only, takes precendence when used with globalOnly.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether html would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Comma seperated list of severities to display only.",
            "name": "severity",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if previous messages should be kept on a new message is shown. Default is false.",
            "name": "keepAlive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if rendering of the detail text should be skipped, if the detail and summaray are equals. Default is false.",
            "name": "skipDetailIfEqualsSummary",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "headerRow",
        "description": "HeaderRow is a helper component for row grouping.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "name": "hotkey",
        "description": "HotKey is a generic key binding component that can bind any formation of keys to javascript event handlers or ajax calls.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "An actionlistener that'd be processed in the partial request caused by uiajax.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression that'd be processed in the partial request caused by uiajax.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId, when true actions are processed at apply_request_values, when false at invoke_application phase.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The Key binding. Required.",
            "name": "bind",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Client side id of the component(s) to be updated after async partial submit request.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component id(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript event handler to be executed when the key binding is pressed.",
            "name": "handler",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default is true.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When set to true, ajax requests are not queued. Default is false.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "idleMonitor",
        "description": "IdleMonitor watches user actions on a page and notify several callbacks in case they go idle or active again.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Time to wait in milliseconds until deciding if the user is idle. Default is 5 minutes.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute when user goes idle.",
            "name": "onidle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when user is active again.",
            "name": "onactive",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When set to true, the lastAccessed state will be shared between all browser windows for the same servlet context.",
            "name": "multiWindowSupport",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "imageCompare",
        "description": "ImageCompare provides a rich user interface to compare two images.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Source of the image placed on the left side.",
            "name": "leftImage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Source of the image placed on the right side",
            "name": "rightImage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the images.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the images.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the image container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the image container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "imageCropper",
        "description": "ImageCropper allows cropping a certain region of an image. A new image is created containing the cropped area and assigned to a CroppedImage instanced on the server side.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Context relative path to the image.",
            "name": "image",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate text of the image.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Aspect ratio of the cropper area.",
            "name": "aspectRatio",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Minimum size of the cropper area.",
            "name": "minSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum size of the cropper area.",
            "name": "maxSize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Initial coordinates of the cropper area.",
            "name": "initialCoords",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum box width of the cropping area.",
            "name": "boxWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum box height of the cropping area.",
            "name": "boxHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum number of bytes the image may consist of. Default is 10MB.",
            "name": "sizeLimit",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "Re-render the cropper when resizing the window. Default is true.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Show the dashed lines in the crop box. Default is true.",
            "name": "guides",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Define the view mode of the cropper. If you set viewMode to 0, the crop box can extend outside the canvas, while a value of 1, 2 or 3 will restrict the crop box to the size of the canvas. A viewMode of 2 or 3 will additionally restrict the canvas to the container. Note that if the proportions of the canvas and the container are the same, there is no difference between 2 and 3. Default is 1.",
            "name": "viewMode",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "imageSwitch",
        "description": "Imageswitch component is used to enable switching between a set of images with nice effects. ImageSwitch also provides a simple client side api for flexibility.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the effect for transition. Required.",
            "name": "effect",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the effect in milliseconds. Default is 500.",
            "name": "speed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Slideshow speed in milliseconds. Default is 3000.",
            "name": "slideshowSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Starts slideshow automatically on page load. Default is true.",
            "name": "slideshowAuto",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Index of the first image, default is 0.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "inplace",
        "description": "Inplace provides easy inplace editing and inline content display. Inplace consists of two members, display element is the inital clickable label and inline element is the hidden content that'll be displayed when display element is toggled.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to be shown in display mode.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to be shown in display mode when value isempty.",
            "name": "emptyLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to be used when toggling. Default fade.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the effect. Default normal.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Prevents hidden content to be shown.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays \"Save\" and \"Cancel\" buttons when content is displayed. Default is \"false\".",
            "name": "editor",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Tooltip text of save button in editor mode. Default is \"Save\"",
            "name": "saveLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Tooltip text of cancel button in editor mode. Default is \"Cancel\"",
            "name": "cancelLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side event to display inline content. Default is click.",
            "name": "event",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "inputMask",
        "description": "InputMask forces an input to fit in a defined mask template.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Mask template.",
            "name": "mask",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "PlaceHolder in mask template.",
            "name": "slotChar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Clears the field on blur when incomplete input is entered.",
            "name": "autoClear",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Input field type. Default is text.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether mask pattern would be validated or not on the server side.",
            "name": "validateMask",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "inputNumber",
        "description": "InputNumber is an extension to the inputText with optimized handling for numbers.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Input field type. Valid values are \"text\"(default), \"tel\" and \"hidden\".",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decimal separator char. Default is taken from the view's locale.",
            "name": "decimalSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Thousand separator char. Default is taken from the view's locale.",
            "name": "thousandSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Desired symbol or unit. Default is none.",
            "name": "symbol",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Symbol suffix. Default is prefix.",
            "name": "symbolPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Minimum value. Warning: If minValue is greater than 0, then you will effectively prevent your users to entirely delete the content of their input.",
            "name": "minValue",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum values. Default is 999999999.99.",
            "name": "maxValue",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls the rounding method. Default is Round-Half-Up Symmetric.",
            "name": "roundMethod",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of decimal places. Default is 2.",
            "name": "decimalPlaces",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls empty input display behavior, options are empty, zero, sign. Default is empty.",
            "name": "emptyValue",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the input element.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls padding of the decimal places. If true, always pads the decimal with zeros.",
            "name": "padControl",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls leading zero behavior. Valid values are \"allow\"(default), \"deny\" and \"keep\".",
            "name": "leadingZero",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.",
            "name": "decimalSeparatorAlternative",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "inputSwitch",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom label for on state.",
            "name": "onLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom label for off state.",
            "name": "offLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "User presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables the switch.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute on value change event.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls the visibility of the labels, defaults to true.",
            "name": "showLabels",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when component receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "inputText",
        "description": "InputText is an extension to standard inputText with skinning capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Input field type. Default is text.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the label component to display remaining and entered characters.",
            "name": "counter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template text to display in counter, default value is \"{0}\".",
            "name": "counterTemplate",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "inputTextarea",
        "description": "InputTextarea is an extension to standard inputTextara with skinning capabilities and auto growing.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the visible width of input element.",
            "name": "cols",
            "required": false,
            "type": "int"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Specifies the visible height of input element.",
            "name": "rows",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the input element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Allows to expand height automatically when text input overflows.",
            "name": "autoResize",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets maximum character number of text area container. Default is 0, means no limit.",
            "name": "maxlength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Id of the label component to display remaining characters.",
            "name": "counter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template text to display in counter, default value is \"{0}\".",
            "name": "counterTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method providing suggestions.",
            "name": "completeMethod",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Number of characters of a word to be typed before starting to query. Default is 3.",
            "name": "minQueryLength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Delay to wait in milliseconds before sending each query to the server. Default is 700",
            "name": "queryDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines the height of the viewport for autocomplete suggestions.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Adds a new line at start as a workaround to SGML specification B.3.1.",
            "name": "addLine",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "keyboard",
        "description": "Keyboard is an input component that uses a virtual keyboard to provide the input. Notable features are the customizable layouts and skinning capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes the input a password field. Default is false.",
            "name": "password",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies the showMode, 'focus', 'button', 'both'",
            "name": "showMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Image for the button.",
            "name": "buttonImage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When set to true only image of the button would be displayed. Default is false.",
            "name": "buttonImageOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Effect of the display animation. Default is fadeIn",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Length of the display animation.",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Built-in layout of the keyboard. Default is qwerty.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the custom layout.",
            "name": "layoutTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies displaying a keypad instead of a keyboard. Default is false.",
            "name": "keypadOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label of the prompt text.",
            "name": "promptLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the close key.",
            "name": "closeLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the clear key.",
            "name": "clearLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of the backspace key.",
            "name": "backspaceLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "keyFilter",
        "description": "KeyFilter filters keyboard input for a given input field.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The target input.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the regular expression which should be used for filtering the input.",
            "name": "regEx",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the regular expression which should be used to test the complete input text content.",
            "name": "inputRegEx",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the predefined mask which should be used (pint, int, pnum, num, hex, email, alpha, alphanum).",
            "name": "mask",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines a javascript code or function which should be used for filtering.",
            "name": "testFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify if the component also should prevent paste. Default value is true.",
            "name": "preventPaste",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "knob",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "min valid value of the component.",
            "name": "min",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Max valid value of the component.",
            "name": "max",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Increment/decrement step of the component.",
            "name": "step",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Thickness of the bar.",
            "name": "thickness",
            "required": false,
            "type": "java.lang.Float"
          },
          {
            "description": "Width of the component",
            "name": "width",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Height of the component",
            "name": "height",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Foreground color of the component, you can use an hex value, a css constant or a java.awt.Color object",
            "name": "foregroundColor",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Background color of the component, you can use an hex value, a css constant or a java.awt.Color object",
            "name": "backgroundColor",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Theme of the knob.",
            "name": "colorTheme",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Set false to hide the label, default is true.",
            "name": "showLabel",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Set true to show only a cursor instead of the full bar, default is false.",
            "name": "cursor",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the progress value e.g. \"{value}%\"",
            "name": "labelTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Gauge stroke endings. Valid values are \"butt\" (default) and \"round\".",
            "name": "lineCap",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "layout",
        "description": "Layout component features a highly customizable borderLayout model making it very easy to create complex layouts even if you're not familar with web design.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies whether layout should span all page or not.",
            "name": "fullPage",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style to apply to container element, this is only applicable to element based layouts.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply to container element, this is only applicable to element based layouts.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A server side listener to process a ResizeEvent.",
            "name": "onResize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A server side listener to process a CloseEvent.",
            "name": "onClose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A server side listener to process a ToggleEvent.",
            "name": "onToggle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title label for the resizer element.",
            "name": "resizeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title label for the collapse button of collapsible units. Default is \"Collapse\"",
            "name": "collapseTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title label for the expand button of closable units.",
            "name": "expandTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title label for the close button of closable units. Default is \"Close\".",
            "name": "closeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, layout state is saved in a cookie for the session.",
            "name": "stateful",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "layoutUnit",
        "description": "LayoutUnit represents a region in the border layout model of the Layout component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Position of the unit. Required.",
            "name": "position",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "size",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes the unit resizable. Default is false.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Makes the unit closable. Default is false.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Makes the unit collapsible. Default is false.",
            "name": "collapsible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Text of header.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of footer.",
            "name": "footer",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "minSize",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "maxSize",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Gutter size of layout unit. Default is 6.",
            "name": "gutter",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies default visibility. Default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies toggle status of unit. Default is false.",
            "name": "collapsed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Size of the unit when collapsed. Default is 25.",
            "name": "collapseSize",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Style to apply to container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply to container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect name of the layout transitions.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect speeds of the layout transitions.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "lifecycle",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "lightBox",
        "description": "Lightbox features a powerful overlay that can display images, multimedia content, other JSF components and external urls.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the container element not the overlay element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element not the overlay element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the iframe.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the iframe.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies an iframe to display an external url in overlay. Default is false.",
            "name": "iframe",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Title of the iframe element.",
            "name": "iframeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays lightbox without requiring any user interaction by default. Default is false.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to block scrolling of the document when lightbox is active.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when lightbox is displayed.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when lightbox is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "link",
        "description": "Link is an extension to the standard h:link component with skinning capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component than can be either an EL expression of a literal text.",
            "name": "value",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Used to resolve a navigation case.",
            "name": "outcome",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to include page parameters in target URI. Default is false.",
            "name": "includeViewParams",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the target page which should be scrolled to.",
            "name": "fragment",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the element.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disable appending the on the rendering of this element.",
            "name": "disableClientWindow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Access key that when pressed transfers focus to the link.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Character encoding of the resource designated by this hyperlink.",
            "name": "charset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position and shape of the hot spot on the screen for client use in image maps.",
            "name": "coords",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Language code of the resource designated by the link.",
            "name": "hreflang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Relationship from the current document to the anchor specified by the link, values are provided by a space-separated list of link types.",
            "name": "rel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A reverse link from the anchor specified by this link to the current document, values are provided by a space-separated list of link types.",
            "name": "rev",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shape of hot spot on the screen, valid values are default, rect, circle and poly.",
            "name": "shape",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of a frame where the resource targeted by this link will be displayed.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of resource referenced by the link.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style to be applied on the anchor element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass to be applied on the anchor element",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over link.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over link.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over link.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over link.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within link.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from link.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto link.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over link.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Resource to link to.",
            "name": "href",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if label of the component is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "linkButton",
        "description": "Link is an extension to the standard h:link component with skinning as a button.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the component than can be either an EL expression of a literal text.",
            "name": "value",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Used to resolve a navigation case.",
            "name": "outcome",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to include page parameters in target URI. Default is false.",
            "name": "includeViewParams",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the target page which should be scrolled to.",
            "name": "fragment",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the element.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disable appending the on the rendering of this element.",
            "name": "disableClientWindow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Access key that when pressed transfers focus to the link.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Character encoding of the resource designated by this hyperlink.",
            "name": "charset",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position and shape of the hot spot on the screen for client use in image maps.",
            "name": "coords",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Language code of the resource designated by the link.",
            "name": "hreflang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Relationship from the current document to the anchor specified by the link, values are provided by a space-separated list of link types.",
            "name": "rel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A reverse link from the anchor specified by this link to the current document, values are provided by a space-separated list of link types.",
            "name": "rev",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shape of hot spot on the screen, valid values are default, rect, circle and poly.",
            "name": "shape",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of a frame where the resource targeted by this link will be displayed.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of resource referenced by the link.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style to be applied on the anchor element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass to be applied on the anchor element",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when link receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over link.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over link.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over link.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over link.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within link.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from link.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto link.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over link.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Resource to link to.",
            "name": "href",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if label of the component is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Icon of the button.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is left.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "log",
        "description": "Log component is a visual console to display logs of PrimeFaces. Using log client side API, you can also use the component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "media",
        "description": "Media component is used for embedding multimedia content such as videos and music to JSF views. Media renders object or embed html tags depending on the user client.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Media source to play.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Type of the player, possible values are \"quicktime\",\"windows\",\"flash\",\"real\" and \"pdf\".",
            "name": "player",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width of the player.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the player.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the player.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the player.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser caching mode of the resource. Default is true",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets default zoom value for Pdf Reader.",
            "name": "zoom",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets the view of the displayed page on Pdf Reader.",
            "name": "view",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "megaMenu",
        "description": "MegaMenu is a navigation component that displays submenus together.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether submenus will be displayed on mouseover or not. When set to false, click event is required to display.",
            "name": "autoDisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Delay in milliseconds before displaying the submenu. Default is 0 meaning immediate.",
            "name": "delay",
            "required": false,
            "type": "int"
          },
          {
            "description": "Index of the active root menu to display as highlighted. By default no root is highlighted.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines the orientation of the root menuitems, valid values are \"horizontal\" (default) and \"vertical\".",
            "name": "orientation",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "menu",
        "description": "Menu is a navigation component with various customized modes like multi tiers, ipod style sliding and overlays.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A menu model instance to create menu programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Id of component whose click event will show the dynamic positioned menu.",
            "name": "trigger",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of menu to align with trigger element.",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of trigger to align with menu element.",
            "name": "at",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. Default is false, meaning static positioning.",
            "name": "overlay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event name of component that will show the dynamic positioned menu. Default is click.",
            "name": "triggerEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines whether clicking the header of a submenu toggles the visibility of children menuitems.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Applied only when overlay is set to true. When the overlay menu overflows the window in some direction, move it to an alternative position. Supported values are flip, fit, flipfit and none. See https://api.jqueryui.com/position/ for more details. Defaults to flip. When you the body of your layout does not scroll, you may also want to set the option maxHeight.",
            "name": "collision",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The maximum height of the menu. May be either a number (such as 200), which is interpreted as a height in pixels. Alternatively, may also be a CSS length such as 90vh or 10em. Often used when overlay is set to true, but also works when it is set to false. Useful in case the body of your layout does not scroll, especially in combination with the collision property.",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "menubar",
        "description": "Menubar is a horizontal navigation component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Inline style of menubar.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of menubar.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether the first level of submenus will be displayed on mouseover or not. When set to false, click event is required to display.",
            "name": "autoDisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the element in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Event to toggle the submenus, default is hover. Valid values are \"hover\" and \"click\".",
            "name": "toggleEvent",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "menuButton",
        "description": "MenuButton displays different commands in a popup menu.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Label of the button.",
            "name": "value",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables the button.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Icon of the menu button.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is left.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the overlay to the element defined by search expression. Defaults to document body.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the overlay menu element.",
            "name": "menuStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "For the overlay menu that shows up when the menu button is clicked. When the overlay menu overflows the window in some direction, move it to an alternative position. Supported values are flip, fit, flipfit and none. See https://api.jqueryui.com/position/ for more details. Defaults to flip. When you the body of your layout does not scroll, you may also want to set the option maxHeight.",
            "name": "collision",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The maximum height of the overlay menu that shows up when the menu button is clicked. May be either a number (such as 200), which is interpreted as a height in pixels. Alternatively, may also be a CSS length such as 90vh or 10em. Useful in case the body of your layout does not scroll, especially in combination with the collision property.",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "menuitem",
        "description": "Menuitem is used by various menu components of PrimeFaces.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Url to be navigated when menuitem is clicked.",
            "name": "url",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Target type of url navigation.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the menuitem label.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass of the menuitem label.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript event handler for click event.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side id of the component(s) to be updated after async partial submit request.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component id(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables the menu item.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies submit mode.",
            "name": "ajax",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Path of the menuitem image.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is right.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Title text of the menuitem.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Used to resolve a navigation case.",
            "name": "outcome",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to include page parameters in target URI. Default is false.",
            "name": "includeViewParams",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the target page which should be scrolled to.",
            "name": "fragment",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disable appending the on the rendering of this element.",
            "name": "disableClientWindow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style of the menuitem container.",
            "name": "containerStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass of the menuitem container.",
            "name": "containerStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether value would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the relationship between the current document and the linked document.",
            "name": "rel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "message",
        "description": "Message is a pre-skinned extended version of the standard JSF message component with extensions.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Specifies if the summary of the FacesMessage should be displayed. Default is false.",
            "name": "showSummary",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if the summary of the FacesMessage should be displayed. Default is true.",
            "name": "showDetail",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the component whose messages to display only, takes precendence when used with globalOnly.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if already rendered messages should be displayed. Default is true.",
            "name": "redisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines display mode, valid values are text, icon and both(default).",
            "name": "display",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether html would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Comma separated list of severities to display only.",
            "name": "severity",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if rendering of the detail text should be skipped, if the detail and summaray are equals. Default is false.",
            "name": "skipDetailIfEqualsSummary",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "messages",
        "description": "Messages is a pre-skinned extended version of the standard JSF messages component with extensions.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Specifies if the summary of the FacesMessage should be displayed. Default is true.",
            "name": "showSummary",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies if the detail of the FacesMessage should be displayed. Default is false.",
            "name": "showDetail",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When true, only facesmessages with no clientIds are displayed. Default is false.",
            "name": "globalOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if already rendered messages should be displayed. Default is true.",
            "name": "redisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of the component whose messages to display only, takes precendence when used with globalOnly.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether html would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Comma seperated list of severities to display only.",
            "name": "severity",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Adds a close icon to hide the messages.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if severity icons would be displayed. Default is true.",
            "name": "showIcon",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Type of the \"for\" attribute. Valid values are \"key\" and \"expression\".",
            "name": "forType",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines a list of keys and clientIds, which should NOT be rendered by this component. Seperated by space or comma.",
            "name": "forIgnores",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if rendering of the detail text should be skipped, if the detail and summaray are equals. Default is false.",
            "name": "skipDetailIfEqualsSummary",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "mindmap",
        "description": "MindMap is an interactive mindmapping component.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An org.primefaces.model.MindmapNode instance as the root node.",
            "name": "value",
            "required": false,
            "type": "org.primefaces.model.mindmap.MindmapNode"
          },
          {
            "description": "Inline style of the component",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the animations in ms.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "multiSelectListbox",
        "description": "MultiSelectListbox is used to select an item from a collection of listboxes that are in parent-child relationship.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Effect to use when showing a group of items.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays label of a group at header section of the children items. Defaults to false.",
            "name": "showHeaders",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label of the root group items.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "notificationBar",
        "description": "NotificationBar displayes a multipurpose fixed positioned panel for notification. Any group of JSF content can be placed inside notificationbar.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the bar, \"top\" or \"bottom\". Default is top.",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the effect, \"fade\", \"slide\" or \"none\". Default is fade.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the effect, \"slow\", \"normal\" or \"fast\". Default is normal.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "autoDisplay",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "orderList",
        "description": "OrderList is used to sort a collection.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the iterator.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of an item.",
            "name": "itemLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of an item.",
            "name": "itemValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the animation to display. Default is fade.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move up button. Default is \"Move Up\".",
            "name": "moveUpLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move top button. Default is \"Move Top\".",
            "name": "moveTopLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move down button. Default is \"Move Down\".",
            "name": "moveDownLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move bottom button. Default is \"Move Bottom\".",
            "name": "moveBottomLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Location of the order controls, valid values are \"left\" (default), \"right\" and none.",
            "name": "controlsLocation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In responsive mode, orderList adjusts itself based on screen width.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "organigram",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The model.",
            "name": "value",
            "required": false,
            "type": "org.primefaces.model.OrganigramNode"
          },
          {
            "description": "Name of the request-scoped variable that'll be used to refer each treenode data during rendering.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "OrganigramNode to reference the selections.",
            "name": "selection",
            "required": false,
            "type": "org.primefaces.model.OrganigramNode"
          },
          {
            "description": "Style of the main container element of organigram.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element of organigram.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The height of the connector line for leaf nodes.",
            "name": "leafNodeConnectorHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines if zoom controls are rendered.",
            "name": "zoom",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Auto scroll to the selected node on rendering if enabled.",
            "name": "autoScrollToSelection",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "organigramNode",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Type of the node. Default is \"default\"",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "style to apply to a node type.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply to a node type.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The icon to be displayed",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The icon position. Empty, \"right\" or \"left\".",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The expanded icon.",
            "name": "expandedIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The collapsed icon.",
            "name": "collapsedIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If the leaf handling should be skipped.",
            "name": "skipLeafHandling",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "outputLabel",
        "description": "OutputLabel is an extension to the standard outputLabel.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label to display.",
            "name": "value",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The accesskey attribute is a standard HTML attribute that sets the access key that transfers focus to this element when pressed.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if value should be escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Id of the associated input component.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The lang attribute is a standard HTML attribute that sets the code describing the language to be used in the markup generated by this component..",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over component.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over component.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over component.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over component.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within component.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from component.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto component.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over component.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls the required (*) indicator. Auto = displayed based on the required attribute OR if @NotNull is present. false = never displayed. true = always displayed.",
            "name": "indicateRequired",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          }
        ]
      },
      {
        "name": "outputPanel",
        "description": "OutputPanel is used to group content on a page.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Style of the html container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass of the html container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Deferred mode loads the contents after page load to speed up page load.",
            "name": "deferred",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines deferred loading mode, valid values are \"load\" (after page load) and \"visible\" (once the panel is visible on scroll). Default value is \"load\".",
            "name": "deferredMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shortcut for the css display property, valid values are block (default) and inline.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "overlayPanel",
        "description": "OverlayPanel is a generic container component that is displayed as a popup.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of the target component to show the panel.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to block scrolling of the document when panel is modal.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Event to show the overlay panel, default is \"click\".",
            "name": "showEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event to hide the overlay panel, default is \"click\".",
            "name": "hideEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to display when showing the panel.",
            "name": "showEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to display when hiding the panel.",
            "name": "hideEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the overlayPanel to the given search expression.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when panel is displayed.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when panel is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the panel relative to the target.",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the target relative to the panel.",
            "name": "at",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When the positioned element overflows the window in some direction, move it to an alternative position. Similar to my and at, this accepts a single value or a pair for horizontal/vertical, e.g., \"flip\", \"fit\", \"fit flip\", \"fit none\".",
            "name": "collision",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Dynamic mode allows overlay panel to fetch it's contents before it's shown rather than on page load which is useful to reduce initial page load times. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set true, clicking outside of the panel hides the overlay.",
            "name": "dismissable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays a close icon to hide the overlay, default is false.",
            "name": "showCloseIcon",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Boolean value that specifies whether the document should be shielded with a partially transparent mask to require the user to close the Panel before being able to activate any elements in the document. Default is false.",
            "name": "modal",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Delay time to show overlay panel in milliseconds. Default is 0.",
            "name": "showDelay",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "panel",
        "description": "Panel is a grouping component for other components, notable features are toggling, closing, built-in popup menu and ajax event listeners.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Header text.",
            "name": "header",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Footer text.",
            "name": "footer",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes panel toggleable. Default is false.",
            "name": "toggleable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Speed of toggling in milliseconds. Default is 500",
            "name": "toggleSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Style of the panel.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the panel.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Renders a toggleable panel as collapsed. Default is false.",
            "name": "collapsed",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Make panel closable. Default is false.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Speed of closing effect in milliseconds. Default is 500.",
            "name": "closeSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Renders panel as hidden. Default is true.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Title label for closer element of closable panel.",
            "name": "closeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title attribute for toggler element of toggleable panel.",
            "name": "toggleTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title attribute for menu element on panel header.",
            "name": "menuTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the orientation of the toggle animation, valid values are \"vertical\" and \"horizontal\".",
            "name": "toggleOrientation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if the panel is toggleable by clicking on the whole panel header. Default is false.",
            "name": "toggleableHeader",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "panelGrid",
        "description": "PanelGrid is an extension to the standard PanelGrid.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Number of columns of the table.",
            "name": "columns",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the panel/table.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the panel-content.",
            "name": "contentStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the panel/table.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the panel-content.",
            "name": "contentStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Comma separated list of column style classes.",
            "name": "columnClasses",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays data in a 'table' layout, 'grid' layout or 'flex' layout. The grid and flex layout are responsive layouts. Default value is 'tabular'.",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Role for aria.",
            "name": "role",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "panelMenu",
        "description": "PanelMenu is a hybrid of accordion-tree components used for navigations and actions.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A menu model instance to create menu programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, menu state is saved in a cookie for the session. Default is true.",
            "name": "stateful",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "password",
        "description": "Password component is an extended version of standard inputSecret component with theme integration and strength indicator.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables strength indicator. Default is false.",
            "name": "feedback",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays feedback inline rather than using a popup. Default is false.",
            "name": "inline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Label of prompt. Default is \"Please enter a password\"",
            "name": "promptLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of weak password. Default is \"Weak\"",
            "name": "weakLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of good password. Default is \"Good\"",
            "name": "goodLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of strong password. Default is \"Strong\"",
            "name": "strongLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean flag indicating whether or not a previously entered password should be rendered in form. Default is false.",
            "name": "redisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Identifier of another password component to match value against.",
            "name": "match",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "photoCam",
        "description": ".",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the camera container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the camera container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifiers of components to process during photo capture.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifiers of components to update after photo capture.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method expression to listen capture events.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Width of the camera viewport.",
            "name": "width",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Height of the camera viewport.",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Width of the captured photo, defaults to width.",
            "name": "photoWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Height of the captured photo, defaults to height",
            "name": "photoHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Format of the image, valid values are \"jpeg\" default and png.",
            "name": "format",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Quality of the image between 0 and 100 when the format is jpeg, default value is 90.",
            "name": "jpegQuality",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Enables always using flash fallback even in an HTML5 environment.",
            "name": "forceFlash",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disable camera start after initialize",
            "name": "autoStart",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "pickList",
        "description": "PickList is used for transferring data between two different collections.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the iterator.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of an item.",
            "name": "itemLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of an item.",
            "name": "itemValue",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the animation to display. Default is fade.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the animation. Default is fast.",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if labels of the component are escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Text of add button. Default is \"Add\".",
            "name": "addLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of add all button. Default is \"Add All\".",
            "name": "addAllLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of remove button. Default is \"Remove\".",
            "name": "removeLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of remove all button. Default is \"Remove All\".",
            "name": "removeAllLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move up button. Default is \"Move Up\".",
            "name": "moveUpLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move top button. Default is \"Move Top\".",
            "name": "moveTopLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move down button. Default is \"Move Down\".",
            "name": "moveDownLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of move bottom button. Default is \"Move Down\".",
            "name": "moveBottomLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies visibility of reorder buttons of sourcelist. Default is false.",
            "name": "showSourceControls",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies visibility of reorder buttons of target list. Default is false.",
            "name": "showTargetControls",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when an item is transferred from one list to another.",
            "name": "onTransfer",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies if an item can be picked or not.",
            "name": "itemDisabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays an input filter for source list.",
            "name": "showSourceFilter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays an input filter for target list.",
            "name": "showTargetFilter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When true, a checkbox is displayed next to each item.",
            "name": "showCheckbox",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines how the button labels displayed, valid values are \"tooltip\" (default) and \"inline\".",
            "name": "labelDisplay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays lists horizontally, valid values are \"horizontal\" (default) and \"vertical\".",
            "name": "orientation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In responsive mode, component adjusts itself based on screen width.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side event to invoke picklist filtering for input fields. Default is keyup.",
            "name": "filterEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay to wait in milliseconds before sending each filter query. Default is 300.",
            "name": "filterDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines if values of the component are escaped or not.",
            "name": "escapeValue",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "poll",
        "description": "Poll is an ajax component that has the ability to send periodical ajax requests and execute listeners on JSF backing beans.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Interval in seconds to do periodic ajax requests. Default is 2.",
            "name": "interval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Component(s) to be updated with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A method expression to invoke by polling.",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId, when true actions are processed at apply_request_values, when false at invoke_application phase.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component id(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default is true.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When set to true, ajax requests are not queued. Default is false.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "In autoStart mode, polling starts automatically on page load, to start polling on demand set to false. Default is true.",
            "name": "autoStart",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Stops polling when true.",
            "name": "stop",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Type of interval value. Valid values are \"second\" (default) and \"millisecond\".",
            "name": "intervalType",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "progressBar",
        "description": "ProgressBar is a process status indicator that can either work purely on client side or interact with server side using ajax.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Value of the progress bar. Default is 0.",
            "name": "value",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Disables or enables the progressbar.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies the mode of progressBar, in ajax mode progress value is retrieved from a backing bean. Default is false.",
            "name": "ajax",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Interval in milliseconds to do periodic requests in ajax mode. Default is 3000.",
            "name": "interval",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Animation duration in milliseconds determining how long the animation will run. Default is 500.",
            "name": "animationDuration",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the progress value e.g. \"{value}%\"",
            "name": "labelTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Enables static value display mode.",
            "name": "displayOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines whether to trigger ajaxStatus or not.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the mode of the progress, valid values are \"determinate\" and \"indeterminate\".",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "radioButton",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Index of the selectItem of the selectOneRadio.",
            "name": "itemIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute on state change.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the selectOneRadio component to attach to.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "rating",
        "description": "Rating component features a star based rating system. Rating can be used as a plain input component or with ajax RateListeners.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of stars to display. Default is 5.",
            "name": "stars",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Disables user interaction.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Disables user interaction without adding disabled visuals.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when rate happens.",
            "name": "onRate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, displays a cancel icon to reset rating value, defaults to true.",
            "name": "cancel",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "remoteCommand",
        "description": "RemoteCommand provides a way to execute JSF backing bean methods directly from javascript.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of the command.",
            "name": "name",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to update with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript handler to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, command will be invoked on page load.",
            "name": "autoRun",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "resizable",
        "description": "PrimeFaces features a resizable component that has the ability to make a JSF component resizable. Resizable can be used on various components like resize an input fields, panels, menus, images and more.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of the target component to make resizable.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if aspectRatio should be kept or not. Default is false.",
            "name": "aspectRatio",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays proxy element instead of actual element.",
            "name": "proxy",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies the resize handles.",
            "name": "handles",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "In ghost mode, resize helper is displayed as the original element with less opacity. Default is false.",
            "name": "ghost",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Enables animation. Default is false.",
            "name": "animate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Effect to use in animation. Default is swing.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect duration of animation. Default is normal.",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum width boundary in pixels. Default is max integer value.",
            "name": "maxWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum height boundary in pixels. Default is max integer value.",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minimum width boundary in pixels. Default is min integer value.",
            "name": "minWidth",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Maximum height boundary in pixels. Default is min integer value.",
            "name": "minHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Sets resizable boundaries as the parents size. Default is false.",
            "name": "containment",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Snaps resizing to grid structure. Default is 1.",
            "name": "grid",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute when resizing begins.",
            "name": "onStart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute during resizing.",
            "name": "onResize",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute after resizing end.",
            "name": "onStop",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "ribbon",
        "description": "Ribbon is container component to group different sets of controls.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the active tab. Default is 0.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "ribbonGroup",
        "description": "RibbonGroup is a helper component for Ribbon to define groups in a tab.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the submenu header.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "ring",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "easing",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When true, Ring will automatically advance the moving elements to the next child at a regular interval.Default is false.",
            "name": "autoplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Time in milliseconds between animation triggers when a Ring's autoplay is playing.",
            "name": "autoplayDuration",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "When true, Ring will pause autoPlay when the user mouseover the Ring container. Default is false.",
            "name": "autoplayPauseOnHover",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Time in milliseconds to delay the start of Ring's configured autoplay option.",
            "name": "autoplayInitialDelay",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "row",
        "description": "Row is a helper component for datatable.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Inline style of the row.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the row.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "rowEditor",
        "description": "RowEditor is a helper component for datatable.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title attribute for edit icon.",
            "name": "editTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title attribute for cancel icon.",
            "name": "cancelTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title attribute for save icon.",
            "name": "saveTitle",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "rowExpansion",
        "description": "RowExpansion is a helper component of datatable used to implement expandable rows.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Style class of the rowExpansion.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "rowToggler",
        "description": "RowToggler is a helper component for datatable.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Expand text to display instead of icon to.",
            "name": "expandLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Collapse text to display instead of icon.",
            "name": "collapseLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "schedule",
        "description": "Schedule provides an Outlook Calendar, iCal like JSF component to manage events. Schedule is highly customizable featuring various views (month, day, week), built-in I18N, drag-drop, resize, customizable event dialog and skinning.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An org.primefaces.model.ScheduleModel instance representing the backed model.",
            "name": "value",
            "required": false,
            "type": "org.primefaces.model.ScheduleModel"
          },
          {
            "description": "User locale for i18n localization messages. The attribute can be either a String or java.util.Locale object.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Ratio of calendar width to height, higher the value shorter the height is.",
            "name": "aspectRatio",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "The view type to use, possible values are 'dayGridMonth', 'dayGridWeek', 'dayGridDay', 'timeGridWeek', 'timeGridDay', 'listYear' , 'listMonth', 'listWeek', 'listDay'. Default is 'dayGridMonth'.",
            "name": "view",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The initial date that is used when schedule loads. If ommitted, the schedule starts on the current date.",
            "name": "initialDate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Specifies inclusion Saturday/Sunday columns in any of the views. Default is true.",
            "name": "showWeekends",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style of the main container element of schedule.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element of schedule.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When true, events are draggable. Default is true.",
            "name": "draggable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When true, events are resizable. Default is true.",
            "name": "resizable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies visibility of header content. Default is true.",
            "name": "showHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Content of left side of header. Default is \"prev, next today\"",
            "name": "leftHeaderTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Content of center of header. Default is title.",
            "name": "centerHeaderTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Content of right side of header. Default is \"dayGridMonth,timeGridWeek,timeGridDay\"",
            "name": "rightHeaderTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Determines if all-day slot will be displayed in agendaWeek or agendaDay views. Default is true.",
            "name": "allDaySlot",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The frequency for displaying time slots. Default is 00:30:00.",
            "name": "slotDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Determines how far down the scroll pane is initially scrolled down. Default is 06:00:00.",
            "name": "scrollTime",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Minimum time to display in a day view. Default is 00:00:00.",
            "name": "minTime",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum time to display in a day view. Default is 24:00:00.",
            "name": "maxTime",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "TThe frequency that the time slots should be labelled with text. Example: like \"01:00\" or \"{hours:1}\".",
            "name": "slotLabelInterval",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Determines the time-text that will be displayed on each event. (Moment.js - format)",
            "name": "timeFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Deprecated, use columnHeaderFormat instead. Format for column headers.",
            "name": "columnFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Format for column headers. (eg \"week:'dd DD MMM'\" or \"timeGridWeek: 'DD MM', timeGridDay: 'dd'\")",
            "name": "columnHeaderFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or a java.util.TimeZone instance to specify the timezone used for date conversion to ISO_8601 format, defaults to ZoneId.systemDefault().",
            "name": "timeZone",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Timezone to define how to interpret the dates at browser. Valid values are \"local\", \"UTC\" and ids like \"America/Chicago\", defaults to \"local\".",
            "name": "clientTimeZone",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays description of events on a tooltip, default value is false.",
            "name": "tooltip",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Display week numbers in schedule.",
            "name": "showWeekNumbers",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of javascript function to extend the options of the underlying fullcalendar plugin.",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether or not to display an event's end time text when it is rendered on the calendar. Value can be a boolean to globally configure for all views or a comma separated list such as \"month:false,basicWeek:true\" to configure per view.",
            "name": "displayEventEnd",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The method for calculating week numbers that are displayed. Valid values are \"local\" (default), \"ISO\" and \"custom\".",
            "name": "weekNumberCalculation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom weekNumberCalculation.",
            "name": "weekNumberCalculator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When an event's end time spans into another day, the minimum time it must be in order for it to render as if it were on that day. Default is 09:00:00.",
            "name": "nextDayThreshold",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true contemporary events will be rendered one overlapping the other, else they will be rendered side by side.",
            "name": "slotEventOverlap",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Target for events with urls. Clicking on such events in the schedule will not trigger the selectEvent but open the url using this target instead. Default is \"_blank\".",
            "name": "urlTarget",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether for URL events access to the opener window from the target site should be prevented (phishing protection), default value is true.",
            "name": "noOpener",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "scrollPanel",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "mode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectBooleanButton",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onLabel",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "offLabel",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "offIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectBooleanCheckbox",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to display next to checkbox.",
            "name": "itemLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when checkbox receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when checkbox loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if label of the component is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectCheckboxMenu",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute when overlay is displayed.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when overlay is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Renders an input field as a filter when enabled.",
            "name": "filter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if filtering would be case sensitive. Default is false.",
            "name": "caseSensitive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the overlay to the element defined by search expression. Defaults to document body.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, the header of panel is displayed. Default is true.",
            "name": "showHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, the selected items are displayed on label. Default is false.",
            "name": "updateLabel",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "multiple",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if dynamic loading is enabled for the element's panel. If the value is \"true\", the overlay is not rendered on page load to improve performance. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Separator for joining item lables if updateLabel is set to true. Default is \",\".",
            "name": "labelSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to be shown in updateLabel mode when no item is selected. If not set the label is shown.",
            "name": "emptyLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder text to show when filter input is empty.",
            "name": "filterPlaceholder",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectManyButton",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectManyCheckbox",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the number of columns in grid layout.",
            "name": "columns",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectManyMenu",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the input element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of iterator to be used in custom content display.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When true, a checkbox is displayed next to each item.",
            "name": "showCheckbox",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays an input filter for the list.",
            "name": "filter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if filtering would be case sensitive. Default is false.",
            "name": "caseSensitive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the height of the scrollable area.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "selectOneButton",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "unselectable",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "selectOneListbox",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the input element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of iterator to be used in custom content display.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays an input filter for the list.",
            "name": "filter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if filtering would be case sensitive. Default is false.",
            "name": "caseSensitive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the height of the scrollable area.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "selectOneMenu",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "panelStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the height of the scrollable area.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "editable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays an input filter for the list.",
            "name": "filter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Watermark displayed in the filter input field before the user enters a value in an HTML5 browser.",
            "name": "filterPlaceholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if filtering would be case sensitive. Default is false.",
            "name": "caseSensitive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Appends the overlay to the element defined by search expression. Defaults to document body.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Updates the title of the component with the description of the selected item.",
            "name": "syncTooltip",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Displays label of the element in a custom template. Valid placeholder is {0}.",
            "name": "labelTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Watermark displayed in the input field before the user enters a value in an HTML5 browser.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Calculates a fixed width based on the width of the maximum option label. Set to false for custom width.",
            "name": "autoWidth",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if dynamic loading is enabled for the element's panel. If the value is \"true\", the overlay is not rendered on page load to improve performance. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "selectOneRadio",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "layout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the number of columns in grid layout.",
            "name": "columns",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Plain mode displays radiobuttons using native browser rendering instead of themes.",
            "name": "plain",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Unselectable mode when true clicking a radio again will clear the selection. Default false.",
            "name": "unselectable",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "separator",
        "description": "Seperator displays a horizontal line to separate content.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the separator.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the separator.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "sidebar",
        "description": "Sidebar is a panel component displayed as an overlay.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "StyleClass of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the visibility of the sidebar.",
            "name": "visible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the sidebar. Default is left.",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "fullScreen",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to block scrolling of the document when sidebar is active.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Base zIndex value to use in layering.",
            "name": "baseZIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Appends the sidebar to the given search expression.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when sidebar is displayed.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when sidebar is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "signature",
        "description": "Signature is an input component to provide a signature.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Background color, default is #ffffff.",
            "name": "backgroundColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Foreground color, default is #000000.",
            "name": "color",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Thickness of lines, default is 2.",
            "name": "thickness",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, signature is used for display purposes only.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Adds a guideline when enabled, default is false.",
            "name": "guideline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Color of the guideline, default is #a0a0a0.",
            "name": "guidelineColor",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Offset of guideline from bottom.",
            "name": "guidelineOffset",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Guide line indent from the edges.",
            "name": "guidelineIndent",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Client side callback to execute when signature changes.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Write-only value used to pass the value in base64 to backing bean.",
            "name": "base64Value",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "slideMenu",
        "description": "SlideMenu displays submenus with a slide animation.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A menu model instance to create menu programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Inline style of the main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text for back link, only applies to sliding menus. Default is \"Back\"",
            "name": "backLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of component whose click event will show the dynamic positioned menu.",
            "name": "trigger",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of menu to align with trigger element.",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of trigger to align with menu element.",
            "name": "at",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. Default is false, meaning static positioning.",
            "name": "overlay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Event name of component that will show the dynamic positioned menu. Default is click.",
            "name": "triggerEvent",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "slider",
        "description": "Slider is used to provide input with various customization options like orientation, display modes and skinning.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the input text that the slider will be used for.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the component to display the slider value.",
            "name": "display",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Minimum value of the slider. Default is 0.0.",
            "name": "minValue",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Maximum value of the slider. Default is 100.0.",
            "name": "maxValue",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to enable/disable the animated move when background of slider is clicked. Default is true.",
            "name": "animate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Sets the type of the slider, \"horizontal\" or \"vertical\". Default is horizontal.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Fixed pixel increments that the slider move in. Default is 1.0.",
            "name": "step",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Disables or enables the slider.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when slide begins.",
            "name": "onSlideStart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute during sliding.",
            "name": "onSlide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when slide ends.",
            "name": "onSlideEnd",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, two handles are provided for selecting a range.",
            "name": "range",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "String template to use when updating the display. Valid placeholders are {value}, {min} and {max}.",
            "name": "displayTemplate",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "spacer",
        "description": "Spacer is used to put spaces between elements.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Width of the space.",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the space.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the spacer.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the spacer.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "spinner",
        "description": "Spinner is an input component to provide a numerical input via increment and decrement buttons.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Stepping factor for each increment and decrement. Default is 1.0.",
            "name": "stepFactor",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Minimum boundary value. Default is min double value.",
            "name": "min",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Maximum boundary value. Default is max double value.",
            "name": "max",
            "required": false,
            "type": "java.lang.Double"
          },
          {
            "description": "Rotate to the minimum value when maximum value is reached and vice versa. Default is false.",
            "name": "rotate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Prefix of the input.",
            "name": "prefix",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Suffix of the input.",
            "name": "suffix",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of decimal places.",
            "name": "decimalPlaces",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Decimal separator char. Default is taken from the view's locale.",
            "name": "decimalSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Thousand separator char. Default is taken from the view's locale.",
            "name": "thousandSeparator",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "splitButton",
        "description": "SplitButton displays a default command and additional ones in an overlay.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An actionlistener to process when command is executed.",
            "name": "actionListener",
            "required": false,
            "type": "javax.faces.event.ActionListener"
          },
          {
            "description": "A method expression or a string outcome to process when command is executed.",
            "name": "action",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Boolean value that determines the phaseId of the action event, when true actions are processed at \"Apply Request Values\", when false at \"Invoke Application\" phase.",
            "name": "immediate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the submit mode, when set to true (default), submit would be made with Ajax.",
            "name": "ajax",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When set to true, ajax requests are not queued.",
            "name": "async",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Component(s) to process partially instead of whole view.",
            "name": "process",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component(s) to be updated with ajax.",
            "name": "update",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before ajax request is begins.",
            "name": "onstart",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request is completed.",
            "name": "oncomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request fails.",
            "name": "onerror",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when ajax request succeeds.",
            "name": "onsuccess",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether to trigger ajaxStatus or not.",
            "name": "global",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.",
            "name": "delay",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the timeout for the ajax request.",
            "name": "timeout",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Access key that when pressed transfers focus to the button.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the button.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the button.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the button element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip informaton.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets the behavior of the button. Default is submit.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this component will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the button element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the button element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when button receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over button.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over button.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over button.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is pressed down over button.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved within button.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved away from button.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is moved onto button.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer button is released over button.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within button is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon of the button.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the icon, default value is left.",
            "name": "iconPos",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Displays button inline instead of fitting the content width, only used by mobile.",
            "name": "inline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.",
            "name": "partialSubmit",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.",
            "name": "resetValues",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, components which autoUpdate=\"true\" will not be updated for this request. If not specified, or the value is false, no such indication is made.",
            "name": "ignoreAutoUpdate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Appends the overlay to the element defined by search expression. Defaults to document body.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to use when partial submit is on, default is \":input\" to select all descendant inputs of a partially processed components.",
            "name": "partialSubmitFilter",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the overlay menu element.",
            "name": "menuStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Form to serialize for an ajax request. Default is the enclosing form.",
            "name": "form",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A menu model instance to create the items of splitButton programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Displays an input filter for the list. Default is false.",
            "name": "filter",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side function to use in custom filterMatchMode.",
            "name": "filterFunction",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Watermark displayed in the filter input field before the user enters a value in an HTML5 browser.",
            "name": "filterPlaceholder",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "spotlight",
        "description": "Spotlight highlights a certain component on page.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Component to highlight.",
            "name": "target",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When true, spotlight is activated initially.",
            "name": "active",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to block scrolling of the document when spotlight is active.",
            "name": "blockScroll",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "stack",
        "description": "Stack is a navigation component that mimics the stacks feature in Mac OS X.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "An optional image to contain stacked items.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Speed of the animation in milliseconds when opening the stack. Default is 300.",
            "name": "openSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Speed of the animation in milliseconds when opening the stack. Default is 300.",
            "name": "closeSpeed",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "expanded",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "staticMessage",
        "description": "Display a message without the use of a FacesMessage.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The message summary.",
            "name": "summary",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The message detail.",
            "name": "detail",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The severity of the message: error, info, warn, fatal.",
            "name": "severity",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether html would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style of main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "steps",
        "description": "Steps is a menu component that displays steps of a workflow.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Style of main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the active tab. Default is 0.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines whether items would be clickable or not. Default is true.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "sticky",
        "description": "Sticky component positions other components as fixed so that these components stay in window viewport during scrolling.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Identifier of the component(s) to make sticky.",
            "name": "target",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Margin to the top of the page during fixed scrolling, default is 0.",
            "name": "margin",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "submenu",
        "description": "Submenu is nested in menu components and represents a sub menu items.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Label of the submenu header.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables the submenu.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Icon of a submenu, see menuitem to see how it is used.",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the menu.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the submenu.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the state of the submenu.",
            "name": "expanded",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "subTable",
        "description": "SubTable is a helper component of datatable used for grouping.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Datasource of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the iterator variable used to refer each data.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "summaryRow",
        "description": "SummaryRow is a helper component for data grouping.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Method expression to execute before rendering summary row. (e.g. to calculate totals)",
            "name": "listener",
            "required": false,
            "type": "javax.el.MethodExpression"
          }
        ]
      },
      {
        "name": "tab",
        "description": "Tab is a generic container component used by other PrimeFaces components such as tabView or accordionPanel.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Title text of the tab.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title container inner style.",
            "name": "titleStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title container style class.",
            "name": "titleStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables tab element if true.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Makes the tab closable by displaying a close icon.",
            "name": "closable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Tooltip of the tab header.",
            "name": "titletip",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "tabMenu",
        "description": "TabMenu is a menu component that displays menuitems as tabs.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Style of main container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the active tab. Default is 0.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "name": "tabView",
        "description": "TabView is a tabbed panel component featuring client side tabs, dynamic content loading with ajax and content transition effects.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Index of the active tab. Default is 0.",
            "name": "activeIndex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the transition effect.",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Duration of the transition effect. Default is normal.",
            "name": "effectDuration",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the toggleMode. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When tab contents are lazy loaded by ajax toggleMode, caching only retrieves the tab contents once and subsequent toggles of a cached tab does not communicate with server. If caching is turned off, tab contents are reloaded from server each time tab is clicked. Default is true.",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute when a tab is clicked.",
            "name": "onTabChange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a tab is shown.",
            "name": "onTabShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of collection iterator to use in dynamic number of tabs.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "List to iterate to display dynamic number of tabs.",
            "name": "value",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "Orientation of the tab headers, valid values are \"top\" and \"bottom\".",
            "name": "orientation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute before a tab is closed. Return false to prevent closing.",
            "name": "onTabClose",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, tab headers can be scrolled horizontally instead of wrapping. Default is false.",
            "name": "scrollable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "AccordionPanel is a naming container thus prepends its id to its children by default, a false value turns this behavior off except for dynamic tabs.",
            "name": "prependId",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "tagCloud",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "model",
            "required": true,
            "type": "org.primefaces.model.tagcloud.TagCloudModel"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "terminal",
        "description": "Terminal is an ajax powered component bringing desktop command-line tools to the web.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Welcome message to be displayed on initial load.",
            "name": "welcomeMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Primary prompt text.",
            "name": "prompt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Method to execute by passing command and the arguments.",
            "name": "commandHandler",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "TerminalAutoCompleteModel instance that represents the commands and arguments used for autocompletion.",
            "name": "autoCompleteModel",
            "required": false,
            "type": "org.primefaces.model.terminal.TerminalAutoCompleteModel"
          },
          {
            "description": "Defines if the terminal is escaped or not.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "textEditor",
        "description": "Editor is an input component with rich text editing capabilities.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Height of the editor. Default is min integer value.",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Whether to instantiate the editor to read-only mode.",
            "name": "readonly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Inline style of the editor container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the editor container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Placeholder text to show when editor is empty..",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether the toolbar of the editor is visible.",
            "name": "toolbarVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Secure the component with the HTML Sanitizer library on the classpath. Default is true.",
            "name": "secure",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to allow formatting to be included.",
            "name": "allowFormatting",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to allow blocks to be included.",
            "name": "allowBlocks",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to allow styles to be included.",
            "name": "allowStyles",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to allow links to be included.",
            "name": "allowLinks",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to allow images to be included.",
            "name": "allowImages",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Define a list of formats to allow in the editor. By default all formats are allowed.",
            "name": "formats",
            "required": false,
            "type": "java.util.List"
          }
        ]
      },
      {
        "name": "themeSwitcher",
        "description": "ThemeSwitcher enables switching PrimeFaces themes on the fly with no page refresh.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Prefix text displayed on button.",
            "name": "buttonPreText",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "effect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "effectSpeed",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "\n                \n            ",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "height",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "\n                \n            ",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "tieredMenu",
        "description": "TieredMenu displays submenus in overlays.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "MenuModel instance to create menus programmatically.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.menu.MenuModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether the first level of submenus will be displayed on mouseover or not. When set to false, click event is required to display.",
            "name": "autoDisplay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Id of component whose click event will show the dynamic positioned menu.",
            "name": "trigger",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of menu to align with trigger element.",
            "name": "my",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Corner of trigger to align with menu element.",
            "name": "at",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. Default is false, meaning static positioning.",
            "name": "overlay",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Event name of component that will show the dynamic positioned menu. Default is click.",
            "name": "triggerEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event to toggle the submenus, default is hover. Valid values are \"hover\" and \"click\".",
            "name": "toggleEvent",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "timeline",
        "description": "Timeline is an interactive visualization chart to visualize events in time.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the request-scoped variable for underlaying object in the TimelineEvent for each iteration.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "An instance of TimelineModel representing the backing model.",
            "name": "value",
            "required": true,
            "type": "org.primefaces.model.timeline.TimelineModel"
          },
          {
            "description": "Name of the request-scoped variable for underlaying object in the TimelineGroup for each iteration.",
            "name": "varGroup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "User locale for i18n localization messages. The attribute can be either a String or java.util.Locale object. Default to view Locale.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Target time zone to convert start / end dates of TimelineEvent's in server side. The attribute can be either a String or TimeZone object or null. If null, timeZone defaults to the server's time zone the application is running in.",
            "name": "timeZone",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Time zone the user would like to see dates in UI. The attribute can be either a String or TimeZone object or null. If null, clientTimeZone defaults to browser's time zone.",
            "name": "clientTimeZone",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The height of the timeline in pixels or as a percentage. When height is undefined or null, the height of the timeline is automatically adjusted to fit the contents. It is possible to set a maximum height using option maxHeight to prevent the timeline from getting too high in case of automatically calculated height.",
            "name": "height",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies a minimum height for the Timeline in pixels.",
            "name": "minHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies the maximum height for the Timeline in pixels.",
            "name": "maxHeight",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The width of the timeline in pixels or as a percentage. Default is \"100%\".",
            "name": "width",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Check if the timeline container is resized, and if so, resize the timeline. Useful when the webpage (browser window) or a layout pane / unit containing the timeline component is resized. Default is true.",
            "name": "responsive",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Deprecated, use orientationAxis instead of this. If false, the horizontal axis is drawn at the bottom. If true, the axis is drawn on top. Default is false.",
            "name": "axisOnTop",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Orientation of the timeline axis: 'top', 'bottom' (default), 'both', or 'none'. If orientation is 'bottom', the time axis is drawn at the bottom. When 'top', the axis is drawn on top. When 'both', two axes are drawn, both on top and at the bottom. In case of 'none', no axis is drawn at all.",
            "name": "orientationAxis",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Orientation of the timeline items: 'top' or 'bottom' (default). Determines whether items are aligned to the top or bottom of the Timeline.",
            "name": "orientationItem",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, the items in the timeline can be manipulated. Only applicable when option selectable is true. Default is false.",
            "name": "editable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, new items can be created by double tapping an empty space in the Timeline. Takes precedence over editable. Default is false.",
            "name": "editableAdd",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, items can be deleted by first selecting them, and then clicking the delete button on the top right of the item. Takes precedence over editable. Default is false.",
            "name": "editableRemove",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, items can be dragged from one group to another. Only applicable when the Timeline has groups. Takes precedence over editable. Default is false.",
            "name": "editableGroup",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, items can be dragged to another moment in time. Takes precedence over editable. Default is false.",
            "name": "editableTime",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, TimelineEvent specific editables properties are overridden by timeline settings. Default is false.",
            "name": "editableOverrideItems",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, events on the timeline are selectable. Selectable events can fire AJAX \"select\" events. Default is true.",
            "name": "selectable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, the timeline is zoomable. When the timeline is zoomed, AJAX \"rangechange\" events are fired. Default is true.",
            "name": "zoomable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, the timeline is movable. When the timeline is moved, AJAX \"rangechange\" events are fired. Default is true.",
            "name": "moveable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The initial start date for the axis of the timeline. If not provided, the earliest date present in the events is taken as start date. Default is null.",
            "name": "start",
            "required": false,
            "type": "java.time.LocalDateTime"
          },
          {
            "description": "The initial end date for the axis of the timeline. If not provided, the latest date present in the events is taken as end date. Default is null.",
            "name": "end",
            "required": false,
            "type": "java.time.LocalDateTime"
          },
          {
            "description": "Set a minimum Date for the visible range. It will not be possible to move beyond this minimum. Default is null.",
            "name": "min",
            "required": false,
            "type": "java.time.LocalDateTime"
          },
          {
            "description": "Set a maximum Date for the visible range. It will not be possible to move beyond this maximum. Default is null.",
            "name": "max",
            "required": false,
            "type": "java.time.LocalDateTime"
          },
          {
            "description": "Set a minimum zoom interval for the visible range in milliseconds. It will not be possible to zoom in further than this minimum. Default is 10.",
            "name": "zoomMin",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "Set a maximum zoom interval for the visible range in milliseconds. It will not be possible to zoom out further than this maximum. Default value equals 315360000000000 ms (about 10000 years).",
            "name": "zoomMax",
            "required": false,
            "type": "java.lang.Long"
          },
          {
            "description": "Preload factor is a positive float value or 0 which can be used for lazy loading of events. When the lazy loading feature is active, the calculated time range for preloading will be multiplicated by the preload factor. The result of this multiplication specifies the additional time range which will be considered for the preloading during moving / zooming too. For example, if the calculated time range for preloading is 5 days and the preload factor is 0.2, the result is 5 * 0.2 = 1 day. That means, 1 day backwards and / or 1 day onwards will be added to the original calculated time range. The event's area to be preloaded is wider then. This helps to avoid frequently, time-consuming fetching of events. Default value is 0.",
            "name": "preloadFactor",
            "required": false,
            "type": "java.lang.Float"
          },
          {
            "description": "The minimal margin in pixels between events. Default is 10.",
            "name": "eventMargin",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The minimal horizontal margin in pixels between items. Takes precedence over eventMargin property. Default is 10.",
            "name": "eventHorizontalMargin",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The minimal vertical margin in pixels between items. Takes precedence over eventMargin property. Default is 10.",
            "name": "eventVerticalMargin",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "The minimal margin in pixels between events and the horizontal axis. Default is 10.",
            "name": "eventMarginAxis",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Specifies the default type for the timeline items. Choose from 'box', 'point' and 'range'. If undefined, the Timeline will auto detect the type from the items data: if a start and end date is available, a 'range' will be created, and else, a 'box' is created. Default null.",
            "name": "eventStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Deprecated, use editableGroup property instead.",
            "name": "groupsChangeable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Allows to customize the way groups are ordered. When true (default), groups will be ordered by content alphabetically (when the list of groups is missing) or by native ordering of TimelineGroup object in the list of groups (when the list of groups is available). When false, groups will not be ordered at all.",
            "name": "groupsOrder",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A css text string to apply custom styling for an individual group label, for example \"color: red; background-color: pink;\".",
            "name": "groupStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Deprecated, use snap property instead. If true, the start and end of an event will be snapped nice integer values when moving or resizing the event. Default is true.",
            "name": "snapEvents",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When moving items on the Timeline, they will be snapped to nice dates like full hours or days, depending on the current scale. The snap function can be replaced with a custom javascript function, or can be set to null to disable snapping. The signature of the snap function is: function snap(date: Date, scale: string, step: number) : Date or number The parameter scale can be can be 'millisecond', 'second', 'minute', 'hour', 'weekday, 'week', 'day, 'month, or 'year'. The parameter step is a number like 1, 2, 4, 5.",
            "name": "snap",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If true, the events are stacked above each other to prevent overlapping events. Default is true.",
            "name": "stackEvents",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, the timeline shows a red, vertical line displaying the current time. Default is true.",
            "name": "showCurrentTime",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "By default, the timeline shows both minor and major date labels on the horizontal axis. For example the minor labels show minutes and the major labels show hours. When \"showMajorLabels\" is false, no major labels are shown. Default is true.",
            "name": "showMajorLabels",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "By default, the timeline shows both minor and major date labels on the horizontal axis. For example the minor labels show minutes and the major labels show hours. When \"showMinorLabels\" is false, no minor labels are shown. When both \"showMajorLabels\" and \"showMinorLabels\" are false, no horizontal axis will be visible. Default is true.",
            "name": "showMinorLabels",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Deprecated, use editableTime property instead. If false, items can not be moved or dragged horizontally (neither start time nor end time is changable). This is useful when items should be editable but can only be changed regarding group or content (typical use case: scheduling events). Default is true.",
            "name": "timeChangeable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class to apply when an acceptable draggable is dragged over. Default is null.",
            "name": "dropHoverStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply when an acceptable draggable is being dragged over. Default is null.",
            "name": "dropActiveStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Selector to define the accepted draggables. Default is null.",
            "name": "dropAccept",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Scope key to match draggables and droppables. Default is null.",
            "name": "dropScope",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When a Timeline is configured to be clickToUse, it will react to mouse and touch events only when active. When active, a blue shadow border is displayed around the Timeline. The Timeline is set active by clicking on it, and is changed to inactive again by clicking outside the Timeline or by pressing the ESC key. Default is false.",
            "name": "clickToUse",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, items with titles will display a tooltip. If false, item tooltips are prevented from showing. Default is true.",
            "name": "showTooltips",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "If true, tooltips will follow the mouse as they move around in the item. Default is false.",
            "name": "tooltipFollowMouse",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Set how the tooltip should act if it is about to overflow out of the timeline. Choose from 'cap', 'flip' and 'none'. If it is set to 'cap', the tooltip will just cap its position to inside to timeline. If set to 'flip', the position of the tooltip will flip around the cursor so that a corner is at the cursor, and the rest of it is visible. If set to 'none', the tooltip will be positioned independently of the timeline, so parts of the tooltip could possibly be hidden or stick ouf of the timeline, depending how CSS overflow is defined for the timeline (by default it's hidden). Default is 'flip'.",
            "name": "tooltipOverflowMethod",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Set a value (in ms) that the tooltip is delayed before showing. Default is 500.",
            "name": "tooltipDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines direction of timeline. Valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of javascript function to extend the options of the underlying timeline javascript component.",
            "name": "extender",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "toggleSwitch",
        "description": "ToggleSwitch is used to select a boolean value.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "User presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables or enables the switch.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute on value change event.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the main container.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when component loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "toolbar",
        "description": "Toolbar is a horizontal grouping component for commands and other content.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "toolbarGroup",
        "description": "ToolbarbarGroup is a helper component for Toolbar component to define placeholders.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Defines the alignment within toolbar, valid values are left and right. Default is left.",
            "name": "align",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "tooltip",
        "description": "Tooltip goes beyond the legacy html title attribute by providing custom effects, events, html content and advance theme support.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Event displaying the tooltip. Default is mouseover.",
            "name": "showEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to be used for displaying. Default is fade.",
            "name": "showEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay time to show tooltip in milliseconds. Default is 150.",
            "name": "showDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Event hiding the tooltip. Default is mouseout.",
            "name": "hideEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Effect to be used for hiding. Default is fade.",
            "name": "hideEffect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay time to hide tooltip in milliseconds. Default is 0",
            "name": "hideDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Id of the component to attach the tooltip.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the tooltip.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the tooltip.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "jquery selector for global tooltip, default is \"a,:input,:button\".",
            "name": "globalSelector",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines whether html would be escaped or not, defaults to true.",
            "name": "escape",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Tooltip position follows pointer on mousemove, default is false",
            "name": "trackMouse",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Client side callback to execute before tooltip is shown. Returning false will prevent display.",
            "name": "beforeShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute after tooltip is hidden.",
            "name": "onHide",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute after tooltip is shown.",
            "name": "onShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the tooltip, valid values are right, left, top and bottom.",
            "name": "position",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "delegate",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "tree",
        "description": "Tree is is used for displaying hierarchical data and creating site navigations.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "A TreeNode instance as the backing model.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Name of the request-scoped variable that'll be used to refer each treenode data during rendering.",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Specifies the ajax/client toggleMode. Default is false.",
            "name": "dynamic",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies caching on dynamically loaded nodes. When set to true expanded nodes will be kept in memory. Default is true.",
            "name": "cache",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript event to process when a tree node is clicked.",
            "name": "onNodeClick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "TreeNode array to reference the selections.",
            "name": "selection",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Style of the main container element of tree.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main container element of tree.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines the selectionMode.",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Highlights nodes on hover when selection is enabled, set to false to disable highlighting.",
            "name": "highlight",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Unique key of the data presented by tree nodes.",
            "name": "datakey",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "When enabled, Displays slide effect during toggling of a node.",
            "name": "animate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines the orientation of the tree, valid values are, \"vertical\" (default) and horizontal.",
            "name": "orientation",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines upwards selection propagation for checkbox mode, default is true.",
            "name": "propagateSelectionUp",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines upwards selection propagation for checkbox mode, default is true.",
            "name": "propagateSelectionDown",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines text direction, valid values are \"ltr\" (default) and \"rtl\".",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls dragging of tree nodes. Default is false.",
            "name": "draggable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls dropping of tree nodes. Default is false.",
            "name": "droppable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Scope key to group a set of tree components for transferring nodes using drag and drop.",
            "name": "dragdropScope",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines parent-child relationship when a node is dragged, valid values are self (default), parent and ancestor.",
            "name": "dragMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines parent-child restrictions when a node is dropped valid values are none (default) and sibling.",
            "name": "dropRestrict",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Validation constraint for selection.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message for required selection validation.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.",
            "name": "skipChildren",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if in checkbox selection mode, a readonly checkbox should be displayed for an unselectable node. Default is false.",
            "name": "showUnselectableCheckbox",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Position of the element in the tabbing order. Default is 0.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Name of the request-scoped variable that'll be used to refer current treenode using EL.",
            "name": "nodeVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Property to be used for filtering.",
            "name": "filterBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Match mode for filtering.",
            "name": "filterMatchMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables tree.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, the selected multiple nodes can be dragged from a tree to another tree.",
            "name": "multipleDrag",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, the copy of the selected nodes can be dropped from a tree to another tree using Shift key.",
            "name": "dropCopyNode",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Method providing suggestions.",
            "name": "onDrop",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Mode for filtering valid values are lenient and strict. Default is lenient.",
            "name": "filterMode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "treeNode",
        "description": "TreeNode is used with Tree component to represent a node in tree.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Type of the tree node. Default is \"default\"",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class to apply a particular tree node type.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "icon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "expandedIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "collapsedIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The aria-label attribute is used to define a string that labels the current element for accessibility.",
            "name": "ariaLabel",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "treeTable",
        "description": "Treetable is is used for displaying hierarchical data in tabular format.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "\n                \n            ",
            "name": "value",
            "required": true,
            "type": "org.primefaces.model.TreeNode"
          },
          {
            "description": "\n                \n            ",
            "name": "var",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "TreeNode array to reference the selections.",
            "name": "selection",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines the selectionMode, valid values are \"single\" and \"multiple\".",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes data scrollable with fixed header. Default is false.",
            "name": "scrollable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Height for scrollable data.",
            "name": "scrollHeight",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Width for scrollable data.",
            "name": "scrollWidth",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the table element.",
            "name": "tableStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the table element.",
            "name": "tableStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text to display when there is no data to display. Default is \"No records found.\"",
            "name": "emptyMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if columns can be resized or not.",
            "name": "resizableColumns",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class for each row.",
            "name": "rowStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Columns are resized live in this mode without using a resize helper.",
            "name": "liveResize",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Validation constraint for selection.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Message for required selection validation.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Expression for default sorting.",
            "name": "sortBy",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines default sorting order. Default is \"ascending\"",
            "name": "sortOrder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Custom pluggable sortFunction for default sorting.",
            "name": "sortFunction",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "In native mode, treetable uses native checkboxes.",
            "name": "nativeElements",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Locale to be used in features such as sorting, defaults to view locale.",
            "name": "dataLocale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Case sensitivity for sorting, insensitive by default.",
            "name": "caseSensitiveSort",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.",
            "name": "skipChildren",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines if in checkbox selection mode, a readonly checkbox should be displayed for an unselectable node. Default is false.",
            "name": "showUnselectableCheckbox",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Name of the request-scoped variable that'll be used to refer current treenode using EL.",
            "name": "nodeVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Updates children only when set to \"children\" or the node itself with children when set to \"self\" on node expand.",
            "name": "expandMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sticky header stays in window viewport during scrolling.",
            "name": "stickyHeader",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Controls incell editing.",
            "name": "editable",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Defines edit mode, valid values are \"row\" (default) and \"cell\".",
            "name": "editMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if cell editors of row should be displayed as editable or not. Default is false meaning display mode.",
            "name": "editingRow",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Separator text to use in output mode of editable cells with multiple components.",
            "name": "cellSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables text selection on row click. Default is true.",
            "name": "disabledTextSelection",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Enables pagination. Default is false.",
            "name": "paginator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Template of the paginator.",
            "name": "paginatorTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the rowsPerPage dropdown.",
            "name": "rowsPerPageTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label for rowsPerPage dropdown.",
            "name": "rowsPerPageLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Template of the currentPageReport UI.",
            "name": "currentPageReportTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Maximum number of page links to display. Default is 10.",
            "name": "pageLinks",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Position of the paginator. Default is both.",
            "name": "paginatorPosition",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.",
            "name": "paginatorAlwaysVisible",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Number of rows to display per page. Default value is 0 meaning to display all data available.",
            "name": "rows",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Index of the first data to display.",
            "name": "first",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Node to keep the filtered nodes if filtering is enabled.",
            "name": "filteredNode",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Client side event to invoke treetable filtering for input fields. Default is keyup.",
            "name": "filterEvent",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Delay to wait in milliseconds before sending each filter query. Default is 300.",
            "name": "filterDelay",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Defines the cell edit behavior, valid values are \"eager\" (default) and \"lazy\".",
            "name": "cellEditMode",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "triStateCheckbox",
        "description": "Checkbox with 3 states: true, false, and unselected.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateOne as a css class.",
            "name": "stateOneIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateTwo as a css class.",
            "name": "stateTwoIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Icon for StateThree as a css class.",
            "name": "stateThreeIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label to display next to checkbox.",
            "name": "itemLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateOne.",
            "name": "stateOneTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateTwo.",
            "name": "stateTwoTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Title for StateThree.",
            "name": "stateThreeTitle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the component.",
            "name": "disabled",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute on state change.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The tabindex attribute specifies the tab order of an element when the \"tab\" button is used for navigating.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "watermark",
        "description": "Watermark displays a hint on an input field.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Text of watermark. Required.",
            "name": "value",
            "required": true,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the component to attach the watermark.",
            "name": "for",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "wizard",
        "description": "Wizard provides an ajax enhanced UI to implement a workflow easily in a single page. Wizard consists of several child tab components where each tab represents a step in the process.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Id of the current step in flow.",
            "name": "step",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style of the main wizard container element.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the main wizard container element.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Server side listener to invoke when wizard attempts to go forward or back.",
            "name": "flowListener",
            "required": false,
            "type": "javax.el.MethodExpression"
          },
          {
            "description": "Specifies visibility of default navigator arrows. Default is true.",
            "name": "showNavBar",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies visibility of default step title bar. Default is true.",
            "name": "showStepStatus",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Javascript event handler to be invoked when flow goes back.",
            "name": "onback",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Javascript event handler to be invoked when flow goes forward.",
            "name": "onnext",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of next navigation button. Default is \"Next\".",
            "name": "nextLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Label of back navigation button. Default is \"Back\".",
            "name": "backLabel",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If yes, the model will be updated when the \"Back\" button is clicked. Default is false.",
            "name": "updateModelOnPrev",
            "required": false,
            "type": "java.lang.Boolean"
          }
        ]
      },
      {
        "name": "barChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.bar.BarChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "bubbleChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.bubble.BubbleChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "donutChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.donut.DonutChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "lineChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.line.LineChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "scatterChart",
        "description": "Scatter Chart",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.scatter.ScatterChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "pieChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.pie.PieChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "polarAreaChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.polar.PolarAreaChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "radarChart",
        "description": "\n            \n        ",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Model of the chart.",
            "name": "model",
            "required": false,
            "type": "org.primefaces.model.charts.radar.RadarChartModel"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      },
      {
        "name": "datePicker",
        "description": "DatePicker is an input component to select a date.",
        "attribute": [
          {
            "description": "Unique identifier of the component in a namingContainer.",
            "name": "id",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Boolean value to specify the rendering of the component, when set to false component will not be rendered.",
            "name": "rendered",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "An el expression referring to a server side UIComponent instance in a backing bean.",
            "name": "binding",
            "required": false,
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Value of the component.",
            "name": "value",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.",
            "name": "converter",
            "required": false,
            "type": "java.faces.convert.Converter"
          },
          {
            "description": "When set true, process validations logic is executed at apply request values phase for this component. Default is false.",
            "name": "immediate",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Marks component as required.",
            "name": "required",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "A method expression referring to a method validationg the input.",
            "name": "validator",
            "required": false,
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "A method binding expression referring to a method for handling a valuchangeevent.",
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.faces.event.ValueChangeListener"
          },
          {
            "description": "Message to display when required field validation fails.",
            "name": "requiredMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when conversion fails.",
            "name": "converterMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Message to display when validation fails.",
            "name": "validatorMessage",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Access key to transfer focus to the input element.",
            "name": "accesskey",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Alternate textual description of the input element.",
            "name": "alt",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Controls browser autocomplete behavior.",
            "name": "autocomplete",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.",
            "name": "dir",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Disables the input element, default is false.",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A localized user presentable name.",
            "name": "label",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup.",
            "name": "lang",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "User locale for i18n localization messages. The attribute can be either a String or java.util.Locale object.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Maximum number of characters that may be entered in this field.",
            "name": "maxlength",
            "required": false,
            "type": "int"
          },
          {
            "description": "Client side callback to execute when input element loses focus.",
            "name": "onblur",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element loses focus and its value has been modified since gaining focus.",
            "name": "onchange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is clicked.",
            "name": "onclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element is double clicked.",
            "name": "ondblclick",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when input element receives focus.",
            "name": "onfocus",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed down over input element.",
            "name": "onkeydown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is pressed and released over input element.",
            "name": "onkeypress",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a key is released over input element.",
            "name": "onkeyup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is pressed down over input element.",
            "name": "onmousedown",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved within input element.",
            "name": "onmousemove",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved away from input element.",
            "name": "onmouseout",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is moved onto input element.",
            "name": "onmouseover",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when a pointer input element is released over input element.",
            "name": "onmouseup",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Client side callback to execute when text within input element is selected by user.",
            "name": "onselect",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that this input element will prevent changes by the user.",
            "name": "readonly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of characters used to determine the width of the input element.",
            "name": "size",
            "required": false,
            "type": "int"
          },
          {
            "description": "Inline style of the component.",
            "name": "style",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the component.",
            "name": "styleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Position of the element in the tabbing order.",
            "name": "tabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Advisory tooltip information.",
            "name": "title",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "The placeholder attribute specifies a short hint that describes the expected value of an input field.",
            "name": "placeholder",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Name of the client side widget.",
            "name": "widgetVar",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Shows only time picker without date. Default is false.",
            "name": "timeOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When enabled, displays the datepicker as inline. Default is false for popup mode.",
            "name": "inline",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "DateFormat pattern for localization.",
            "name": "pattern",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Input field type. Default is text.",
            "name": "type",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the input element. Used when inline is false.",
            "name": "inputStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Style class of the input element. Used when inline is false.",
            "name": "inputStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Makes input text of a popup datepicker readonly. Default is false.",
            "name": "readonlyInput",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "User locale for i18n localization messages. The attribute can be either a String or java.util.Locale object.",
            "name": "locale",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Position of the button in the tabbing order.",
            "name": "buttonTabindex",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, displays a button with icon next to input. Default is false.",
            "name": "showIcon",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Callback to execute before displaying calendar.",
            "name": "beforeShow",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "If enabled, the input is focused again after selecting a date. Default is false.",
            "name": "focusOnSelect",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020).",
            "name": "yearRange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Sets datepicker's minimum visible date.",
            "name": "mindate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Sets datepicker's maximum visible date.",
            "name": "maxdate",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Defines the quantity of the selection, valid values are \"single\", \"multiple\" and \"range\". Default is \"single\".",
            "name": "selectionMode",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option. Default is false.",
            "name": "showOtherMonths",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true. Default is false.",
            "name": "selectOtherMonths",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "When disabled, datepicker will not be visible with input focus. Default is true.",
            "name": "showOnFocus",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "The cutoff year for determining the century for a date. Default is \"+10\".",
            "name": "shortYearCutoff",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether the year should be rendered as a dropdown instead of text. Default is false.",
            "name": "monthNavigator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether the year should be rendered as a dropdown instead of text. Default is false.",
            "name": "yearNavigator",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to display timepicker. Default is false.",
            "name": "showTime",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Specifies 12 or 24 hour format.",
            "name": "hourFormat",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Whether to display timepicker only. Default is false.",
            "name": "timeOnly",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to show the seconds in time picker. Default is false.",
            "name": "showSeconds",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Hours to change per step. Default is 1.",
            "name": "stepHour",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Minutes to change per step. Default is 1.",
            "name": "stepMinute",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Seconds to change per step. Default is 1.",
            "name": "stepSecond",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Whether to display today and clear buttons at the footer. Default is false.",
            "name": "showButtonBar",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Style class of the datetimepicker container element.",
            "name": "panelStyleClass",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Inline style of the datetimepicker container element.",
            "name": "panelStyle",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Keep invalid value when input blur. Default is false.",
            "name": "keepInvalid",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Whether to hide the overlay on date selection when showTime is enabled. Default is false.",
            "name": "hideOnDateTimeSelect",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Maximum number of selectable dates in multiple mode. Default is java.lang.Integer.MAX_VALUE.",
            "name": "maxDateCount",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Number of months to display. Default is 1.",
            "name": "numberOfMonths",
            "required": false,
            "type": "java.lang.Integer"
          },
          {
            "description": "Type of view to display, valid values are \"date\" for datepicker and \"month\" for month picker.",
            "name": "view",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "When enabled, calendar overlay is displayed as optimized for touch devices. Default is false.",
            "name": "touchUI",
            "required": false,
            "type": "java.lang.Boolean"
          },
          {
            "description": "Function that gets a date information and returns the cell content in datepicker.",
            "name": "dateTemplate",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Appends the datepicker's panel to the given search expression.",
            "name": "appendTo",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()",
            "name": "timeZone",
            "required": false,
            "type": "java.lang.Object"
          },
          {
            "description": "Icon of the trigger button when showIcon is enabled",
            "name": "triggerButtonIcon",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "List with dates that should be disabled (not selectable).",
            "name": "disabledDates",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "List with weekday numbers that should be disabled (not selectable).",
            "name": "disabledDays",
            "required": false,
            "type": "java.util.List"
          },
          {
            "description": "Callback to invoke when a month is changed using the navigators.",
            "name": "onMonthChange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Callback to invoke when a year is changed using the navigators.",
            "name": "onYearChange",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "Separator for joining start and end dates on range selection mode. Default value is \"-\".",
            "name": "rangeSeparator",
            "required": false,
            "type": "java.lang.String"
          },
          {
            "description": "ResolverStyle for java.time.format.DateTimeFormatter, lenient, smart or strict, Default is smart.",
            "name": "resolverStyle",
            "required": false,
            "type": "java.lang.String"
          }
        ]
      }
    ]
  }
}