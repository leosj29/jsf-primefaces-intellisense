{
  "components": {
    "component": [
      {
        "name": "actionListener",
        "description": "",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an LazyActionListener parameter, with a return type of void, or to a public method that takes no arguments with a return type of void"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Value binding expression that evaluates to an object that implements ActionListener."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Fully qualified Java class name of an ActionListener to be created and registered."
          }
        ]
      },
      {
        "name": "ajax",
        "description": "The <a4j:ajax> behavior allows Ajax capability to be added to a non-Ajax component. The non-Ajax component must implement the ClientBehaviorHolder interface for all the event attributes that support behavior rendering.",
        "attribute": [
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", do not initiate an ajax request when the associated event is observed"
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords. Default value is \"@region\" which resolves to parent component if no region is present."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an error has occurred during Ajax communications"
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of JavaScript event property (click, change, etc.) of parent component that triggers the behavior. If the event attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component. The value cannot be an EL expression."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Method expression referencing a method that will be called when an AjaxBehaviorEvent has been broadcast for the listener."
          },
          {
            "name": "onbeforesubmit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the AJAX request is submitted"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "queueId",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Identify the name of the destination queue"
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          }
        ]
      },
      {
        "name": "attachQueue",
        "description": "The <a4j:attachQueue> behavior is used together with a <a4j:queue> component to further customize queuing for particular components and behaviors. The <a4j:attachQueue> behavior can override the scope-wide queue settings for an individual component, or attach specific requests to a queue.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "ignoreDupResponses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Attribute allows you to ignore an Ajax response produced by a request if the newest 'similar' request is in the queue already. ignoreDupResponses=\"true\" does not cancel the request while it is processed on the server, but just allows avoiding unnecessary updates on the client side if the response isn't actual now"
          },
          {
            "name": "onrequestdequeue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the request is removed from the queue"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requestGroupingId",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specify the groupingId to process multiple requests together. Requests from multiple  behaviors can use the same identifier to group requests together"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Identify the name of the destination queue"
          },
          {
            "name": "onrequestqueue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request is added to the queue"
          },
          {
            "name": "requestDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines the time (in ms) the request will be waiting in the queue before it is ready to be sent."
          }
        ]
      },
      {
        "name": "commandButton",
        "description": "The <a4j:commandButton> component is similar to the JavaServer Faces (JSF) <h:commandButton> component, but additionally includes Ajax support.",
        "attribute": [
          {
            "name": "accesskey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros"
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Type of button to create. Can be one of \"submit\", \"button\", \"image\" and \"reset\". If not specified, the default value is \"submit\"."
          },
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords. Default value is \"@region\" which resolves to form if no region is present."
          },
          {
            "name": "image",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Absolute or relative URL of the image to be displayed for this button. If specified, this \"input\" element will be of type \"image\". Otherwise, it will be of the type specified by the \"type\" property with a label specified by the \"value\" property"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request results in an error"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          }
        ]
      },
      {
        "name": "commandLink",
        "description": "The <a4j:commandLink> component is similar to the JavaServer Faces (JSF) <h:commandLink> component, except that it includes plugged-in Ajax behavior.",
        "attribute": [
          {
            "name": "accesskey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "coords",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "hreflang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rev",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "charset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords. Default value is \"@region\" which resolves to form if no region is present."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request results in an error"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          },
          {
            "name": "shape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros"
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink."
          }
        ]
      },
      {
        "name": "jsFunction",
        "description": "The <a4j:jsFunction> component performs Ajax requests directly from JavaScript code and retrieves server-side data. The server-side data is returned in JavaScript Object Notation (JSON) format prior to the execution of any JavaScript code defined using the \"oncomplete\" attribute.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords. Default value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "name",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the generated javascript function"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request results in an error"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          }
        ]
      },
      {
        "name": "log",
        "description": "The <a4j:log> component generates JavaScript that opens a debug window, logging application information such as requests, responses, and DOM changes.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.LogMode)",
            "description": "Determines how the log appears on the page, can be one of: \"inline\" (default), \"popup\" or \"console\". When set to \"popup\", the popup window is opened by pressing the key combination Ctrl + Shift + L. \"console\" mode will log messages in the JavaScript console."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "hotkey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Key to open (in combination with Ctrl+Shift) the popup window. Default value is \"L\""
          },
          {
            "name": "level",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Sets the logging level, can be one of 'debug', 'info' (default), 'warn', 'error'."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "mediaOutput",
        "description": "The <a4j:mediaOutput> component is used for generating images, video, sounds, and other resources defined on the fly.",
        "attribute": [
          {
            "name": "accesskey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "archive",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specifies a space-separated list of URIs"
          },
          {
            "name": "border",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Deprecated. This attribute specifies the width of an IMG or OBJECT border, in pixels. The default value for this attribute depends on the user agent"
          },
          {
            "name": "charset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink."
          },
          {
            "name": "codebase",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Base URI for classid, data, archive"
          },
          {
            "name": "coords",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The attribute specifies shape and it position on the screen. Possible values: \"rect: left-x, top-y, right-x, bottom-y\", \"circle: center-x, center-y, radius\", \"poly: x1, y1, x2, y2, ..., xN, yN\".   Notes:  when giving the radius value in percents, user agents should calculate the final radius value in pixels based on the associated object's width and height; the radius value should be smaller than center-x and center-y values; for a polygon, the first and last coordinate pairs should have same x and y to close the shape (x1=xN; y1=yN) (when these coordinates are different, user agents should infer an additional pair to close a polygon).  Coordinates are relative to the top left corner of an object. All values are lengths. All values are comma separated."
          },
          {
            "name": "declare",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Declare but don't instantiate flag"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "expires",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Date)",
            "description": "The attribute allows to manage caching and defines the period after which a resource is reloaded."
          },
          {
            "name": "hreflang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "mimeType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Geterated content mime-type for append to response header ( 'image/jpeg' etc )"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "shape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "uriAttribute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Get URI attribute for resource ( src for images, href for links etc )."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Data value calculated at render time and stored in URI (also as part of cache Key ), at generation time passed to send method. Can be used for update cache at change of generating conditions, and for creating beans as \"Lightweight\" pattern components (request scope).   IMPORTANT: Since serialized data stored in URI, avoid using big objects."
          },
          {
            "name": "align",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Deprecated. This attribute specifies the position of an IMG, OBJECT, or APPLET with respect to its context. The possible values are \"bottom\", \"middle\", \"top\", \"left\" and \"right\". The default value is \"middle\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "cacheable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Attribute is a flag that defines the caching strategy. If 'cacheable' is set to false, the response will not be cached. If it is set to true, it will be cached and the serialized value of 'value' attribute plays the role of a cache key."
          },
          {
            "name": "classid",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Identifies an implementation"
          },
          {
            "name": "codetype",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines content type for code"
          },
          {
            "name": "createContent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Method call expression to send generated resource to OutputStream. It must have two parameter with a type of java.io.OutputStream and java.lang.Object ( deserialized value of data attribute )"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "element",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Get the Element name for rendering ( img , a , object, applet )."
          },
          {
            "name": "fileName",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Filename of the resource to be served"
          },
          {
            "name": "hspace",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Deprecated. This attribute specifies the amount of white space to be inserted to the left and right of an IMG, APPLET, or OBJECT. The default value is not specified, but is generally a small, non-zero length"
          },
          {
            "name": "ismap",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Use server-side image map"
          },
          {
            "name": "lastModified",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Date)",
            "description": "The attribute allows to manage caching. A browser can send request with the header \"If-Modified-Since\" for necessity of object reloading. If time of modification is earlier, then the framework doesn't call generation and return code 304."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "rev",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "standby",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Message to show while loading"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "target",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink."
          },
          {
            "name": "usemap",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specifies an image as a client-side image-map"
          },
          {
            "name": "vspace",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Deprecated. This attribute specifies the amount of white space to be inserted above and below an IMG, APPLET, or OBJECT. The default value is not specified, but is generally a small, non-zero length"
          }
        ]
      },
      {
        "name": "outputPanel",
        "description": "The <a4j:outputPanel> component is used to group together components in to update them as a whole, rather than having to specify the components individually.   @author asmirnov@exadel.com",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component. Default value - \"false\""
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "keepTransient",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag to mark all child components to non-transient. If true, all children components will be set to non-transient state and keep in saved components tree. For output in self-renderer region all content ( By default, all content in <f:verbatim> tags and non-jsf elements in facelets, marked as transient - since, self-rendered ajax regions don't plain output for ajax processing )."
          },
          {
            "name": "layout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.OutputPanelLayout)",
            "description": "HTML layout for generated markup. Possible values: \"block\" for generating an HTML <div> element and \"inline\" for generating an HTML <span> element. Default value is \"inline\""
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "param",
        "description": "The <a4j:param> behavior combines the functionality of the JavaServer Faces (JSF) components <f:param> and <f:actionListener>.",
        "attribute": [
          {
            "name": "assignTo",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "EL expression for updatable bean property. This property will be updated if the parent command component performs an actionEvent."
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "The converter attribute can be used to specify how to convert the value before it is submitted to the data model."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the parameter associated with this component."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Value of the parameter associated with this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "noEscape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If set to true, the value will not enclosed within single quotes and there will be no escaping of characters. This allows the use of the value as JavaScript code for calculating value on the client-side. This doesn't work with non-AJAX components."
          }
        ]
      },
      {
        "name": "poll",
        "description": "The <a4j:poll> component allows periodical sending of Ajax requests to the server. It is used for repeatedly updating a page at specific time intervals.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords. Default value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request results in an error"
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Ids of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "enabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Enables/disables polling to the server. Using Expression Language (EL), the enabled attribute can point to a bean property to apply a particular attribute value"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "interval",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Specifies the time in milliseconds between requests. The default for this value is 1000 ms (1 second)"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "ontimer",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the timer counts down, but before the Ajax request is initiated"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          }
        ]
      },
      {
        "name": "push",
        "description": "The <a4j:push> component performs real-time updates on the client side from events triggered at the server side. The events are pushed out to the client through the RichFaces messaging queue (which is bound to Java Messaging Service - JMS). When the <a4j:push> component is triggered by a server event, it can in turn cause Ajax updates and changes.",
        "attribute": [
          {
            "name": "address",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "References the topic on the JMS server that contains the pushed messages"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an error has occurred with the push notifications"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "ondataavailable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a push notification is received"
          },
          {
            "name": "onsubscribed",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when push is subscribed successfully to the topic."
          }
        ]
      },
      {
        "name": "queue",
        "description": "The <a4j:queue> component manages the JSF queue of Ajax requests. It provides additional options for a finer control of request processing.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "ignoreDupResponses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Attribute allows you to ignore an Ajax response produced by a request if the newest 'similar' request is in the queue already. ignoreDupResponses=\"true\" does not cancel the request while it is processed on the server, but just allows avoiding unnecessary updates on the client side if the response isn't actual now"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before DOM is updated"
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an error has occurred during Ajax communications"
          },
          {
            "name": "onrequestqueue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request is added to the queue"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request going through the queue"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specifies the name for the queue, allowing it to be referenced via the name attribute of the attachQueue component"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the request is completed"
          },
          {
            "name": "onrequestdequeue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the request is removed from the queue"
          },
          {
            "name": "onsubmit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request is submitted"
          },
          {
            "name": "requestDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines the time (in ms) the request will be waiting in the queue before it is ready to be sent."
          }
        ]
      },
      {
        "name": "region",
        "description": "The <a4j:region> component specifies a part of the JSF component tree to be processed on the server. The region causes all the a4j and rich Ajax controls to execute: decoding, validating, and updating the model. The region causes these components to execute even if not explicitly declared. As such, processing areas can more easily be marked using a declarative approach.   Regions can be nested, in which case only the parent region of the component initiating the request will be processed.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          }
        ]
      },
      {
        "name": "repeat",
        "description": "The non-visual <a4j:repeat> component is used to iterate through a data model. The component renders child content for every iteration according to the current object data.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher."
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "rows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The number of rows to display, or zero for all remaining rows in the table"
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The attribute provides access to a component state on the client side"
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "status",
        "description": "The <a4j:status> component displays the status of current Ajax requests. The status can be either in progress, complete, or an error is shown after a failed request.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "errorStyleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css class attribute used to style the error text"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request results in an error"
          },
          {
            "name": "onstop",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request stops"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "startStyleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css class attribute used to style the start text"
          },
          {
            "name": "stopStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css style attribute for the stop text"
          },
          {
            "name": "stopText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text shown once the request is complete"
          },
          {
            "name": "errorStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css style attribute for the error text"
          },
          {
            "name": "errorText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text shown when an error has occurred"
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the status component"
          },
          {
            "name": "onstart",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request starts"
          },
          {
            "name": "onsuccess",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the request completes successfully"
          },
          {
            "name": "startStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css style attribute for the start text"
          },
          {
            "name": "startText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text shown after the request has been started and is currently in progress"
          },
          {
            "name": "stopStyleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The css class attribute used to style the stop text"
          }
        ]
      }
    ]
  }
}