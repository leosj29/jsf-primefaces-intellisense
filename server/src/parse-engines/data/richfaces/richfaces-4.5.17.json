{
  "components": {
    "component": [
      {
        "name": "accordion",
        "description": "The <rich:accordion> is a series of panels stacked on top of each other, each collapsed such that only the header of the panel is showing. When the header of a panel is clicked, it is expanded to show the content of the panel. Clicking on a different header will collapse the previous panel and expand the selected one. Each panel contained in a <rich:accordion> component is a <rich:accordionItem> component.",
        "attribute": [
          {
            "name": "activeItem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Holds the active tab name. This name is a reference to the name identifier of the active child <rich:tab> component."
          },
          {
            "name": "cycledSwitching",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Applicable when cycling through the tabs. If \"true\", then when the last tab is active, cycling to next will activate the first tab, if \"false\", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false"
          },
          {
            "name": "height",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The height of the panel"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "itemActiveLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is active"
          },
          {
            "name": "itemChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Occurs on the server side when an item is changed through Ajax using the server mode"
          },
          {
            "name": "itemDisabledHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel header when the panel is disabled"
          },
          {
            "name": "itemDisabledRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is disabled"
          },
          {
            "name": "itemInactiveHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel header when the panel is not active"
          },
          {
            "name": "itemInactiveRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is not active"
          },
          {
            "name": "onbeforeitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Points to the function to perform when before the switchable item is changed"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch mode when a panel is activated. One of: \"client\", \"server\", \"ajax\". Default: \"ajax\""
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the panel"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemActiveHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel header when the panel is active"
          },
          {
            "name": "itemActiveRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is active"
          },
          {
            "name": "itemContentClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A CSS class applied to each of the accordionItem children"
          },
          {
            "name": "itemDisabledLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is disabled"
          },
          {
            "name": "itemHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel header"
          },
          {
            "name": "itemInactiveLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is not active"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Points to the function to perform when the switchable item is changed."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "accordionItem",
        "description": "The <rich:accordionItem> component is a panel for use with the <rich:accordion> component. <rich:accordionItem> components can be added dynamically using iteration models with the <c:forEach> tag.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "header",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides the text on the panel header. The panel header is all that is visible when the accordion item is collapsed.   Alternatively the header facet could be used in place of the header attribute. This would allow for additional styles and custom content to be applied to the tab."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header"
          },
          {
            "name": "headerInactiveClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is inactive"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "leftActiveIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is active"
          },
          {
            "name": "leftInactiveIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is disabled"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onenter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse enters the panel"
          },
          {
            "name": "onheaderdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the header of this element."
          },
          {
            "name": "onheadermousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the header of this element."
          },
          {
            "name": "onleave",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse leaves the panel."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rightDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is disabled"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch mode when a panel is activated. One of: \"client\", \"server\", \"ajax\". Default: \"ajax\""
          },
          {
            "name": "contentClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel content"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "headerActiveClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is active"
          },
          {
            "name": "headerDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is disabled"
          },
          {
            "name": "headerStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS style applied to the header"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "leftDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is not active"
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the panel, used for identifying and manipulating the active panel. If you do not specify a name, the clientId will be used as the name."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onheaderclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the header of this element."
          },
          {
            "name": "onheadermousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the header of this element."
          },
          {
            "name": "onheadermouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the header of this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rightActiveIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is active"
          },
          {
            "name": "rightInactiveIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is not active"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "autocomplete",
        "description": "The <rich:autocomplete> component is an auto-completing input-box with built-in Ajax capabilities. It supports client-side suggestions, browser-like selection, and customization of the look and feel.",
        "attribute": [
          {
            "name": "autocompleteList",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "A collection of suggestions that will be provided to the user"
          },
          {
            "name": "autofill",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Causes the combo-box to fill the text field box with a matching suggestion as the user types"
          },
          {
            "name": "clientFilterFunction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A javascript function used to filter the result list returned from the ajax call to the server. This function should have two parameters; subString(current input value considering tokens) and value (currently iterated item value) and return boolean flag which means if the value satisfies the substring passed. The function will be called for every available suggestion in order to construct a new list of suggestions.  Default: A javascript method called startsWith"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "fetchValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "A value to set in the target input element on a choice suggestion that isn't shown in the suggestion table. It can be used for descriptive output comments or suggestions. If not set, all text in the suggestion row is set as a value"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "layout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Type of the layout encoded using nested components should be defined using layout attribute. Possible values are:   list suggestions wrapped to HTML unordered list div suggestions wrapped with just div element table suggestions are encoded as table rows, column definitions are required in this case  Default: div"
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AutocompleteMode)",
            "description": "Determine how the suggestion list is requested:  client pre-loads data to the client and uses the input to filter the possible suggestions ajax fetches suggestions with every input change using Ajax requests lazyClient  lazy-loads data to the client and uses the input to filter the possible suggestions. The filtering does not start until the input length matches a minimum value. Set the minimum value with the minChars attribute.  cachedAjax  lazy-loads data via Ajax requests when the input length matches a minimum value. Set the minimum value with the minChars attribute. All suggestions are handled on the client until the input prefix is changed, at which point a new request is made based on the new input prefix   Default: cachedAjax"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onlistclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the popup list element."
          },
          {
            "name": "onlistkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onlistkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onlistmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onlistmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "popupClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the content of the popup suggestion element"
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "selectFirst",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean value indicating whether the first suggestion item is selected as the user types Default: true"
          },
          {
            "name": "showButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean value indicating whether to display a button to expand the popup suggestion element Default: false"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "tokens",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Allow a user to enter multiple values separated by specific characters. As the user types, a suggestion will present as normal. When they enter the specified token character, this begins a new suggestion process, and the component will then only use text entered after the token character for suggestions. Make sure that no character defined in tokens is part of any suggestion value. E.g. do not use space as a token if you expect to allow spaces in suggestion values. When tokens defined, they can be naturally separated by space character - input separated by tokens ', ' or ' ,' will be considered as it would be ',' token without any space."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "autocompleteMethod",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "A method which provides a list of suggestions according to a user-provided filtering value"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "inputClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the input element"
          },
          {
            "name": "minChars",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Minimal number of chars in input to activate suggestion popup"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onlistdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onlistkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onlistmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onlistmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onlistmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselectitem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when an item is selected"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "selectedItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the selected suggestion entry"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "calendar",
        "description": "The <rich:calendar> component allows the user to enter a date and time through an in-line or pop-up calendar. The pop-up calendar can navigate through months and years, and its look and feel can be highly customized.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "buttonClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the button element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "buttonIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines icon for the popup button element. The attribute is ignored if the \"buttonLabel\" is set"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "currentDate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Used to define the month and year which will be displayed"
          },
          {
            "name": "datePattern",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to format the date and time strings, according to ISO 8601 (for example, d/M/yy HH:mm a)"
          },
          {
            "name": "dayDisableFunction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The javascript function that enables or disables a day cell"
          },
          {
            "name": "defaultTime",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Defines time that will be used:   to set time when the value is empty to set time when date changes and flag \"resetTimeOnDateSelect\" is true   Default value is \"getDefaultValueOfDefaultTime()\""
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", rendered is disabled. In \"popup\" mode both controls are disabled   Default value is \"false\""
          },
          {
            "name": "firstWeekDay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Determines the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France. Possible values should be integers from 0 to 6, 0 corresponds to Sunday   Default value is \"getDefaultFirstWeekDay()\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "inputClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the input element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "inputStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied to the input element"
          },
          {
            "name": "locale",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Used for locale definition   Default value is \"getDefaultLocale()\""
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AbstractCalendar.Mode)",
            "description": "Valid values: ajax or client   Default value is \"client\""
          },
          {
            "name": "monthLabelsShort",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Attribute that allows to customize short names of the months. Should accept list with the month names"
          },
          {
            "name": "onbeforedateselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before some date cell is selected"
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "ondatemouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved away from the date cell"
          },
          {
            "name": "ondateselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when some date cell is selected"
          },
          {
            "name": "oninputblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the input element loses focus."
          },
          {
            "name": "oninputclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the input element."
          },
          {
            "name": "oninputfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the input element receives focus."
          },
          {
            "name": "oninputkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the input element."
          },
          {
            "name": "oninputmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the input element."
          },
          {
            "name": "oninputmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the input element."
          },
          {
            "name": "oninputmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the input element."
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "popup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", the calendar will be rendered initially as hidden with additional elements for calling as popup   Default value is \"true\""
          },
          {
            "name": "popupStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied to the popup element"
          },
          {
            "name": "preloadDateRangeEnd",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Define the initial range of date which will be loaded to client from dataModel under rendering   Default value is \"getDefaultPreloadBegin(getCurrentDateOrDefault())\""
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "showApplyButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If false ApplyButton should not be shown   Default value is \"false\""
          },
          {
            "name": "showHeader",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If false Calendar's header should not be shown   Default value is \"true\""
          },
          {
            "name": "showWeekDaysBar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If false this bar should not be shown   Default value is \"true\""
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "verticalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the vertical offset between popup element and the conjunction pointDefault value is 0"
          },
          {
            "name": "zindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is \"3\"."
          },
          {
            "name": "boundaryDatesMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "This attribute is responsible for behaviour of dates from the previous and next months which are displayed in the current month. Valid values are \"inactive\" (Default) dates inactive and gray colored, \"scroll\" boundaries work as month scrolling controls, and \"select\" boundaries work in the same way as \"scroll\" but with the date clicked selection   Default value is \"inactive\""
          },
          {
            "name": "buttonDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines disabled icon for the popup button element. The attribute is ignored if the \"buttonLabel\" is set"
          },
          {
            "name": "buttonLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines label for the popup button element. If the attribute is set \"buttonIcon\" and \"buttonIconDisabled\" are ignored"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "dataModel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.CalendarDataModel)",
            "description": "Used to provide data for calendar elements. If data is not provided, all Data Model related functions are disabled"
          },
          {
            "name": "dayClassFunction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The javascript function that determines the CSS style class for each day cell"
          },
          {
            "name": "defaultLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The starting label can be set when in the initial view state. If the initial value is already set through the value attribute, this is displayed instead."
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the direction of the popup. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "enableManualInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" calendar input will be editable and it will be possible to change the date manually. If \"false\" the text field will be \"read-only\", so the value can be changed only from a handle.   Default value is \"false\""
          },
          {
            "name": "horizontalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the horizontal offset between popup element and the conjunction pointDefault value is 0"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "inputSize",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines the size of an input field. Similar to the \"size\" attribute of <h:inputText/>"
          },
          {
            "name": "jointPoint",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the corner attachment point with which the popup should be connected. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "minDaysInFirstWeek",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1. If the minimal days required must be a full week, this method returns 7.   Default value is \"getDefaultMinDaysInFirstWeek()\""
          },
          {
            "name": "monthLabels",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Attribute that allows to customize names of the months. Should accept list with the month names"
          },
          {
            "name": "onbeforecurrentdateselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the current month or year is changed"
          },
          {
            "name": "onbeforetimeselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before time is selected"
          },
          {
            "name": "onclean",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the component is cleaned"
          },
          {
            "name": "oncurrentdateselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the current month or year is changed"
          },
          {
            "name": "ondatemouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved onto the date cell"
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "oninputchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the input field value is changed manually"
          },
          {
            "name": "oninputdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the input element."
          },
          {
            "name": "oninputkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the input element."
          },
          {
            "name": "oninputkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the input element."
          },
          {
            "name": "oninputmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the input element."
          },
          {
            "name": "oninputmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the input element."
          },
          {
            "name": "oninputselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed called when the input field value is selected"
          },
          {
            "name": "ontimeselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after time is selected"
          },
          {
            "name": "popupClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the popup element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "preloadDateRangeBegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Defines the last range of date which will be loaded to client from dataModel under rendering   Default value is \"getDefaultPreloadEnd(getCurrentDateOrDefault())\""
          },
          {
            "name": "readonly",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\". Date and time are not selectable. In \"popup\" mode input is disabled and button is enabled.   Default value is \"false\""
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "resetTimeOnDateSelect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If value is true then calendar should change time to defaultTime for newly-selected dates   Default value is \"false\""
          },
          {
            "name": "showFooter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If false Calendar's footer should not be shown   Default value is \"true\""
          },
          {
            "name": "showInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "\"false\" value for this attribute makes text field invisible. It works only if popupMode=\"true\" If showInput is \"true\" - input field will be shown   Default value is \"true\""
          },
          {
            "name": "showWeeksBar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If false this bar should not be shown   Default value is \"true\""
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "timeZone",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.TimeZone)",
            "description": "Used for current date calculations   Default value is \"getDefaultTimeZone()\""
          },
          {
            "name": "todayControlMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "This attribute defines the mode for \"today\" control. Possible values are \"scroll\", \"select\", \"hidden\"   Default value is \"select\""
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "weekDayLabelsShort",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Attribute that allows to customize short names of the weekdays. Should accept list with the weekday's names."
          }
        ]
      },
      {
        "name": "chart",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onplotclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript handler function for plotclick event called for each series. You can setup handler for particular series only. See series tag attribute onplotclick."
          },
          {
            "name": "plotClickListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Server-side listener for plotclick event."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "hooks",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A set of JavaScript functions to modify the plotting process."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Complementary event for plothover fired when mouse leaves the chart grid."
          },
          {
            "name": "onplothover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript handler function for plothover event for each series. You can setup handler for particular series only. See series tag attribute onplothover."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "zoom",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Attribute define whether zoom is enabled. To reset zoom you can use JS API $('#id').chart('resetZoom') Attribute is currently supported by line chart."
          }
        ]
      },
      {
        "name": "chartLegend",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "position",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AbstractChartLegend.PositionType)",
            "description": "Chart legend position allowed values:  nw - top left sw - bottom left ne - top right (default) se - bottom right"
          },
          {
            "name": "sorting",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AbstractChartLegend.SortingType)",
            "description": "The attribute defines the order of series labels in legend. If not specified the order labels is the same as the order of series in facelet. Allowed values:  ascending descending"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "chartPoint",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "max",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Maximum value of the axis"
          },
          {
            "name": "pad",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "It’s the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border."
          },
          {
            "name": "x",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Value plotted on x-axis."
          },
          {
            "name": "format",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Format for axis ticks (Date series only)"
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Text shown next to axis."
          },
          {
            "name": "min",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Minimum value shown on the axis."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "y",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Value plotted on y-axis."
          }
        ]
      },
      {
        "name": "chartSeries",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.ChartDataModel)",
            "description": "Data passed into chart. If attribute is null, nested <s:point> tags are expected - facelet iteration."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Description of data shown in a legend."
          },
          {
            "name": "onplothover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Mouse over handler event for this series only."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "type",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.ChartDataModel.ChartType)",
            "description": "The attributes define type of a chart. Allowed values:  line bar pie"
          },
          {
            "name": "color",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute define the color of data plotted."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onplotclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript handler for plotclick event for this series only."
          },
          {
            "name": "plotClickListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Server-side listener for plotclick event fired by this series only. Not implemented yet."
          },
          {
            "name": "symbol",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AbstractChartSeries.SymbolType)",
            "description": "Point symbol for line chart Allowed values:  circle square cross triangle diamond"
          }
        ]
      },
      {
        "name": "chartXAxis",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "max",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Maximum value of the axis"
          },
          {
            "name": "pad",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "It’s the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border."
          },
          {
            "name": "format",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Format for axis ticks (Date series only)"
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Text shown next to axis."
          },
          {
            "name": "min",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Minimum value shown on the axis."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "chartYAxis",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "max",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Maximum value of the axis"
          },
          {
            "name": "pad",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "It’s the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border."
          },
          {
            "name": "format",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Format for axis ticks (Date series only)"
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Text shown next to axis."
          },
          {
            "name": "min",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Minimum value shown on the axis."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "collapsiblePanel",
        "description": "The <rich:collapsiblePanel> component is a collapsible panel that shows or hides content when the header bar is activated. It is a simplified version of <rich:togglePanel> component.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "header",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides the text on the panel header. The panel header is all that is visible when the panel is collapsed.   Alternatively the header facet could be used in place of the header attribute. This would allow for additional styles and custom content to be applied to the tab."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "leftExpandedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is expanded"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rightExpandedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is expanded"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "bodyClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel content. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "expanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "When true, the panel is expanded, when false, the panel is collapsed"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel header. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "leftCollapsedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the panel header when the panel is collapsed"
          },
          {
            "name": "onbeforeswitch",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the panel state is switched"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onswitch",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the panel state is switched"
          },
          {
            "name": "rightCollapsedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the panel header when the panel is collapsed"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch mode when a panel is activated. One of: \"client\", \"server\", \"ajax\". Default: \"ajax\""
          },
          {
            "name": "toggleListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "A Server-side MethodExpression to be called when the panel is toggled"
          }
        ]
      },
      {
        "name": "collapsibleSubTable",
        "description": "The <rich:collapsibleSubTable> component acts as a child element to a <rich:dataTable> component. The <rich:collapsibleSubTable> component iterates through the child collections in the currently iterated object to create master-detail tables.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute.If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored."
          },
          {
            "name": "columnFooterClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the rows of the subfooter of the table"
          },
          {
            "name": "columnHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the rows of the subheader of the table"
          },
          {
            "name": "expandMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specifies what mode will be used to expand the sub table: client (default), ajax, server, none (can't be expanded)"
          },
          {
            "name": "filterVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row."
          },
          {
            "name": "firstColumnFooterClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the subheader of the table"
          },
          {
            "name": "footerCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the footer of the table"
          },
          {
            "name": "footerFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the footer of the table"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this column."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher"
          },
          {
            "name": "onrowclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over table row."
          },
          {
            "name": "onrowkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over table row."
          },
          {
            "name": "onrowkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over table row."
          },
          {
            "name": "onrowmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within table row."
          },
          {
            "name": "onrowmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto table row."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute.If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "sortMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.SortMode)",
            "description": "Specifies when table will be sorted according to one column (single) or multiple columns (multi). Default value - \"multi\""
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope"
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "cellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the table"
          },
          {
            "name": "columnFooterCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the subfooter of the table"
          },
          {
            "name": "columnHeaderCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the subheader of the table"
          },
          {
            "name": "columnHeaderFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the subheader of the table"
          },
          {
            "name": "expanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Determines the state of sub table: true (expanded), false (collapsed)"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "firstRowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the table"
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this column."
          },
          {
            "name": "headerCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the header of the table"
          },
          {
            "name": "headerFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the header of the table"
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "noDataLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label to be displayed when table contains no rows (no data provided)."
          },
          {
            "name": "onrowdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over table row."
          },
          {
            "name": "onrowkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over table row."
          },
          {
            "name": "onrowmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over table row."
          },
          {
            "name": "onrowmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from table row."
          },
          {
            "name": "onrowmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over table row."
          },
          {
            "name": "rowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the table cells"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "rows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The number of rows to display, or zero for all remaining rows in the table"
          },
          {
            "name": "sortPriority",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Collection)",
            "description": "Comma-separated list of column names determining priority of row sorting."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "collapsibleSubTableToggler",
        "description": "The <rich:collapsibleSubTableToggler> component provides a toggle control for the user to expand and collapse sub-tables.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "collapsedLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label of the toggler when the sub-table is collapsed"
          },
          {
            "name": "expandedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon of the toggler when the sub-table is expanded"
          },
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Specifies table which will toggler control"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "collapsedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon of the toggler when the sub-table is collapsed"
          },
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The mouse event which toggler reacts to toggle the sub-table: click (default), dblclick, mousedown, mouseup, etc."
          },
          {
            "name": "expandedLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label of the toggler when the sub-table is expanded"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          }
        ]
      },
      {
        "name": "column",
        "description": "The <rich:column> component facilitates columns in a table. It supports merging columns and rows, sorting, filtering, and customized skinning.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "colspan",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Corresponds to the HTML colspan attribute."
          },
          {
            "name": "filter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.Filter)",
            "description": "Provides Filter instance which determines if given row value will be displayed."
          },
          {
            "name": "filterExpression",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Defines EL expression which returns true if given row should be displayed (EL expressions should use variable defined in filterVar attribute of dataTable)."
          },
          {
            "name": "filterValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Defines current filtering value."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this column."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Allows customizing column name in column visibility control in rich:extendedDataTable (showColumnControl)"
          },
          {
            "name": "rowspan",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Corresponds to the HTML rowspan attribute."
          },
          {
            "name": "sortOrder",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SortOrder)",
            "description": "Defines order which will be used for sorting column: unsorted (default), ascending, descending."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute defines width of column."
          },
          {
            "name": "breakRowBefore",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" next column begins from the first row."
          },
          {
            "name": "comparator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Comparator)",
            "description": "Defines value binding to the comparator that is used to compare the values."
          },
          {
            "name": "filterConverterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The message to be displayed when the filter expression is not able to be evaluated using the provided filter value."
          },
          {
            "name": "filterType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines current filter type. Possible values: string, custom. If custom is used, no filter box is created, you are responsible for creating your own filter input. Default: string"
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this column."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "sortBy",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Defines a bean property which is used for sorting of a column."
          },
          {
            "name": "sortType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines current sorting type. Possible values: string, custom. If custom is used, no sorting controls are created, you are responsible for creating your own. Default: string"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "columnGroup",
        "description": "The <rich:columnGroup> component combines multiple columns in a single row to organize complex parts of a table. The resulting effect is similar to using the breakRowBefore attribute of the <rich:column> component, but is clearer and easier to follow in the source code.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          }
        ]
      },
      {
        "name": "componentControl",
        "description": "The <rich:componentControl> behavior allows JavaScript API functions to be called on target components. The functions are called after defined events are triggered on the component to with the <rich:componentControl> behavior is attached. Initialization variants and activation events can be customized, and parameters can be passed to the target component.",
        "attribute": [
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of JavaScript event property (click, change, etc.) of parent component that triggers the behavior. If the event attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component"
          },
          {
            "name": "operation",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function of JavaScript API that will be invoked on the target components (selected with target or selector attributes)."
          },
          {
            "name": "target",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Comma-separated list of component IDs of components which will be the operation fired on. (Alternatively you can use selector attribute)."
          },
          {
            "name": "onbeforeoperation",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript invoked just before the operation will be invoked on target component."
          },
          {
            "name": "selector",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "jQuery selector (CSS selector with jQuery extensions) which finds target component which will be the operation fired on."
          }
        ]
      },
      {
        "name": "contextMenu",
        "description": "The <rich:contextMenu> component is used for creating a hierarchical context menu that are activated on events like onmouseover, onclick etc. The component can be applied to any element on the page.",
        "attribute": [
          {
            "name": "attached",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If the value of the 'attached' attribute is true, the component is attached to the component, specified in the 'target' attribute or to the parent component, if 'target' is not defined. Default value is 'true'."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "horizontalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the horizontal offset between popup element and the conjunction pointDefault value is 0"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ongrouphide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a child menuGroup is hidden"
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines an event on the parent element to display the menu Default value is 'contextmenu'"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "target",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client identifier of the component or id of the existing DOM element that is a source for a given event. If target is defined, the event is attached on the client. If both attached and target attributes are defined, and attribute attached has value 'false', it is considered to have higher priority."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the direction of the popup. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "hideDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay (in ms) between losing focus and menu closing Default value is \"300\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Mode)",
            "description": "Sets the submission mode for all menu items of the menu except those where this attribute redefined. Possible value are 'ajax','client' and 'server'  Default value is 'server'"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "ongroupshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a child menuGroup is expanded"
          },
          {
            "name": "onitemclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a menu item is clicked"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "popupWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets minimum width for all lists that will appear."
          },
          {
            "name": "showDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay (in ms) between observing the showEvent and menu opening Default value is \"50\""
          },
          {
            "name": "sticky",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" the menu will stay visible when the mouse is moved away from it. Default value: \"false\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "targetSelector",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The jQuery selector used to filter which child DOM elements of the target/parent to which the contextMenu will be attached."
          },
          {
            "name": "verticalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the vertical offset between popup element and the conjunction pointDefault value is 0"
          }
        ]
      },
      {
        "name": "dataGrid",
        "description": "The <rich:dataGrid> component is used to arrange data objects in a grid. Values in the grid can be updated dynamically from the data model, and Ajax updates can be limited to specific rows. The component supports header, footer, and caption facets.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "columns",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Number of columns to display"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this column."
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute.If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored."
          },
          {
            "name": "elements",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Number of elements displayed in the grid"
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this column."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher"
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute.If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "dataScroller",
        "description": "The <rich:dataScroller> component is used for navigating through multiple pages of tables or grids.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "fastControls",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.DataScrollerControlsMode)",
            "description": "The attribute specifies the visibility of fastControls. Possible values are: \"show\" (controls are always visible ). \"hide\" (controls are hidden. \"auto\" (unnecessary controls are hidden). Default value is \"show\"."
          },
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Component ID of the table whose data is scrolled"
          },
          {
            "name": "lastPageMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The attribute to control whether last page of datascroller shows \"rows\" number of items or just the rest. Possible values are \"full\" and \"short\". Default value is \"short\"."
          },
          {
            "name": "maxPages",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Maximum quantity of pages. Default value is \"10\"."
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "page",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "If page >= 1 then it's a page number to show"
          },
          {
            "name": "renderIfSinglePage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If renderIfSinglePage is \"true\" then datascroller is displayed on condition that the data hold on one page. Default value is \"true\"."
          },
          {
            "name": "scrollListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "No Description"
          },
          {
            "name": "stepControls",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.DataScrollerControlsMode)",
            "description": "The attribute specifies the visibility of stepControls. Possible values are: \"show\" (controls are always visible ). \"hide\" (controls are hidden. \"auto\" (unnecessary controls are hidden). Default value is \"show\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "boundaryControls",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.DataScrollerControlsMode)",
            "description": "The attribute specifies the visibility of boundaryControls. Possible values are: \"show\" (controls are always visible ). \"hide\" (controls are hidden. \"auto\" (unnecessary controls are hidden). Default value is \"show\"."
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "fastStep",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The attribute indicates pages quantity to switch onto when fast scrolling is used. Default value is \"1\". @return"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "dataTable",
        "description": "The <rich:dataTable> component is used to render a table, including the table's caption. It works in conjunction with the <rich:column> and <rich:columnGroup> components to list the contents of a data model.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "cellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the table"
          },
          {
            "name": "columnFooterCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the subfooter of the table"
          },
          {
            "name": "columnHeaderCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the subheader of the table"
          },
          {
            "name": "columnHeaderFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the subheader of the table"
          },
          {
            "name": "filterVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row."
          },
          {
            "name": "firstColumnFooterClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the subheader of the table"
          },
          {
            "name": "footerCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the footer of the table"
          },
          {
            "name": "footerFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the footer of the table"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this column."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher"
          },
          {
            "name": "noDataLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label to be displayed when table contains no rows (no data provided)."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onrowdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over table row."
          },
          {
            "name": "onrowkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over table row."
          },
          {
            "name": "onrowmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over table row."
          },
          {
            "name": "onrowmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from table row."
          },
          {
            "name": "onrowmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over table row."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute.If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "sortMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.SortMode)",
            "description": "Specifies when table will be sorted according to one column (single) or multiple columns (multi). Default value - \"multi\""
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          },
          {
            "name": "captionClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component caption"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute.If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored."
          },
          {
            "name": "columnFooterClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the rows of the subfooter of the table"
          },
          {
            "name": "columnHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the rows of the subheader of the table"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "firstRowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the table"
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this column."
          },
          {
            "name": "headerCellClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the cells of the header of the table"
          },
          {
            "name": "headerFirstClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to the first row of the header of the table"
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onrowclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over table row."
          },
          {
            "name": "onrowkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over table row."
          },
          {
            "name": "onrowkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over table row."
          },
          {
            "name": "onrowmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within table row."
          },
          {
            "name": "onrowmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto table row."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the table cells"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "rows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The number of rows to display, or zero for all remaining rows in the table"
          },
          {
            "name": "sortPriority",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Collection)",
            "description": "Comma-separated list of column names determining priority of row sorting."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          }
        ]
      },
      {
        "name": "dragIndicator",
        "description": "The <rich:dragIndicator> component defines a graphical element to display under the mouse cursor during a drag-and-drop operation.",
        "attribute": [
          {
            "name": "acceptClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the indicator which are applied when a drop is accepted"
          },
          {
            "name": "draggingClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component. Corresponds to the HTML \"class\" attribute."
          },
          {
            "name": "rejectClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the indicator which are applied when a drop is rejected"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "dragSource",
        "description": "The <rich:dragSource> component can be added to a component to indicate it is capable of being dragged by the user. The dragged item can then be dropped into a compatible drop area, designated using the <rich:dropTarget> component.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dragOptions",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A set of options for jQuery.draggable widget"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A drag zone type that is used for zone definition, which elements can be accepted by a drop zone"
          },
          {
            "name": "dragIndicator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Component ID of a dragIndicator component that is used as drag pointer during the drag operation"
          },
          {
            "name": "dragValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Data to be sent to a drop zone after a drop event"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "dropDownMenu",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the direction of the popup. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "hideDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay (in ms) between losing focus and menu closing Default value is \"300\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text label for the menu item. Alternatively, use the label facet to define content for the label"
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Mode)",
            "description": "Sets the submission mode for all menu items of the menu except those where this attribute redefined. Possible value are 'ajax','client' and 'server'  Default value is 'server'"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "ongroupshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a child menuGroup is expanded"
          },
          {
            "name": "onitemclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a menu item is clicked"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "popupWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets minimum width for all lists that will appear."
          },
          {
            "name": "showDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay (in ms) between observing the showEvent and menu opening Default value is \"50\""
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "horizontalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the horizontal offset between popup element and the conjunction pointDefault value is 0"
          },
          {
            "name": "jointPoint",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the corner attachment point with which the popup should be connected. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ongrouphide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a child menuGroup is hidden"
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines an event on the parent element to display the menu Default value is 'contextmenu'"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "verticalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the vertical offset between popup element and the conjunction pointDefault value is 0"
          }
        ]
      },
      {
        "name": "dropTarget",
        "description": "The <rich:dropTarget> component can be added to a component so that the component can accept dragged items. The dragged items must be defined with a compatible drop type for the <rich:dragSource> component.",
        "attribute": [
          {
            "name": "acceptedTypes",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "A list of drag zones types, which elements are accepted by a drop zone"
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "dropListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "MethodExpression representing an action listener method that will be notified after drop operation. The expression must evaluate to a public method that takes an DropEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until the Invoke Application phase."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "dropValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Data to be processed after a drop event"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          }
        ]
      },
      {
        "name": "editor",
        "description": "The <rich:editor> component is used for creating a WYSIWYG editor on a page.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "height",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The hieght of the editor"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondirty",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called immediately after the editor content has been changed"
          },
          {
            "name": "oninit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called once the editor is initialized and ready to be handle user interaction"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the editor"
          },
          {
            "name": "config",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "Detailed configuration of editor in JSON format"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called on blur event when editor content has been changed after previous focus"
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Used to switch the editor into a read-only mode."
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "skin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Set the skin of the richfaces editor. The only skin available by default is \"moono\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "toolbar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to change the configuration of the toolbar's button set. There are two configurations available: basic (default), full (enables all of the features).  It is also possible to define a custom toolbar using the CKEditor toolbar configuration in a config facet   Default is basic"
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          }
        ]
      },
      {
        "name": "extendedDataTable",
        "description": "The <rich:extendedDataTable> component builds on the functionality of the <rich:dataTable> component, adding features such as scrolling for the table body (both horizontal and vertical), Ajax loading for vertical scrolling, frozen columns, row selection, and rearranging of columns. It also supports all the basic table features such as sorting, filtering, and paging using the <rich:dataScroller> component.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute.If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "frozenColumns",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Determines how many columns should not be vertically scrollable (should be \"frozen\")."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher"
          },
          {
            "name": "noDataLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label to be displayed when table contains no rows (no data provided)."
          },
          {
            "name": "onbeforeselectionchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the selection is changed."
          },
          {
            "name": "onready",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the EDT has been initialized, either after a page load, and an ajax update."
          },
          {
            "name": "onrowdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over table row."
          },
          {
            "name": "onrowkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over table row."
          },
          {
            "name": "onrowmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over table row."
          },
          {
            "name": "onrowmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from table row."
          },
          {
            "name": "onrowmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over table row."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the table cells"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "rows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The number of rows to display, or zero for all remaining rows in the table"
          },
          {
            "name": "selectionMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.SelectionMode)",
            "description": "Defines selection mode for the table: none, single (only one row can be selected), multiple (Ctrl/Shift keys are used for multi-selection), multipleKeyboardFree (clicks are used for multi-selection). Default value - \"multiple\""
          },
          {
            "name": "sortMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.model.SortMode)",
            "description": "Specifies when table will be sorted according to one column (single) or multiple columns (multi). Default value - \"multi\""
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "clientRows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Use to switch Extended Data Table to AJAX lazy-loading mode. Specify number of rows rows to be loaded with one request. If this attribute is set to \"0\", all rows are loaded. (Default value: 0)"
          },
          {
            "name": "columnsOrder",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String[])",
            "description": "Determines the order in which the columns should be rendered, left to right. The Strings are the ids of the columns."
          },
          {
            "name": "filterVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row."
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this column."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this column."
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onrowclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over table row."
          },
          {
            "name": "onrowkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over table row."
          },
          {
            "name": "onrowkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over table row."
          },
          {
            "name": "onrowmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within table row."
          },
          {
            "name": "onrowmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto table row."
          },
          {
            "name": "onselectionchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the selection is changed."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute.If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "selection",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Collection)",
            "description": "The collection of keys for currently selected table rows (generated from data model by rowKeyConverter)."
          },
          {
            "name": "showColumnControl",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" a menu for controlling column visibility will be added to the table. Requires the table to have a header. The column names can be customized with name attribute on rich:column. Default value - \"false\"."
          },
          {
            "name": "sortPriority",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Collection)",
            "description": "Comma-separated list of column names determining priority of row sorting."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tableState",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "ValueBinding pointing at a property of a String to hold table state"
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "fileUpload",
        "description": "The <rich:fileUpload> component allows the user to upload files to a server. It features multiple uploads, progress bars, restrictions on file types, and restrictions on sizes of the files to be uploaded.",
        "attribute": [
          {
            "name": "acceptedTypes",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines comma separated list of file extensions accepted by component. The format of the file extension can be \"png\" or \".png\", the second format will filter extensions in the dialog window. The component does not provide any feedback when rejecting file. For introducing feedback for rejection, use ontyperejected parameter."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "clearLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label displayed for the Clear link"
          },
          {
            "name": "deleteLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label displayed for the Delete link"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "listHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines height of file list.   Default value is \"210px\"."
          },
          {
            "name": "maxFilesQuantity",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Integer)",
            "description": "Defines maximum number of files allowed to be uploaded. After a number of files in the list equals to the value of this attribute, \"Add\" button disappears and nothing could be uploaded even if you clear the whole list. In order to upload files again you should rerender the component. (Negative numbers means no limits; default value -1)."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclear",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file is cleared"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an error has occurred during Ajax communications"
          },
          {
            "name": "onfilesubmit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file is submitted"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "ontyperejected",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file does not meet the conditions stated by acceptedTypes parameter."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "serverErrorLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label displayed when a file upload fails due to a server error."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "uploadLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label for the Upload button."
          },
          {
            "name": "addLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label for the Add button."
          },
          {
            "name": "clearAllLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label for the Clear button."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "doneLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label displayed when a file is successfully uploaded."
          },
          {
            "name": "fileUploadListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "A listener function on the server side after each file is uploaded. The listener should process files as required, such as storing them in the session/db/filesystem/ directory. The component itself does not store uploaded files, so if the listener is not implemented they are not stored anywhere"
          },
          {
            "name": "immediateUpload",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" upload stats immediately after file selection   Default is \"false\""
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "maxFileSize",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to long)",
            "description": "Defines the maximum allowed size of a file. Files exceeding the size will not be added in the component. Default value is equal to 'org.richfaces.fileUpload.maxRequestSize' context parameter if it is set, otherwise 0 (no limit)."
          },
          {
            "name": "noDuplicate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" duplicate file uploads are prevented   Default is \"false\""
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onfileselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file is selected"
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onsizerejected",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file exceeds the allowed size defined by maxFileSize parameter or 'org.richfaces.fileUpload.maxRequestSize' context parameter."
          },
          {
            "name": "onuploadcomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a file upload is complete"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "sizeExceededLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The label displayed when a file exceeds the size limit."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "focus",
        "description": "Focus component allows to set focus based on validation of components or alternatively it can preserve focus on currently focused form input.   Focus can be bound to form (in case of placement to h:form) or to whole view (when placed outside of forms) - in latter case, all forms will be managed by one Focus. There can be at most one Focus per form. When there is one view-scoped Focus and form defines own Focus, form-scoped Focus settings will be used.   Focus is applied each time the component is rendered - for each full page submit and for each partial page request (in case of ajaxRendered=true). Alternatively, you can use JavaScript API: applyFocus() function will immediately cause.",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether focus state should be updated during each AJAX request automatically. (default: true)"
          },
          {
            "name": "delayed",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether focus should not be applied after initial page load, but will need to be triggered by JavaScript function from Focus API: applyFocus() or via re-rendering (postback)."
          },
          {
            "name": "preserve",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether focus should be preserved on last focused input before request was done (default: false)"
          },
          {
            "name": "validationAware",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines if focus should respect validation of inputs.   If true, only invalid form fields will be focused when focus applied.   (default: true)"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "graphValidator",
        "description": "The <rich:graphValidator> component is used to wrap a set of input components related to one object. The object defined by the <rich:graphValidator> component can then be completely validated. The validation includes all object properties, even those which are not bound to the individual form components. Validation performed in this way allows for cross-field validation in complex forms.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "summary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Message summary will be used in case in case of validation error when no other message is provided."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Bean EL reference to be validated"
          },
          {
            "name": "groups",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Class[])",
            "description": "The list of fully-qualified names (FQNs) of classes determining bean-validation groups to be validated."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The validator-id of validator used to process validation of the provided bean (Default value: org.richfaces.BeanValidator)"
          }
        ]
      },
      {
        "name": "hashParam",
        "description": "The <r:hashParam> component allows client-side parameters to be grouped into a hash map. The hash map can then be passed to the client JavaScript API functions of any RichFaces component.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the javascript hash property which this hash should be assigned to (can be used as nested hashParameter) or null if no property should be used (can be used simply as function parameter)."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          }
        ]
      },
      {
        "name": "hotKey",
        "description": "The <rich:hotKey> component allows registering hot keys on the page or particular elements and defining client side processing functions for these keys.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Event handler to be fired when registered key sequence is pressed down"
          },
          {
            "name": "preventDefault",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "The switch which prevents native browser actions (prevents default) to be taken and stops event propagation up to the tree. Default value - \"true\""
          },
          {
            "name": "selector",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The jQuery selector (subset of CSS selectors defined by W3C) of the DOM root from which key events should be handled. When no value provided, events are handled for whole document. ID selectors starting with hash sign (#) will be expanded from componentId to clientId form. (e.g. #component is expanded to #form:component in case that component is nested in form)"
          },
          {
            "name": "enabledInInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "The switch which enables handling events coming from input. Default value - \"false\""
          },
          {
            "name": "key",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The key sequence to be pressed, single keys separated by + (e.g. 'ctrl+a'), more key sequences separated by space. Special keys are accepted as follows: backspace, tab, return, shift, ctrl, alt, pause, capslock, esc, space, pageup, pagedown, end, home, left, up, right, down, insert, del, numlock, scroll, meta, f1, f2, ..., f12"
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Event handler to be fired when registered key sequence is pressed up"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "inplaceInput",
        "description": "The <rich:inplaceInput> component allows information to be entered in-line in blocks of text, improving readability of the text. Multiple input regions can be navigated with keyboard navigation. The component has three functional states: the view state, where the component displays its initial setting, such as \"click to edit\"; the edit state, where the user can input text; and the \"changed\" state, where the new value for the component has been confirmed but can be edited again if required.",
        "attribute": [
          {
            "name": "activeClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is active. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "changedClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when the value of this element is changed. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "editEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to specify the event that switches the component to the edit state Default is \"click\""
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "oninputdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "showControls",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" is set, buttons for confirming or canceling are added to the component"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "defaultLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to set the display text when value is undefined"
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "inputWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the input element"
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "oninputclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "oninputselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "saveOnBlur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the changes should apply when the focus is lost. Default value - \"true\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          }
        ]
      },
      {
        "name": "inplaceSelect",
        "description": "The <rich:inplaceSelect> component is similar to the <rich:inplaceInput> component, except that the <rich:inplaceSelect> component uses a drop-down selection box to enter text instead of a regular text field. Changes can be rendered either in-line or for the whole block, and inputs can be focused with keyboard navigation. The component is based on the JSF UISelectOne component, so all the standard rules for value definition, processing, conversion, and validation apply.",
        "attribute": [
          {
            "name": "activeClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element when it is in the \"active\" state. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "changedClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element when it is in the \"changed\" state. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "editEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The event on which to switch the component to the edit state Default is \"click\""
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "listHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The height of the list element (in pixels)"
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "oninputdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the input element."
          },
          {
            "name": "oninputkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the input element."
          },
          {
            "name": "oninputmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the input element."
          },
          {
            "name": "oninputmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the input element."
          },
          {
            "name": "oninputmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the input element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onlistdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the list element."
          },
          {
            "name": "onlistkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the list element."
          },
          {
            "name": "onlistkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the list element."
          },
          {
            "name": "onlistmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the list element."
          },
          {
            "name": "onlistmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the list element."
          },
          {
            "name": "onlistshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element is shown"
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselectitem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when an item is selected"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "saveOnSelect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "When \"false\" do not save the item as the new control value when the user selects an item from the drop-down list"
          },
          {
            "name": "showControls",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" is set, buttons for confirming or canceling are added to the component"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "defaultLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to set the display text when value is undefined"
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "inputWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the input element"
          },
          {
            "name": "listClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "listWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the list element (in pixels)"
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "oninputclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the input element."
          },
          {
            "name": "oninputkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the input element."
          },
          {
            "name": "oninputkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the input element."
          },
          {
            "name": "oninputmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the input element."
          },
          {
            "name": "oninputmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the input element."
          },
          {
            "name": "oninputselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when text in the input element is selected"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onlistclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the list element."
          },
          {
            "name": "onlisthide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element is hidden"
          },
          {
            "name": "onlistkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the list element."
          },
          {
            "name": "onlistmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the list element."
          },
          {
            "name": "onlistmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the list element."
          },
          {
            "name": "onlistmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the list element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "openOnEdit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"false\" do not switch the component to the edit state on \"click\""
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "saveOnBlur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the changes should apply when the focus is lost. Default value - \"true\""
          },
          {
            "name": "selectItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          }
        ]
      },
      {
        "name": "inputNumberSlider",
        "description": "The <r:inputNumberSlider> component provides a slider for changing numerical values. Optional features include control arrows to step through the values, a tool-tip to display the value while sliding, and a text field for typing the numerical value which can then be validated against the slider's range.",
        "attribute": [
          {
            "name": "accesskey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "decreaseClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the decrease arrow element"
          },
          {
            "name": "delay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay in pressed increase/decrease arrows in miliseconds. <br />Default value is \"200\"."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "handleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the handle element"
          },
          {
            "name": "handleType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.InputNumberSliderHandleType)",
            "description": "Tells how handle should look like. Possible values: arrow (default), bar"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "increaseSelectedClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the increase arrow element selected"
          },
          {
            "name": "inputPosition",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.InputNumberSliderInputPosition)",
            "description": "If \"right\", the InputText Box would be rendered on the right side of the ruler. If \"left\", the InputText Box would be rendered on the left side of the ruler. If \"top\", the InputText Box would be rendered on the top of the ruler. If \"bottom\", the InputText Box would be rendered on the bottom of the ruler."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "maxValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute to set an \"end\" value.  Default value is \"100\""
          },
          {
            "name": "minValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute to set the \"start\" value.  Default value is \"0\""
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "showArrows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "False value for this attribute makes increase/decrease arrows invisible.  Default value is \"false\"."
          },
          {
            "name": "showInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "False value for this attribute makes text a field invisible.  Default value is \"true\"."
          },
          {
            "name": "step",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Parameter that determines a step between the nearest values while using a handle.  Default value is \"1\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "trackClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the track slider element"
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "decreaseSelectedClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the decrease arrow element selected"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "enableManualInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If set to \"false\" this attribute makes the text field \"read-only\", so the value can be changed only from a handle. <br />Default value is \"true\"."
          },
          {
            "name": "handleSelectedClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the handle element selected"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "increaseClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the increase arrow element"
          },
          {
            "name": "inputClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component input field"
          },
          {
            "name": "inputSize",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Similar to the \"Size\" attribute of h:inputText.  Default value is \"3\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "maxlength",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Integer)",
            "description": "Specifies the maximum number of digits that could be entered into the input field. The maximum number is unlimited by default. If entered value exceeds the value specified in \"maxValue\" attribute than the slider takes a maximum value position."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "showBoundaryValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If the min/max values are shown on the right/left borders of a control.  Default value is \"true\"."
          },
          {
            "name": "showTooltip",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\"the current value is shown in the tooltip when a handle control is in a \"dragged\" state.  Default value is \"true\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "tooltipClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the tooltip element of the handle"
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          }
        ]
      },
      {
        "name": "inputNumberSpinner",
        "description": "The <r:inputNumberSpinner> component is a single-line input field with buttons to increase and decrease a numerical value. The value can be changed using the corresponding directional keys on a keyboard, or by typing into the field.",
        "attribute": [
          {
            "name": "accesskey",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "cycled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" after the current value reaches the border value it is reversed to another border value after next increasing/decreasing. In other case possibilities of next increasing (or decreasing) will be locked.  Default value is \" true \"."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "inputClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component input field"
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "maxValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute to set an \"end\" value.  Default value is \"100\""
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondownclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the 'Down' button is clicked"
          },
          {
            "name": "oninputclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the component input field is clicked"
          },
          {
            "name": "oninputkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed down in the input field"
          },
          {
            "name": "oninputkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is released in the input field"
          },
          {
            "name": "oninputmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved within the input field"
          },
          {
            "name": "oninputmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved onto the input field"
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "enableManualInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If set to \"false\" this attribute makes the text field \"read-only\", so the value can be changed only from a handle. <br />Default value is \"true\"."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "inputSize",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute specifies the initial length of input in characters.  Default value is \"10\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "minValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute to set the \"start\" value.  Default value is \"0\""
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "oninputdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the component input field is double-clicked"
          },
          {
            "name": "oninputkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed and released in the input field"
          },
          {
            "name": "oninputmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is pressed down in the input field"
          },
          {
            "name": "oninputmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved away from the input field"
          },
          {
            "name": "oninputmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is released"
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onupclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the 'Up' button is clicked"
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "step",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Parameter that determines the step between nearest values while using controls.  Default value is \"1\""
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          }
        ]
      },
      {
        "name": "itemChangeListener",
        "description": "",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ItemChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Value binding expression that evaluates to an object that implements ItemChangeListener."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Fully qualified Java class name of an ItemChangeListener to be created and registered."
          }
        ]
      },
      {
        "name": "jQuery",
        "description": "The <rich:jQuery> component applies styles and custom behavior to both JSF (JavaServer Faces) objects and regular DOM (Document Object Model) objects. It uses the jQuery JavaScript framework to add functionality to web applications. This component is for use as a facelet tag. See the <rich:jQuery> EL function for access to the jQuery library via EL.",
        "attribute": [
          {
            "name": "attachType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.JQueryAttachType)",
            "description": "The type of the attachment - decides about how is operation attached to the selected elements: \"bind\" (default - binds to the selected elements immediately, elements which could be matched by selector in the future won't be considered - offers a best performance), \"live\" (attach an event handler for all elements which match the current selector, now and in the future - may cause a slow performance), \"one\" (attach a handler to an event for the elements, the handler is executed at most once per element)"
          },
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The DOM event which should be the query bound to."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of a function that will be generated to execute a query."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "timing",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.JQueryTiming)",
            "description": "The timing of the jQuery attachment: \"domready\" (when DOM is ready), \"immediate\" (immediately after component client-side code is processed). This attribute is ignored when attribute \"name\" is provided. Default value - \"domready\""
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "query",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The query string that is executed for a given selector."
          },
          {
            "name": "selector",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The jQuery selector (subset of CSS selectors defined by W3C) of the element to which the jQuery function should be applied. ID selectors starting with hash sign (#) will be expanded from componentId to clientId form. (e.g. #component is expanded to #form:component in case that component is nested in form)"
          }
        ]
      },
      {
        "name": "list",
        "description": "The <rich:list> component renders a list of items. The list can be an numerically ordered list, an un-ordered bullet-point list, or a data definition list. The component uses a data model for managing the list items, which can be updated dynamically.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "first",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "A zero-relative row number of the first row to display"
          },
          {
            "name": "iterationStatusVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the iteration status in a Request scope"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onrowdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over table row."
          },
          {
            "name": "onrowkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over table row."
          },
          {
            "name": "onrowmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over table row."
          },
          {
            "name": "onrowmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from table row."
          },
          {
            "name": "onrowmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over table row."
          },
          {
            "name": "rowClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the list rows"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "rows",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "The number of rows to display, or zero for all remaining rows in the table"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onrowclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over table row."
          },
          {
            "name": "onrowkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over table row."
          },
          {
            "name": "onrowkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over table row."
          },
          {
            "name": "onrowmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within table row."
          },
          {
            "name": "onrowmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto table row."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute. If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope"
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.ListType)",
            "description": "The type of the list: unordered (default), ordered, definitions"
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating"
          }
        ]
      },
      {
        "name": "menuGroup",
        "description": "The <rich:menuGroup> component represents an expandable sub-menu in a menu control. The <rich:menuGroup> component can contain a number of <rich:menuItem> components, or further nested <rich:menuGroup> components.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the direction of the popup. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "horizontalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the horizontal offset between popup element and the conjunction pointDefault value is 0"
          },
          {
            "name": "iconDisabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon to be displayed with the menu item when it is disabled"
          },
          {
            "name": "jointPoint",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the corner attachment point with which the popup should be connected. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "icon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon to be displayed with the menu item"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text label for the menu item. Alternatively, use the label facet to define content for the label"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "verticalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the vertical offset between popup element and the conjunction pointDefault value is 0"
          }
        ]
      },
      {
        "name": "menuItem",
        "description": "The <rich:menuItem> component represents a single item in a menu control. The <rich:menuItem> component can be also be used as a seperate component without a parent menu component, such as on a toolbar.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "icon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon to be displayed with the menu item"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The text label for the menu item. Alternatively, use the label facet to define content for the label Default is server"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "iconDisabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon to be displayed with the menu item when it is disabled"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Mode)",
            "description": "Determines how the menu item requests are submitted. Valid values:  server, the default setting, submits the form normally and completely refreshes the page. ajax performs an Ajax form submission, and re-renders elements specified with the render attribute.  client causes the action and actionListener items to be ignored, and the behavior is fully defined by the nested components instead of responses from submissions"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "menuSeparator",
        "description": "The <rich:menuSeparator> component represents a separating divider in a menu control.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          }
        ]
      },
      {
        "name": "message",
        "description": "The <rich:message> component renders a single FacesMessage message instance added for the component. The appearance of the message can be customized, and tool-tips can be used for further information about the message.",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component. Default value - \"true\""
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "for",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "escape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "messages",
        "description": "The <rich:messages> components works similarly to the <rich:message> component, but can display all the validation messages added for the current view instead of just a single message.",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component. Default value - \"true\""
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "escape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "globalOnly",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is \"false\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "notify",
        "description": "The <rich:notify> component serves for advanced user interaction, using notification boxes to give the user instant feedback on what's happening within the application. Each time this component is rendered, a floating notification box is displayed in the selected corner of the browser screen.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "escape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "nonblocking",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the notification should fade when hovering and allow to click elements behind"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showShadow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the shadow under notification should be displayed"
          },
          {
            "name": "stayTime",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Integer)",
            "description": "Defines how long will notification stay displayed after appearing"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "detail",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Detail of the notification message"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "nonblockingOpacity",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "Defines opacity of non-blocking notifications"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "showCloseButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the close button should be displayed"
          },
          {
            "name": "stack",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines which stack will be notification bound to"
          },
          {
            "name": "sticky",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, notifications have to be closed with the close button (overrides @showCloseButton)"
          },
          {
            "name": "summary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Summary of the notification message"
          }
        ]
      },
      {
        "name": "notifyMessage",
        "description": "The <rich:notifyMessage> component is built on top of <rich:notify>, the difference is in usage. The <rich:notifyMessage> component displays FacesMessages associated with a given component, similar to <rich:message>: one notification is displayed for first FacesMessage in the stack that is risen either programatically or during conversion/validation of the component. The severity of the message determines the color and icon of the resulting notification.",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component. Default value - \"true\""
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "for",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "nonblockingOpacity",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "Defines opacity of non-blocking notifications"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "showCloseButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the close button should be displayed"
          },
          {
            "name": "showShadow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the shadow under notification should be displayed"
          },
          {
            "name": "stack",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines which stack will be notification bound to"
          },
          {
            "name": "sticky",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, notifications have to be closed with the close button (overrides @showCloseButton)"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "escape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "nonblocking",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the notification should fade when hovering and allow to click elements behind"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "stayTime",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Integer)",
            "description": "Defines how long will notification stay displayed after appearing"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "notifyMessages",
        "description": "The <rich:notifyMessages> component is the same as the <rich:notifyMessage> component, but each of the available messages generates one notification.",
        "attribute": [
          {
            "name": "ajaxRendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component. Default value - \"true\""
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "nonblocking",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the notification should fade when hovering and allow to click elements behind"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "stayTime",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Integer)",
            "description": "Defines how long will notification stay displayed after appearing"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "escape",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "globalOnly",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is \"false\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "nonblockingOpacity",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Double)",
            "description": "Defines opacity of non-blocking notifications"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "showCloseButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the close button should be displayed"
          },
          {
            "name": "showShadow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether the shadow under notification should be displayed"
          },
          {
            "name": "stack",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines which stack will be notification bound to"
          },
          {
            "name": "sticky",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, notifications have to be closed with the close button (overrides @showCloseButton)"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "notifyStack",
        "description": "Notifications emited by <rich:notify>, <rich:notifyMessage> and <rich:notifyMessages> are displayed in top-right corner of the screen by default.  It is <rich:notifyStack> which defines where messages will appear and handles their stacking.   Stack also provides way how to remove messages from screen - when stack is re-rendered, current notifications are destroyed, freeing place for new notifications.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "position",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.CornerPosition)",
            "description": "Defines the position of the start of stack: topLeft, topRight (default), bottomLeft, bottomRight"
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.StackingDirection)",
            "description": "Defines in which direction will be notification stacked: horizontal or vertical (default)"
          },
          {
            "name": "method",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.StackingMethod)",
            "description": "Defines where new notifications will be added: first (start of the list, default) or last (end of the list)."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          }
        ]
      },
      {
        "name": "orderingList",
        "description": "The <rich:orderingList> is a component for ordering items in a list (client-side).",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "collectionType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.List, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself."
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "downBottomText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-to-bottom button"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the header element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "itemLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Label to be displayed to the user for the corresponding option."
          },
          {
            "name": "listHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The height of the list element (in pixels)"
          },
          {
            "name": "maxListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The maximum height of the item list (in pixels)."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onlistclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the list element ."
          },
          {
            "name": "onlistkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the list element ."
          },
          {
            "name": "onlistkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the list element ."
          },
          {
            "name": "onlistmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the list element ."
          },
          {
            "name": "onlistmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the list element ."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "selectItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "upTopText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-to-top button"
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "caption",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text placed above the list of items"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the columns of the list elements. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "downText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-down button"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "itemValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Value to be returned to the server if the corresponding option is selected by the user. Used with the var attribute to build the selectItems"
          },
          {
            "name": "listWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the list element (in pixels)"
          },
          {
            "name": "minListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The minimum height of the item list (in pixels)."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onlistdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the list element ."
          },
          {
            "name": "onlistkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the list element ."
          },
          {
            "name": "onlistmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the list element ."
          },
          {
            "name": "onlistmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the list element ."
          },
          {
            "name": "onlistmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the list element ."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "upText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-up button"
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Expose the value from the value attribute under this request scoped key so that it may be referred to in EL for the value of other attributes."
          }
        ]
      },
      {
        "name": "panel",
        "description": "The <rich:panel> component is a bordered panel with an optional header.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "header",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides the text on the panel header."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "bodyClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel body."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel header."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "panelMenu",
        "description": "The <rich:panelMenu> component is used in conjunction with <rich:panelMenuItem> and <rich:panelMenuGroup> to create an expanding, hierarchical menu. The <rich:panelMenu> component's appearance can be highly customized, and the hierarchy can stretch to any number of sub-levels.",
        "attribute": [
          {
            "name": "activeItem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Holds the active panel name. This name is a reference to the name identifier of the active child <rich:panelMenuItem> or <rich:panelMenuGroup> component."
          },
          {
            "name": "bubbleSelection",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true (default), selection of any item of group will cause selection of groups - predecessors - in the hierarchy. If false, only given item is selected."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "expandSingle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true (default), only one group can be expanded at the time. If false, many groups can be expanded."
          },
          {
            "name": "groupCollapsedLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for collapsed panel menu groups"
          },
          {
            "name": "groupDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to disabled panel menu groups"
          },
          {
            "name": "groupDisabledRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for disabled panel menu groups"
          },
          {
            "name": "groupExpandedRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for expanded panel menu groups"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Method expression referencing a method that will be called when an ItemChangeEvent has been broadcast for the listener."
          },
          {
            "name": "itemDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to disables panel menu items."
          },
          {
            "name": "itemDisabledRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for panel menu items"
          },
          {
            "name": "itemMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.PanelMenuMode)",
            "description": "The mode user for selecting items: client, ajax (default), server"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "topGroupClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to top-level panel menu groups"
          },
          {
            "name": "topGroupCollapsedRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for collapsed top-level panel menu groups"
          },
          {
            "name": "topGroupDisabledLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for disabled top-level panel menu groups"
          },
          {
            "name": "topGroupExpandedLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for expanded top-level panel menu groups"
          },
          {
            "name": "topItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to top-level panel menu items"
          },
          {
            "name": "topItemDisabledLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for disabled top-level panel menu items"
          },
          {
            "name": "topItemLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for top-level panel menu items"
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the panel menu in pixels."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "collapseEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The mouse event used for collapsing."
          },
          {
            "name": "expandEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The mouse event used for expansion."
          },
          {
            "name": "groupClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to panel menu groups"
          },
          {
            "name": "groupCollapsedRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for collapsed panel menu groups"
          },
          {
            "name": "groupDisabledLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for disabled panel menu groups"
          },
          {
            "name": "groupExpandedLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for expanded panel menu groups"
          },
          {
            "name": "groupMode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.PanelMenuMode)",
            "description": "Mode used for expanding/collapsing groups: client (default), ajax, server"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until the Invoke Application phase."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel menu items."
          },
          {
            "name": "itemDisabledLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for disabled panel menu items"
          },
          {
            "name": "itemLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for panel menu items"
          },
          {
            "name": "itemRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for right menu items"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "topGroupCollapsedLeftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The left icon for collapsed top-level panel menu groups"
          },
          {
            "name": "topGroupDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to disabled top-level panel menu groups"
          },
          {
            "name": "topGroupDisabledRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for disabled top-level panel menu groups"
          },
          {
            "name": "topGroupExpandedRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for expanded top-level panel menu groups"
          },
          {
            "name": "topItemDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to disabled top-level panel menu items"
          },
          {
            "name": "topItemDisabledRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for disabled top-level panel menu items"
          },
          {
            "name": "topItemRightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The right icon for top-level panel menu items"
          }
        ]
      },
      {
        "name": "panelMenuGroup",
        "description": "The <rich:panelMenuGroup> component defines a group of <rich:panelMenuItem> components inside a <rich:panelMenu>.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "collapseEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The mouse event used for collapsing."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "expanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Boolean)",
            "description": "Defines whenever this group is expanded"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "leftCollapsedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu group label when the group is collapsed"
          },
          {
            "name": "leftExpandedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu group label when the group is expanded"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of this component"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbeforeselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the menu group is selected"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncollapse",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the menu group is collapsed"
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onswitch",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the menu group is switched (toggled)"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rightDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu group label when the group is disabled"
          },
          {
            "name": "rightIconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the right icon of the panel menu group."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel menu group when it is disabled."
          },
          {
            "name": "expandEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The mouse event used for expansion."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "leftDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu group label when the group is disabled"
          },
          {
            "name": "leftIconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the left icon of the panel menu group."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.PanelMenuMode)",
            "description": "Mode used for expanding/collapsing of this group: default value is inherited from panelMenu"
          },
          {
            "name": "onbeforecollapse",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the menu group is collapsed"
          },
          {
            "name": "onbeforeexpand",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the menu group is expanded"
          },
          {
            "name": "onbeforeswitch",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the menu group is switched (toggled)"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onexpand",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the menu group is expanded"
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the menu group is selected"
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rightCollapsedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the menu group label when the group is collapsed"
          },
          {
            "name": "rightExpandedIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu group label when the group is expanded"
          },
          {
            "name": "selectable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Boolean)",
            "description": "Defines whenever the group is selectable. Default: false."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          }
        ]
      },
      {
        "name": "panelMenuItem",
        "description": "The <rich:panelMenuItem> component represents a single item inside a <rich:panelMenuGroup> component, which is in turn part of a <rich:panelMenu> component.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the panel menu item when it is disabled."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "leftIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu item label"
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of this component"
          },
          {
            "name": "onbeforeselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the menu group is selected"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the menu group is selected"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rightIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the menu item label"
          },
          {
            "name": "selectable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Boolean)",
            "description": "Defines whenever the item is selectable. Default: true."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "leftDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the left of the menu item when it is disabled"
          },
          {
            "name": "leftIconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the left icon of the panel menu item."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.PanelMenuMode)",
            "description": "Mode used for selecting of this item: default value is inherited from panelMenu"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rightDisabledIcon",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon displayed on the right of the menu item when it is disabled"
          },
          {
            "name": "rightIconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the right icon of the panel menu item."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          }
        ]
      },
      {
        "name": "panelToggleListener",
        "description": "",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an PanelToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Value binding expression that evaluates to an object that implements PanelToggleListener."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Fully qualified Java class name of an PanelToggleListener to be created and registered."
          }
        ]
      },
      {
        "name": "pickList",
        "description": "The <rich:pickList> is a component for selecting items from a list. Additionally, it allows for the selected items to be ordered (client-side). From the client side perspective, items are added/removed from the source list, and removed/added to the target list.",
        "attribute": [
          {
            "name": "addAllText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the add-all button"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the columns of the list elements. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "downText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-down button"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "listHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The height of the list element (in pixels)"
          },
          {
            "name": "maxListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The maximum height of the item list (in pixels)."
          },
          {
            "name": "onadditems",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when items are removed from the source list, and added to the target list"
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onremoveitems",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when items are removed from the target list, and added to the source list"
          },
          {
            "name": "onsourceclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the source list element ."
          },
          {
            "name": "onsourcefocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the source list element receives focus."
          },
          {
            "name": "onsourcekeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the source list element ."
          },
          {
            "name": "onsourcemousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the source list element ."
          },
          {
            "name": "onsourcemouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the source list element ."
          },
          {
            "name": "onsourcemouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the source list element ."
          },
          {
            "name": "ontargetclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the target list element ."
          },
          {
            "name": "ontargetfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the target list element receives focus."
          },
          {
            "name": "ontargetkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the target list element ."
          },
          {
            "name": "ontargetmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the target list element ."
          },
          {
            "name": "ontargetmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the target list element ."
          },
          {
            "name": "ontargetmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the target list element ."
          },
          {
            "name": "removeAllText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the remove-all button"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "sourceCaption",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text placed above the source list of items"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "switchByDblClick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "if \"true\", then double-clicking an item moves it from one list to another Default is \"true\""
          },
          {
            "name": "upText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-up button"
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Expose the value from the value attribute under this request scoped key so that it may be referred to in EL for the value of other attributes."
          },
          {
            "name": "addText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the add button"
          },
          {
            "name": "collectionType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.List, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself."
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "downBottomText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-to-bottom button"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the header element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "keepSourceOrder",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" the items in the source list will remain sorted when items are added back to it. Default is \"false\""
          },
          {
            "name": "listWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the list element (in pixels)"
          },
          {
            "name": "minListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The minimum height of the item list (in pixels)."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onsourceblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the source list element loses focus."
          },
          {
            "name": "onsourcedblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the source list element ."
          },
          {
            "name": "onsourcekeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the source list element ."
          },
          {
            "name": "onsourcekeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the source list element ."
          },
          {
            "name": "onsourcemousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the source list element ."
          },
          {
            "name": "onsourcemouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the source list element ."
          },
          {
            "name": "ontargetblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the target list element loses focus."
          },
          {
            "name": "ontargetdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the target list element ."
          },
          {
            "name": "ontargetkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the target list element ."
          },
          {
            "name": "ontargetkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the target list element ."
          },
          {
            "name": "ontargetmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the target list element ."
          },
          {
            "name": "ontargetmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the target list element ."
          },
          {
            "name": "orderable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", then the target list is orderable, and the ordering controls are displayed Default is \"false\""
          },
          {
            "name": "removeText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the remove button"
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "selectItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchByClick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "if \"true\", then clicking an item moves it from one list to another Default is \"false\""
          },
          {
            "name": "targetCaption",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text placed above the target list of items"
          },
          {
            "name": "upTopText",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The text to display in the move-to-top button"
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          }
        ]
      },
      {
        "name": "placeholder",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "selector",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The jQuery selector used to filter which child DOM elements will be a placeholder attached to."
          },
          {
            "name": "value",
            "required": true,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          }
        ]
      },
      {
        "name": "popupPanel",
        "description": "The <rich:popupPanel> component provides a pop-up panel or window that appears in front of the rest of the application. The <rich:popupPanel> component functions either as a modal window which blocks interaction with the rest of the application while active, or as a non-modal window. It can be positioned on the screen, dragged to a new position by the user, and re-sized.",
        "attribute": [
          {
            "name": "autosized",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" popupPanel will be auto-sized according to the content. Default value is \"false\"."
          },
          {
            "name": "controlsClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component controls"
          },
          {
            "name": "followByScroll",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whenever the popup will follow the scrolling of the screen. Default value is \"true\"."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns one or more space-separated CSS class names to the component header"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "maxHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines max height of component."
          },
          {
            "name": "minHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines min height of component. Default value is \"10\". If the value is less then 10, a \"IllegalArgumentException\" exception is thrown."
          },
          {
            "name": "modal",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", popupPanel will be modal - it will block the main screen from any operation."
          },
          {
            "name": "onbeforehide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed before the popup disappears."
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "onmaskcontextmenu",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button for context menu is clicked over the popupPanel mask."
          },
          {
            "name": "onmaskmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the popupPanel mask."
          },
          {
            "name": "onmaskmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the popupPanel mask."
          },
          {
            "name": "onmaskmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the popupPanel mask."
          },
          {
            "name": "onresize",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when the modal panel is resized"
          },
          {
            "name": "overlapEmbedObjects",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" popupPanel creates iframe to overlap embed objects like PDF on a page. Default value is \"false\"."
          },
          {
            "name": "resizeable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" there is possibility to change component size. Default value is \"true\"."
          },
          {
            "name": "shadowOpacity",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "HTML CSS class attribute of element for pop-up suggestion content"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "top",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute defines Y position of component left-top corner. Default value is \"auto\"."
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines width of component. Default value is \"200\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "domElementAttachment",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines the DOM element, which stacking context will assimilate the popupPanel. Possible values: \"body\", \"form\", \"parent\". Default value is \"body\"."
          },
          {
            "name": "header",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Assigns the header for the popupPanel."
          },
          {
            "name": "height",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines height of component. Default value is \"300\"."
          },
          {
            "name": "left",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Attribute defines X position of component left-top corner. Default value is \"auto\"."
          },
          {
            "name": "maxWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines max width of component."
          },
          {
            "name": "minWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute defines min width of component. Default value is \"10\". If the value is less then 10, a \"IllegalArgumentException\" exception is thrown."
          },
          {
            "name": "moveable",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" there is possibility to move component. Default value is \"true\"."
          },
          {
            "name": "onbeforeshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed before this component is shown."
          },
          {
            "name": "onmaskclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the popupPanel mask."
          },
          {
            "name": "onmaskdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the popupPanel mask."
          },
          {
            "name": "onmaskmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the popupPanel mask."
          },
          {
            "name": "onmaskmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the popupPanel mask."
          },
          {
            "name": "onmove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the modal panel is moved"
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "shadowDepth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Pop-up shadow depth for suggestion content"
          },
          {
            "name": "show",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" value for this attribute makes a modal panel opened as default. Default value is \"false\""
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "trimOverlayedElements",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Defines whether to trim or not elements inside popupPanel. Default value is \"true\""
          },
          {
            "name": "zindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is \"100\"."
          }
        ]
      },
      {
        "name": "progressBar",
        "description": "The <rich:progressBar> component displays a progress bar to indicate the status of a process to the user. It can update either through Ajax or on the client side, and the look and feel can be fully customized.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "enabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Enables/disables polling. Default value is \"true\"."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "interval",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Interval (in ms) for call poll requests. Default value 1000 ms (1 sec)"
          },
          {
            "name": "maxValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Max value, after which complete state should be rendered. Default value is \"100\"."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The mode for updating the progress bar, can be one of:  ajax The progress bar updates in the same way as the <a4j:poll> component. The <rich:progressBar> component repeatedly polls the server for the current progress value. client The progress bar must be explicitly updated on the client side through the JavaScript API.  Default is \"ajax\""
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onfinish",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when progress is finished"
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "progressClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the progress bar element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "finishClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when before progress finishes. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "initialClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when before progress starts. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "label",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Defines a simple label instead of rendering children component"
          },
          {
            "name": "minValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Min value when initial state should be rendered. Default value is \"0\"."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "remainingClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the remaining part of the progress bar. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Sets the current value of the progress"
          }
        ]
      },
      {
        "name": "select",
        "description": "The <rich:select> component provides a drop-down list box for selecting a single value from multiple options. The <rich:select> component can be configured as a combo-box, where it will accept typed input. The component also supports keyboard navigation. The <rich:select> component functions similarly to the JSF UISelectOne component.   The <rich:select> can optionally be used in an auto-completing mode, where the values in the drop-down list are provided dynamically using either the autocompleteMethod or autocompleteList attributes. If these attributes are omitted, the component operates in the traditional non-auto-completing mode. Refer to the individual attribute documentation to see which attributes are applicable only with an auto-completing select list.",
        "attribute": [
          {
            "name": "autocompleteList",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "A collection of suggestions that will be provided to the user"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "converter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "defaultLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Used to set the display text when value is undefined"
          },
          {
            "name": "enableManualInput",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" Allows the user to type into a text field to scroll through or filter the list. Implicitly true when using an auto-completing select list.   Default is \"false\""
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "itemLabel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Label to be displayed to the user for the corresponding option. Used only with an auto-completing select, where the list of items comes from either the autocompleteList or autocompleteMethod attributes."
          },
          {
            "name": "listClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list element. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "listWidth",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The width of the list element (in pixels)"
          },
          {
            "name": "minChars",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Minimal number of chars in input to activate suggestion popup"
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.AutocompleteMode)",
            "description": "Determine how the suggestion list is requested:  client pre-loads data to the client and uses the input to filter the possible suggestions ajax fetches suggestions with every input change using Ajax requests lazyClient  lazy-loads data to the client and uses the input to filter the possible suggestions. The filtering does not start until the input length matches a minimum value. Set the minimum value with the minChars attribute.  cachedAjax  lazy-loads data via Ajax requests when the input length matches a minimum value. Set the minimum value with the minChars attribute. All suggestions are handled on the client until the input prefix is changed, at which point a new request is made based on the new input prefix   Default: cachedAjax"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request. (Only valid in autocomplete mode)."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated. (Only valid in autocomplete mode)."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onlistclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the list element."
          },
          {
            "name": "onlisthide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element is hidden"
          },
          {
            "name": "onlistkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over the list element."
          },
          {
            "name": "onlistmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the list element."
          },
          {
            "name": "onlistmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from the list element."
          },
          {
            "name": "onlistmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the list element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "selectItemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request. (Only valid in autocomplete mode)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "autocompleteMethod",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "A method which provides a list of suggestions according to a user-provided filtering value"
          },
          {
            "name": "clientFilterFunction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A javascript function used to filter the list of items in the select popup"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "itemValue",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Value to be returned to the server if the corresponding option is selected by the user. Used only with an auto-completing select, where the list of items comes from either the autocompleteList or autocompleteMethod attributes."
          },
          {
            "name": "listHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The height of the list element (in pixels)"
          },
          {
            "name": "maxListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The maximum height of the list"
          },
          {
            "name": "minListHeight",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The minimum height ot the list"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated. (Only valid in autocomplete mode)."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onlistdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the list element."
          },
          {
            "name": "onlistkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over the list element."
          },
          {
            "name": "onlistkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over the list element."
          },
          {
            "name": "onlistmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the list element."
          },
          {
            "name": "onlistmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto the list element."
          },
          {
            "name": "onlistshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the list element is shown"
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselectitem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when an item is selected"
          },
          {
            "name": "required",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "selectFirst",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" as the user types to narrow the list, automatically select the first element in the list. Applicable only when enableManualInput is \"true\".   Default is \"true\""
          },
          {
            "name": "showButton",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "When \"true\" display a button to expand the popup list   Default is \"true\""
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "validator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Expose the values from either the autocompleteList or autocompleteMethod attributes under a request scoped key so that the values may be referred to in an EL expression while rendering this component. When using auto-completing select component this attribute is required."
          }
        ]
      },
      {
        "name": "tab",
        "description": "The <rich:tab> component represents an individual tab inside a <rich:tabPanel> component, including the tab's content. Clicking on the tab header will bring its corresponding content to the front of other tabs.",
        "attribute": [
          {
            "name": "action",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "contentClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the panel content"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "headerActiveClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is active"
          },
          {
            "name": "headerDisabledClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is disabled"
          },
          {
            "name": "headerStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS style applied to the header"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onheaderclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over the header of this element."
          },
          {
            "name": "onheadermousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over the header of this element."
          },
          {
            "name": "onheadermouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over the header of this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch type for this toggle panel: client, ajax (default), server"
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.el.MethodBinding)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "bypassUpdates",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input."
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. Default value - \"false\""
          },
          {
            "name": "header",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The header label of the tab"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header"
          },
          {
            "name": "headerInactiveClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The CSS class applied to the header when this panel is inactive"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the tab, used for identifying and manipulating the active panel"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onenter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse enters the panel"
          },
          {
            "name": "onheaderdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over the header of this element."
          },
          {
            "name": "onheadermousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within the header of this element."
          },
          {
            "name": "onleave",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse leaves the panel."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "tabPanel",
        "description": "The <rich:tabPanel> component provides a set of tabbed panels for displaying one panel of content at a time. The tabs can be highly customized and themed. Each tab within a <rich:tabPanel> container is a <rich:tab> component.",
        "attribute": [
          {
            "name": "activeItem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Holds the active tab name. This name is a reference to the name identifier of the active child <rich:tab> component."
          },
          {
            "name": "cycledSwitching",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Applicable when cycling through the tabs. If \"true\", then when the last tab is active, cycling to next will activate the first tab, if \"false\", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false"
          },
          {
            "name": "headerAlignment",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.HeaderAlignment)",
            "description": "The alignment of the tab panel header: left (default), right"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Occurs on the server side when an item is changed through Ajax using the server mode"
          },
          {
            "name": "onbeforeitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the item is changed."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch mode when a panel is activated. One of: \"client\", \"server\", \"ajax\". Default: \"ajax\""
          },
          {
            "name": "tabContentClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) for tab content"
          },
          {
            "name": "tabHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) for tab headers."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "headerPosition",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.HeaderPosition)",
            "description": "The position of the header: top (default), bottom"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the item is changed."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "tabActiveHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) for active tab header."
          },
          {
            "name": "tabDisabledHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) for disabled tab headers."
          },
          {
            "name": "tabInactiveHeaderClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) for inactive tab headers."
          }
        ]
      },
      {
        "name": "toggleControl",
        "description": "The <rich:toggleControl> behavior can be attached to any interface component, whether inside or outside the controlled panel itself. It works with a <rich:togglePanel> component to switch between different <rich:togglePanelItem> components.",
        "attribute": [
          {
            "name": "disableDefault",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Boolean)",
            "description": "If \"true\", disable the default action of the parent component"
          },
          {
            "name": "targetItem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The next <rich:togglePanelItem> to switch to"
          },
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The event on which to toggle the target panel"
          },
          {
            "name": "targetPanel",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The <rich:togglePanel> to switch when this <rich:toggleControl> is not a child of a <rich:togglePanel>"
          }
        ]
      },
      {
        "name": "togglePanel",
        "description": "The <rich:togglePanel> component is used as a base for the other switchable components, the <rich:accordion> component and the <rich:tabPanel> component. It provides an abstract switchable component without any associated markup. As such, the <rich:togglePanel> component could be customized to provide a switchable component when neither an accordion component or a tab panel component is appropriate.",
        "attribute": [
          {
            "name": "activeItem",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Holds the active panel name. This name is a reference to the name identifier of the active child <rich:togglePanelItem> component."
          },
          {
            "name": "cycledSwitching",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Applicable when cycling through the tabs. If \"true\", then when the last tab is active, cycling to next will activate the first tab, if \"false\", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Occurs on the server side when an item is changed through Ajax using the server mode"
          },
          {
            "name": "onbeforeitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the item is changed."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch mode when a panel is activated. One of: \"client\", \"server\", \"ajax\". Default: \"ajax\""
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onitemchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the item is changed."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "togglePanelItem",
        "description": "The <rich:togglePanelItem> component is a switchable panel for use with the <rich:togglePanel> component. Use the <rich:togglePanelItem> component to define the content for a panel using nested components. Switching between <rich:togglePanelItem> components is handled by the <rich:toggleControl> behavior.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "name",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The name of the panel, used for identifying and manipulating the active panel. If you do not specify a name, the clientId will be used as the name."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onleave",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse leaves the panel."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onenter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The function to perform when the mouse enters the panel"
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "switchType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The switch type for this toggle panel: client, ajax (default), server"
          }
        ]
      },
      {
        "name": "toolbar",
        "description": "The <rich:toolbar> component is a horizontal toolbar. Any JavaServer Faces (JSF) component can be added to the toolbar.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemSeparator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A separator between items on a bar. Possible values are \"none\", \"line\", \"square\", \"disc\" and \"grid\". Default value is \"none\"."
          },
          {
            "name": "onitemclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an item is clicked"
          },
          {
            "name": "onitemkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed down over the element"
          },
          {
            "name": "onitemkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is released"
          },
          {
            "name": "onitemmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved within an item"
          },
          {
            "name": "onitemmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved onto an item"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "width",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A width of a bar that can be defined in pixels or as percentage.  Default value is \"100%\"."
          },
          {
            "name": "height",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A height of a bar in pixels. If a height is not defined, a bar height depends of the \"headerFontSize\" skin parameter."
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when the item elements are rendered."
          },
          {
            "name": "itemStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when the item element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "onitemdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an item is double-clicked"
          },
          {
            "name": "onitemkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed and released over an item"
          },
          {
            "name": "onitemmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is pressed down over an item"
          },
          {
            "name": "onitemmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved away from an item"
          },
          {
            "name": "onitemmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is released over an item"
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          }
        ]
      },
      {
        "name": "toolbarGroup",
        "description": "The <rich:toolbarGroup> component is a child component of the <rich:toolbar> component. The <rich:toolbarGroup> component is used to group a number of items together on a toolbar.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "itemClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when the item elements are rendered."
          },
          {
            "name": "itemStyle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when the item element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "onitemclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an item is clicked"
          },
          {
            "name": "onitemkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed down over the element"
          },
          {
            "name": "onitemkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is released"
          },
          {
            "name": "onitemmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved within an item"
          },
          {
            "name": "onitemmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved onto an item"
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "itemSeparator",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A separator between items on a bar. Possible values are \"none\", \"line\", \"square\", \"disc\" and \"grid\". Default value is \"none\"."
          },
          {
            "name": "location",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Location of the toolbar items in the parent toolbar. Can be one of \"left\" or \"right\" Default is \"left\""
          },
          {
            "name": "onitemdblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an item is double-clicked"
          },
          {
            "name": "onitemkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a key is pressed and released over an item"
          },
          {
            "name": "onitemmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is pressed down over an item"
          },
          {
            "name": "onitemmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a pointer is moved away from an item"
          },
          {
            "name": "onitemmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when a mouse button is released over an item"
          }
        ]
      },
      {
        "name": "tooltip",
        "description": "The <rich:tooltip> component provides an informational tool-tip. The tool-tip can be attached to any control and is displayed when hovering the mouse cursor over the control.",
        "attribute": [
          {
            "name": "attached",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If the value of the \"attached\" attribute is \"true\", a component is attached to the parent component; if \"false\", component does not listen to activating browser events, but could be activated externally. Default value is \"true\""
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "direction",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the direction of the popup. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "hideDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay in milliseconds before tooltip will be hidden. Default value is \"0\""
          },
          {
            "name": "horizontalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the horizontal offset between pop-up list and mouse pointer. Default value is \"10\""
          },
          {
            "name": "jointPoint",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.Positioning)",
            "description": "Set the corner attachment point with which the popup should be connected. Possible values are:auto, topLeft, topRight, bottomLeft, bottomRight, autoLeft, autoRight, topAuto, bottomAutoDefault value is auto"
          },
          {
            "name": "layout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.TooltipLayout)",
            "description": "Block/inline mode flag. Possible value are: \"inline\" or \"block\". Default value is \"inline\". Tooltip will contain div/span elements respectively."
          },
          {
            "name": "mode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.TooltipMode)",
            "description": "Controls the way of data loading to a tooltip. May have following values: \"client\" (default) and \"ajax\""
          },
          {
            "name": "onbeforehide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed before the popup disappears."
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onhide",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup disappears."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed after the popup is shown."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Event that triggers the tooltip. Default value is \"mouseenter\""
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "target",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Component ID of the target component or \"null\" if the component should be attached to the parent component."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "zindex",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is \"1000\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "followMouse",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\" tooltip should follow the mouse while it moves over the parent element. Default value is \"true\""
          },
          {
            "name": "hideEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Event that triggers the tooltip disappearance. Default value is \"mouseleave\""
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbeforeshow",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side code executed before this component is shown."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "showDelay",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Delay in milliseconds before tooltip will be displayed. Default value is \"0\""
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "verticalOffset",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to int)",
            "description": "Sets the vertical offset between pop-up list and mouse pointer. Default value is \"10\""
          }
        ]
      },
      {
        "name": "tree",
        "description": "The <rich:tree> component provides a hierarchical tree control. Each <rich:tree> component typically consists of <rich:treeNode> child components. The appearance and behavior of the tree and its nodes can be fully customized.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "handleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node handles."
          },
          {
            "name": "iconCollapsed",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for collapsed node."
          },
          {
            "name": "iconLeaf",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for component leaves."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until the Invoke Application phase."
          },
          {
            "name": "labelClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node labels."
          },
          {
            "name": "limitRender",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", render only those ids specified in the \"render\" attribute, forgoing the render of the auto-rendered panels"
          },
          {
            "name": "nodeType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Determines which treeNode should be used for rendering. Should contain EL expressions which uses request-scoped variable with name defied in attribute 'var'. If not set a default treeNode will be created."
          },
          {
            "name": "onbeforenodetoggle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the node is toggled."
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onnodetoggle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the node is toggled."
          },
          {
            "name": "render",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"render\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywords"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "selection",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.util.Collection)",
            "description": "The collections of selected nodes."
          },
          {
            "name": "selectionType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The type of type of the selection - ajax (default), client, server."
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "toggleListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "MethodExpression representing an tree node toggle listener method that will be notified when the tree node is toggled. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "toggleType",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to org.richfaces.component.SwitchType)",
            "description": "The type of type of the node toggling - ajax (default), client, server."
          },
          {
            "name": "value",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Points to the data model"
          },
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "execute",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "IDs of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\", \"@region\" may be specified in the identifier list. Some components make use of additional keywordsDefault value is \"@region\" which resolves to this component if no region is present."
          },
          {
            "name": "iconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node icons."
          },
          {
            "name": "iconExpanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for expanded node."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "keepSaved",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "nodeClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree nodes."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbeforeselectionchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the selection is changed."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onselectionchange",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the selection is changed."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowKeyVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the row key in a Request scope."
          },
          {
            "name": "selectionChangeListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Method expression referencing a method that will be called when an TreeSelectionChangeEvent has been broadcast for the listener."
          },
          {
            "name": "stateVar",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Provides access to the state in a Request scope."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "toggleNodeEvent",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Client-side event used for toggling tree nodes (click, dblclick, etc.)"
          },
          {
            "name": "useDefaultNode",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "When \"true\" a default treeNode will be created for nodes in the dataModel that do not match any existing treeNode. Default value - \"false\"."
          },
          {
            "name": "var",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "A request-scope attribute via which the data object for the current row will be used when iterating."
          }
        ]
      },
      {
        "name": "treeModelAdaptor",
        "description": "",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "leaf",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Determines if tree node generated by model is leaf. Should contain EL expression which uses request-scoped variable with name defied in tree attribute 'var'."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "nodes",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "EL expression pointing to nodes which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated. (In case of treeModelRecursiveAdaptor, nodes are defined recursively, starting with roots and continuing with inner nodes. EL expression should then use request-scoped variable with name defied in tree attribute 'var' to point to inner nodes recursively and return null or empty map/collection for leafs.)"
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          }
        ]
      },
      {
        "name": "treeModelRecursiveAdaptor",
        "description": "The  component iterates through recursive collections in order to populate a tree with hierarchical nodes, such as for a file system with multiple levels of directories and files.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "leaf",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Determines if tree node generated by model is leaf. Should contain EL expression which uses request-scoped variable with name defied in tree attribute 'var'."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "rowKeyConverter",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.convert.Converter)",
            "description": "Converter for a row key object"
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "nodes",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "EL expression pointing to nodes which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated. (In case of treeModelRecursiveAdaptor, nodes are defined recursively, starting with roots and continuing with inner nodes. EL expression should then use request-scoped variable with name defied in tree attribute 'var' to point to inner nodes recursively and return null or empty map/collection for leafs.)"
          },
          {
            "name": "roots",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "EL expression pointing to top-level nodes (roots) which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated."
          }
        ]
      },
      {
        "name": "treeNode",
        "description": "The  component is a child component of the  component. It represents nodes in the parent tree. The appearance and functionality of each tree node can be customized.",
        "attribute": [
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.faces.component.UIComponent)",
            "description": "The value binding expression used to wire up this component to a component property of a JavaBean class"
          },
          {
            "name": "expanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Determines if this tree node is expanded. When EL expression used, it should use request-scoped variable with name defied in tree attribute 'var' which points to current node."
          },
          {
            "name": "iconClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node icons."
          },
          {
            "name": "iconExpanded",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for expanded node."
          },
          {
            "name": "id",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "labelClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node labels."
          },
          {
            "name": "onbeforetoggle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the node is toggle."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "toggleListener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "MethodExpression representing an tree node toggle listener method that will be notified when the tree node is toggled. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "handleClass",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied to the tree node handles."
          },
          {
            "name": "iconCollapsed",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for collapsed node."
          },
          {
            "name": "iconLeaf",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The icon for component leaves."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until the Invoke Application phase."
          },
          {
            "name": "lang",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "ontoggle",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the node is toggle."
          },
          {
            "name": "style",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The type of the this component. More treeNodes could be defined in tree with different types and it is decided about which is used for rendering by nodeType expression of tree component."
          }
        ]
      },
      {
        "name": "treeSelectionChangeListener",
        "description": "",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an TreeSelectionChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Value binding expression that evaluates to an object that implements TreeSelectionChangeListener."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Fully qualified Java class name of an TreeSelectionChangeListener to be created and registered."
          }
        ]
      },
      {
        "name": "treeToggleListener",
        "description": "",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void"
          },
          {
            "name": "binding",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Value binding expression that evaluates to an object that implements TreeToggleListener."
          },
          {
            "name": "type",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.ValueExpression)",
            "description": "Fully qualified Java class name of an TreeToggleListener to be created and registered."
          }
        ]
      },
      {
        "name": "validator",
        "description": "The <rich:validator> behavior adds client-side validation to a form input control based on registered server-side validators. It provides this validation without the need to reproduce the server-side annotations. The <rich:validator> behavior triggers all client validator annotations listed in the relevant managed bean.",
        "attribute": [
          {
            "name": "data",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.Object)",
            "description": "Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via \"event.data\" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data"
          },
          {
            "name": "event",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of JavaScript event property (click, change, etc.) of parent component that triggers the behavior. If the event attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component. The value cannot be an EL expression."
          },
          {
            "name": "listener",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to javax.el.MethodExpression)",
            "description": "Method expression referencing a method that will be called when an AjaxBehaviorEvent has been broadcast for the listener."
          },
          {
            "name": "onbeforesubmit",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before the AJAX request is submitted"
          },
          {
            "name": "oncomplete",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the DOM is updated"
          },
          {
            "name": "oninvalid",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the validation fails."
          },
          {
            "name": "queueId",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Identify the name of the destination queue"
          },
          {
            "name": "status",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Name of the request status component that will indicate the status of the Ajax request"
          },
          {
            "name": "disabled",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If \"true\", do not initiate client-side validation"
          },
          {
            "name": "immediate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until the Process Validations phase."
          },
          {
            "name": "onbeforedomupdate",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called after the ajax response comes back, but before the DOM is updated"
          },
          {
            "name": "onbegin",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called before an ajax request."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "The client-side script method to be called when an error has occurred during Ajax communications"
          },
          {
            "name": "onvalid",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to java.lang.String)",
            "description": "Javascript code executed when the validation succeeds."
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "javax.el.ValueExpression\n(must evaluate to boolean)",
            "description": "If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made."
          }
        ]
      }
    ]
  }
}