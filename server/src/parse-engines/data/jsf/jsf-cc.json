{
    "components": {
      "component": [
        {
          "name": "actionSource",
          "description": "Declares that the composite component whose contract is declared by the <composite:interface> in which this element is nested exposes an implementation of ActionSource2 suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ActionSource2 may be attached to the composite component. Consider this excerpt from the using page: ",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The value of this attribute maps back to the 'for' attribute on an attachable object nested within a composite component. If the 'targets' attribute is not specified, this value also represents the component ID of the target component within the that the <composite:implementation> ActionListener should be mapped to. "
            },
            {
              "name": "targets",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <composite:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        },
        {
          "name": "insertFacet",
          "description": "The presence of this tag in a <composite:implementation> section must cause the named facet to be taken from the facet map of the top level component and inserted as a facet child of the component in which this element is nested. The results are undefined if there are facets in the composite component tag in the using page, but there is no correspondingly named occurrence of this element in the <composite:implementation> section.",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name of the facet child on the top level component which must be inserted as a facet child of the component in which this element is nested. "
            },
            {
              "name": "required",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " If true, and there is no such facet present on the top level component, a TagException must be thrown, containing the Location, the facet name, and a localized descriptive error message. "
            }
          ]
        },
        {
          "name": "facet",
          "description": "Declares that this composite component supports a facet with the name given by the value of the 'name' attribute. ",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name of the attribute as it must appear on the composite component tag in the using page."
            },
            {
              "name": "displayName",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "required",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " True if the page author must supply a facet with this name."
            },
            {
              "name": "preferred",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this a 'preferred' facet. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "expert",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this facet only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "shortDescription",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " A short description of the purpose of this facet. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        },
        {
          "name": "editableValueHolder",
          "description": "Declares that the composite component whose contract is declared by the <composite:interface> in which this element is nested exposes an implementation of EditableValueHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of EditableValueHolder may be attached to the composite component.The example from <composite:valueHolder> still applies. ",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The value of this attribute maps back to the 'for' attribute on an attachable object nested within a composite component. If the 'targets' attribute is not specified, this value also represents the component ID of the target component within the that the <composite:implementation> ActionListener should be mapped to. "
            },
            {
              "name": "targets",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <composite:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        },
        {
          "name": "extension",
          "description": "Used within a <composite:interface> section, within any sub-element of that section, to include XML content not defined by this specification. This element can be used to incorporate JSR-276 metadata into a composite component.",
          "attribute": []
        },
        {
          "name": "renderFacet",
          "description": "This element is used in the <composite:implementation> section. The facet with the name equal to the value of the name attribute, given by the page author in the using page, will be rendered at this point in the composite component VDL view. ",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The value of the name attribute as it must appear on an <f:facet> tag nested within the composite component tag in the using page."
            },
            {
              "name": "required",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " If true, and there is no such facet present on the top level component, a TagException must be thrown, containing the Location, the facet name, and a localized descriptive error message. "
            }
          ]
        },
        {
          "name": "clientBehavior",
          "description": "Declares that the composite component whose contract is declared by the <composite:interface> in which this element is nested exposes an implementation of ClientBehaviorHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ClientBehaviorHolder may be attached to the composite component.",
          "attribute": [
            {
              "name": "event",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The evaluated value of this attribute will be passed as the first argument to the addClientBehavior() method on ClientBehaviorHolder."
            },
            {
              "name": "default",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " If the evaluated value of this attribute is true, the page author may omit the the 'event' attribute when specifying the behavior in the using page. This is analogous to 'action' being the default event for commandLink. The usage of this attribute assumes only one clientBehavior is declared in this composite component. If more than one is specified, only the first one is used in the case of a using page with no event attribute. "
            },
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The value of this attribute maps back to the 'for' attribute on an attachable object nested within a composite component. If the 'targets' attribute is not specified, this value also represents the component ID of the target component within the that the <composite:implementation> ActionListener should be mapped to. "
            },
            {
              "name": "targets",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <composite:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
            }
          ]
        },
        {
          "name": "insertChildren",
          "description": "This element is used in the <composite:implementation> section. Any child components and/or template text within the composite component tag in the using page will be re-parented into the composite component at the point indicated by this tag's placement within the <composite:implementation> section. The normal use-case for this element is to have exactly one occurrence within the <composite:implementation> section. Inserting multiple occurrences may cause duplicate id errors. The results are undefined if there are multiple occurrences of this element in the <composite:implementation> section. The results are undefined if there are child components and/or template text in the composite component tag in the using page, but there is no occurrence of this element in the <composite:implementation> section.",
          "attribute": []
        },
        {
          "name": "valueHolder",
          "description": "Declares that the composite component whose contract is declared by the <composite:interface> in which this element is nested exposes an implementation of ValueHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ValueHolder may be attached to the composite component. Consider this excerpt from the using page: ",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The value of this attribute maps back to the 'for' attribute on an attachable object nested within a composite component. If the 'targets' attribute is not specified, this value also represents the component ID of the target component within the that the <composite:implementation> ActionListener should be mapped to. "
            },
            {
              "name": "targets",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <composite:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema. "
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        },
        {
          "name": "implementation",
          "description": "Defines the implementation of the composite component. There must be zero or one of these in a composite component markup file. If a <composite:interface> element appears, there must be a corresponding <composite-implementation> element. If no <composite:interface> element appears, the <composite-implementation> element is optional. ",
          "attribute": []
        },
        {
          "name": "attribute",
          "description": "Declares an attribute that may be given to an instance of the composite component tag for this composite component. There may be zero or many of these inside of the <composite:interface> section. This element may be nested within other <composite:attribute> elements to convey a usage contract that includes nested properties.",
          "attribute": [
            {
              "name": "name",
              "required": true,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name of the attribute as it must appear on the composite component tag in the using page. If the value of the name attribute is equal to (without the quotes) “action”, “actionListener”, “validator”, or “valueChangeListener”, the action described in ViewHandler.retargetMethodExpressions() must be taken to handle the attribute. In these cases, the method-signature attribute, if present, must be ignored as its value is derived as described in retargetMethodExpressions()."
            },
            {
              "name": "targets",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If this element has a method-signature attribute, the value of the targets attribute must be interpreted as a space (not tab) separated list of client ids (relative to the top level component) of components within the <composite:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema. Each entry in the list must be interpreted as the id of an inner component to which the MethodExpression from the composite component tag in the using page must be applied. If this element has a method-signature attribute, but no targets attribute, the value of the name attribute is used as the single entry in the list. If the value of the name attribute is not one of the special values listed in the description of the name attribute, targets (or its derived value) need not correspond to the id of an inner component. "
            },
            {
              "name": "targetAttributeName",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " This attribute allows the name of the attribute exposed to the using page to differ from the one actually used in the implementation. For example, consider a composite component that contains two buttons, one that means 'submit' and one that means 'cancel'. It is natural to want to declare two composite component attributes to allow these buttons to be customized, for example, 'submitAction' and 'cancelAction'. For both of these buttons, the method expression should be retargeted to the inner button's 'action' attribute. This scenario would be expressed as follows. <cc:interface> <cc:attribute name='submitAction' targetAttributeName='action' method-signature='java.lang.Object action()'/> <cc:attribute name='cancelAction' targetAttributeName='action' method-signature='java.lang.Object action()'/> <cc:actionSource name='submitAction'/> <cc:actionSource name='cancelAction'/> </cc:interface> <cc:implementation> <h:commandButton id='submitAction' value='submit' /> <h:commandButton id='cancelAction' value='cancel' /> </cc:implementation> "
            },
            {
              "name": "default",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " If this attribute is not required, and a value is not supplied by the page author, use this as the default value."
            },
            {
              "name": "displayName",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "required",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " True if the page author must supply a value for this attribute. The default value is false."
            },
            {
              "name": "preferred",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this a 'preferred' component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "expert",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this component only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "shortDescription",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " A short description of the purpose of this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "method-signature",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " Declares that this attribute must be a MethodExpression whose method signature is described by the value of this attribute. The signature must be described using fully qualified class names wherever a type is required. This attribute is mutually exclusive with the 'type' attribute. If both attributes are present, the 'method-signature' attribute is ignored. PENDING: when this file is generated from the web-facesuicomponent_2_0.xsd, we will not need to copy the content here manually. Provides the signature of the Java method. The syntax of the method-signature element is as follows (taken from function-signature in web-jsptaglibrary_2_1.xsd): MethodSignature ::= ReturnType S MethodName S? '(' S? Parameters? S? ')' ReturnType ::= Type MethodName ::= Identifier Parameters ::= Parameter | ( Parameter S? ',' S? Parameters ) Parameter ::= Type Where: Type is a basic type or a fully qualified Java class name (including package name), as per the 'Type' production in the Java Language Specification, Second Edition, Chapter 18. Identifier is a Java identifier, as per the 'Identifier' production in the Java Language Specification, Second Edition, Chapter 18. Example: java.lang.String nickName( java.lang.String, int ) "
            },
            {
              "name": "type",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " Declares that this attribute must be a ValueExpression whose expected type is given by the value of this attribute. If not specified, and no 'method-signature' attribute is present, java.lang.Object is assumed. This attribute is mutually exclusive with the 'method-signature' attribute. If both attributes are present, the 'method-signature' attribute is ignored. "
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        },
        {
          "name": "interface",
          "description": "This element declares the usage contract for a composite component. Optionally, and at the component author's discretion, this contract exposes the features of one or more inner components to the page author. The page author can work with the composite component as a single component whose feature set is the union of the features declared in the usage contract.",
          "attribute": [
            {
              "name": "name",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name of this composite component. Advisory only. The real name is taken from the filename. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "componentType",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The component-type of the UIComponent that will serve as the composite component root for this composite component. The declared component-family for this component must be javax.faces.NamingContainer."
            },
            {
              "name": "displayName",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "preferred",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this a 'preferred' component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "expert",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " Is this component only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "shortDescription",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to java.lang.String) ",
              "description": " A short description of the purpose of this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
            },
            {
              "name": "hidden",
              "required": false,
              "type": "javax.el.ValueExpression (must evaluate to boolean) ",
              "description": " The 'hidden' flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. "
            }
          ]
        }
      ]
    }
  }