{
  "components": {
    "component": [
      {
        "name": "actionSource",
        "description": "Declares that the composite component whose contract is declared by the <cc:interface> in which this element is nested exposes an implementation of ActionSource2 suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ActionSource2 may be attached to the composite component. Consider this excerpt from the using page: The <f:actionListener> elements on lines 4, 7, and 10 refer to the attached objects declared on lines 2, 3 and 4 below. Most of the concepts from example content from <cc:valueHolder> also applies in the case of <cc:actionSource>. Please see <cc:interface> for a usage example.",
        "attribute": [
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object nested within a composite component. If the \"targets\" attribute is not specified, this value also represents the component ID of the target component within the that the <cc:implementation> ActionListener should be mapped to."
          },
          {
            "name": "hidden",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "targets",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <cc:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
          }
        ]
      },
      {
        "name": "attribute",
        "description": "Declares an attribute that may be given to an instance of the composite component tag for this composite component. There may be zero or many of these inside of the <cc:interface> section. This element may be nested within other <cc:attribute> elements to convey a usage contract that includes nested properties. Please see summary page for a usage example. The top level component in which this element is ultimately nested must be a NamingContainer. There are certain component properties that must not be exposed using this element. The motivation for this restriction is that the mapping of markup attributes to component properties/attributes does not allow for these attributes to be set. The following properties must not be exposed using this element.",
        "attribute": [
          {
            "name": "default",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If this attribute is not required, and a value is not supplied by the page author, use this as the default value."
          },
          {
            "name": "expert",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this component only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "method-signature",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Declares that this attribute must be a MethodExpression whose method signature is described by the value of this attribute. The signature must be described using fully qualified class names wherever a type is required. This attribute is mutually exclusive with the \"type\" attribute. If both attributes are present, the \"method-signature\" attribute is ignored.   \t Provides the signature of the Java method. The syntax of \t the method-signature element is as follows (taken from \t function-signature in web-jsptaglibrary_2_1.xsd):  \t\tMethodSignature ::= ReturnType S MethodName S? \t\t\t\t '(' S? Parameters? S? ')'  ReturnType ::= Type  \t\tMethodName ::= Identifier  \t\tParameters ::= Parameter \t\t\t\t | ( Parameter S? ',' S? Parameters )  Parameter ::= Type  \t\tWhere:     \t\t Type is a basic type or a fully qualified \t\t Java class name (including package name), \t\t as per the 'Type' production in the Java \t\t Language Specification, Second Edition, \t\t Chapter 18. Identifier is a Java identifier, as per \t\t the 'Identifier' production in the Java \t\t Language Specification, Second \t\t Edition, Chapter 18.    \t Example:  \t java.lang.String nickName( java.lang.String, int )"
          },
          {
            "name": "preferred",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this a \"preferred\" component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "shortDescription",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "targets",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If this element has a method-signature attribute, the value of the targets attribute must be interpreted as a space (not tab) separated list of client ids (relative to the top level component) of components within the <cc:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema. Each entry in the list must be interpreted as the id of an inner component to which the MethodExpression from the composite component tag in the using page must be applied. If this element has a method-signature attribute, but no targets attribute, the value of the name attribute is used as the single entry in the list. If the value of the name attribute is not one of the special values listed in the description of the name attribute, targets (or its derived value) need not correspond to the id of an inner component."
          },
          {
            "name": "displayName",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "hidden",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the attribute as it must appear on the composite component tag in the using page. If the value of the name attribute is equal to (without the quotes) “action”, “actionListener”, “validator”, or “valueChangeListener”, the action described in ViewHandler.retargetMethodExpressions() must be taken to handle the attribute. In these cases, the method-signature attribute, if present, must be ignored as its value is derived as described in retargetMethodExpressions()."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "True if the page author must supply a value for this attribute. The default value is false."
          },
          {
            "name": "targetAttributeName",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "This attribute allows the name of the attribute exposed to the using page to differ from the one actually used in the implementation. For example, consider a composite component that contains two buttons, one that means \"submit\" and one that means \"cancel\". It is natural to want to declare two composite component attributes to allow these buttons to be customized, for example, \"submitAction\" and \"cancelAction\". For both of these buttons, the method expression should be retargeted to the inner button's \"action\" attribute. This scenario would be expressed as follows.    <cc:interface>   <cc:attribute name=\"submitAction\" targetAttributeName=\"action\"                 method-signature=\"java.lang.Object action()\"/>   <cc:attribute name=\"cancelAction\" targetAttributeName=\"action\"                 method-signature=\"java.lang.Object action()\"/>   <cc:actionSource name=\"submitAction\"/>   <cc:actionSource name=\"cancelAction\"/>  </cc:interface> <cc:implementation>   <h:commandButton id=\"submitAction\" value=\"submit\" />   <h:commandButton id=\"cancelAction\" value=\"cancel\" /> </cc:implementation>"
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Declares that this attribute must be a ValueExpression whose expected type is given by the value of this attribute. If not specified, and no \"method-signature\" attribute is present, java.lang.Object is assumed. This attribute is mutually exclusive with the \"method-signature\" attribute. If both attributes are present, the \"method-signature\" attribute is ignored."
          }
        ]
      },
      {
        "name": "clientBehavior",
        "description": "Declares that the composite component whose contract is declared by the <cc:interface> in which this element is nested exposes an implementation of ClientBehaviorHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ClientBehaviorHolder may be attached to the composite component.",
        "attribute": [
          {
            "name": "default",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "If the evaluated value of this attribute is true, the page author may omit the the \"event\" attribute when specifying the behavior in the using page. This is analogous to \"action\" being the default event for commandLink. The usage of this attribute assumes only one clientBehavior is declared in this composite component. If more than one is specified, only the first one is used in the case of a using page with no event attribute."
          },
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object nested within a composite component. If the \"targets\" attribute is not specified, this value also represents the component ID of the target component within the that the <cc:implementation> to which the ActionListener should be mapped."
          },
          {
            "name": "event",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The evaluated value of this attribute will be passed as the first argument to the addClientBehavior() method on ClientBehaviorHolder."
          },
          {
            "name": "targets",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <cc:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
          }
        ]
      },
      {
        "name": "editableValueHolder",
        "description": "Declares that the composite component whose contract is declared by the <cc:interface> in which this element is nested exposes an implementation of EditableValueHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of EditableValueHolder may be attached to the composite component.The example from <cc:valueHolder> still applies. Please see <cc:interface> for a usage example.",
        "attribute": [
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object nested within a composite component. If the \"targets\" attribute is not specified, this value also represents the component ID of the target component within the that the <cc:implementation> to which the ActionListener should be mapped."
          },
          {
            "name": "targets",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <cc:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
          }
        ]
      },
      {
        "name": "extension",
        "description": "Used within a <cc:interface> section, within any sub-element of that section, to include XML content not defined by this specification. This element can be used to incorporate JSR-276 metadata into a composite component.",
        "attribute": []
      },
      {
        "name": "facet",
        "description": "Declares that this composite component supports a facet with the name given by the value of the \"name\" attribute. Please see <cc:interface> for a usage example.",
        "attribute": [
          {
            "name": "displayName",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "hidden",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "preferred",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this a \"preferred\" facet. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "shortDescription",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this facet. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "expert",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this facet only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the attribute as it must appear on the composite component tag in the using page."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "True if the page author must supply a facet with this name."
          }
        ]
      },
      {
        "name": "implementation",
        "description": "Defines the implementation of the composite component. There must be zero or one of these in a composite component markup file. If a <cc:interface> element appears, there must be a corresponding <composite-implementation> element. If no <cc:interface> element appears, the <composite-implementation> element is optional.",
        "attribute": []
      },
      {
        "name": "insertChildren",
        "description": "This element is used in the <cc:implementation> section. Any child components or template text within the composite component tag in the using page will be re-parented into the composite component at the point indicated by this tag's placement within the <cc:implementation> section. The normal use-case for this element is to have only one occurrence within the <cc:implementation> section. Inserting multiple occurrences may cause duplicate id errors. The results are undefined if there are multiple occurrences of this element in the <cc:implementation> section.",
        "attribute": []
      },
      {
        "name": "insertFacet",
        "description": "The presence of this tag in a <cc:implementation> section must cause the named facet to be taken from the facet map of the top level component and inserted as a facet child of the component in which this element is nested. The results are undefined if there are facets in the composite component tag in the using page, but there is no correspondingly named occurrence of this element in the <cc:implementation> section.",
        "attribute": [
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the facet child on the top level component which must be inserted as a facet child of the component in which this element is nested."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "If true, and there is no such facet present on the top level component, a TagException must be thrown, containing the Location, the facet name, and a localized descriptive error message."
          }
        ]
      },
      {
        "name": "interface",
        "description": "This element declares the usage contract for a composite component. Optionally, and at the component author's discretion, this contract exposes the features of one or more inner components to the page author. The page author can work with the composite component as a single component whose feature set is the union of the features declared in the usage contract. For example, consider a composite component that implements the functionality of a \"login panel\". Such a component would likely have two text fields and one button. The user of such a component might like to do one or more of the following. Be able to listen for the ActionEvent on the button. In this case, a <cc:actionSource> element is included in the usage contract that refers to the inner button in the <cc:implementation> section. Provide an \"action\" to invoke when the button is pressed. \t In this case, a <cc:attribute> element is included in the usage contract that refers to the inner button in the <cc:implementation> section and declares the proper method signature for an \"action\". Provide parameters to the composite component for \t labels and other rendering specific aspects of the composite \t component. In this case, one or more <cc:attribute> elements are included in the usage contract and those parameters are referred to in the <cc:implementation> section using EL expressions like #{cc.attrs.usernameLabel}, assuming usernameLabel is the name of one of the <cc:attribute> elements in the usage contract. Add ValueChangeListeners, \t Converters, or Validators to either \t or both text fields. \t In this case, a <cc:editableValueHolder> element is included in the usage contract that refers to the inner text field in the <cc:implementation> section. In the case of wanting to enable only adding a Converter (and not a ValueChangeListener or Validator, a <cc:valueHolder> element would be used. Add facet children to the login panel. In this case, a <cc:facet> element is included in the usage contract that refers to the inner <cc:renderFacet> element in the <cc:implementation> section. For each of the behaviorial interfaces in section 3.2 \"Component Behavioral Interfaces\" of the Jakarta Faces Specification Document, there is a tag in the cc: library to nest inside of the <cc:interface> section. If the <cc:interface> section is not present in a VDL view, the contract will be inferred as described in the specification. There must be zero or one of these elements in a composite component VDL file. If a <cc:interface> element does appear, there must be an accompanying <cc:implementation> element in the same VDL file. Nesting of composite components The implementation must support nesting of composite components. Specifically, it must be possible for the <cc:implementation> section of a composite component to act as the using page for another composite component. When a composite component exposes a behavioral interface to the using page, such as a <cc:actionSource>, <cc:editableValueHolder>, <cc:valueHolder> or other behavioral interface, it must be possible to “propogate” the exposure of such an interface in the case of a nested composite component. The composite component author must ensure that the value of the name attributes exactly match at all levels of the nesting to enable this exposure to work. The implementation is not required to support “re-mapping” of names in a nested composite component. For example, consider this nested composite component. Using page actionSourceOuter.xhtml: Outer composite component actionSourceInner.xhtml: the composite component used within a composite component. The id of the <h:commandButton> on line 6 of actionSourceInner.xhtml must match the name on line 2 of that file (this is a standard requirement for all composite components, nested or not). That id must also match the name on line 2 of actionSourceOuter.xhtml, and the for on line 2 of the using page. The implementation must support any level of nesting as long as the for, name, and id values match up. Furthermore, the targets attribute is also valid for use in this nested fashion. Naming containers within composite components Composite components are themselves naming containers so that any possible id conflicts between inner components and components in the using page are avoided. However, special care must be taken when using naming containers in the <cc:implementation> section. In such cases the value of the “name” attribute, or the values of the “targets” attribute must be used with a clientId relative to the top level component to expose any attached object targets to the using page. For example: Using page loginButton.xhtml Because the button on line 8 resides within a form, it must be referred to using a client id, relative to the top level component, in the \"targets\" attribute on line 2. Using a relative clientId is required due to the semantics of UIComponent.findComponent().",
        "attribute": [
          {
            "name": "componentType",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component-type of the UIComponent that will serve as the composite component root for this composite component. The declared component-family for this component must be jakarta.faces.NamingContainer."
          },
          {
            "name": "expert",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this component only for expert users? The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "name",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of this composite component. Advisory only. The real name is taken from the filename. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "shortDescription",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "displayName",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette containing this component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          },
          {
            "name": "hidden",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "preferred",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Is this a \"preferred\" component. The value of this attribute will be set as the value for this property on the composite component bean descriptor."
          }
        ]
      },
      {
        "name": "renderFacet",
        "description": "This element is used in the <cc:implementation> section. The facet with the name equal to the value of the name attribute, given by the page author in the using page, will be rendered at this point in the composite component VDL view. The implementation of this tag handler must insert a component with component-type jakarta.faces.Output and renderer-type jakarta.faces.CompositeFacet as a child at this point in the component tree. The implementation of this tag handler must store an attribute into the created component's attribute map under the key given by the value of the symbolic constant UIComponent.FACETS_KEY. The value for this key must be the evaluated value of the \"name\" attribute.",
        "attribute": [
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The value of the name attribute as it must appear on an <f:facet> tag nested within the composite component tag in the using page."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "If true, and there is no such facet present on the top level component, a TagException must be thrown, containing the Location, the facet name, and a localized descriptive error message."
          }
        ]
      },
      {
        "name": "valueHolder",
        "description": "Declares that the composite component whose contract is declared by the <cc:interface> in which this element is nested exposes an implementation of ValueHolder suitable for use as the target of attached objects in the using page. Any attached objects suitable for implementations of ValueHolder may be attached to the composite component. Consider this excerpt from the using page: Line 2 refers to the <cc:valueHolder> declaration on line 2 of foo.xhtml: It is possible to declare that a single <cc:valueHolder> element should cause multiple components within the <cc:implementation> section to be the targets of an attached object in the using page. Assuming the same using page excerpt as above, the revised VDL view is: In this case, the \"targets\" attribute on the <cc:valueHolder> element, on line 2 above, replaces the \"name\" attribute in the previous example. \"targets\" is a list of ids of client ids (relative to the top level component) within the <cc:implementation> section. In this case, \"targets\" refers to the <h:inputText> components on lines 6 and 7 above. Please see <cc:interface> for a usage example.",
        "attribute": [
          {
            "name": "hidden",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "targets",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client ids (relative to the top level component) of components within the <cc:implementation> section. Space is used as the delimiter for compatibility with the IDREFS and NMTOKENS data types from the XML Schema."
          },
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object nested within a composite component. If the \"targets\" attribute is not specified, this value also represents the component ID of the target component within the that the <cc:implementation> ActionListener should be mapped to."
          }
        ]
      }
    ]
  }
}