{
  "components": {
    "component": [
      {
        "name": "body",
        "description": "Render the markup for a <body> element. Decode Behavior No action is required during decode for this renderer. Encode Behavior Render the starting <body> element tag. Just before rendering the closing </body> element tag, render any resources that have been targeted for this \"body\" element: Any attributes declared on the element must be passed through unmodified to the rendered output.",
        "attribute": [
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onload",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when the user agent finishes loading a window or all frames within a frameset."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onunload",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when the user agent removes a document from a window or frame."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "button",
        "description": "",
        "attribute": [
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "outcome",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The logical outcome used to resolve a navigation case."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "alt",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component. This attribute is ignored when the image attribute is not specified."
          },
          {
            "name": "fragment",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The identifier of the page fragment which should be brought into focus when the target page is rendered. The value of this attribute is appended to the end of target URL following a hash (#) mark. This notation is part of the standard URL syntax."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "disableClientWindow",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Disable appending the ClientWindow on the rendering of this element."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "includeViewParams",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Whether to include page parameters in the target URI."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "image",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Absolute or relative URL of the image to be displayed for this button. If specified, this \"input\" element will be of type \"image\". Otherwise, it will be of the type specified by the \"type\" property with a label specified by the \"value\" property. Note that if the value of this attribute starts with \"/\", the rendered value for this attribute will be prefixed with the context-root for this application."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "column",
        "description": "Renders a UIComponent that represents a single column ofdata within a parent UIData component.",
        "attribute": [
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for the associated component"
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any column header generated for this table."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The value binding expression linking this component to a property in a backing bean"
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any column footer generated for this table."
          },
          {
            "name": "rowHeader",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this column is a row header column and therefore cells in this column should be rendered with \"th\" instead of \"td\" and must have the 'scope=\"row\"' attribute."
          }
        ]
      },
      {
        "name": "commandButton",
        "description": "Renders an HTML \"input\"element. Decode Behavior Obtain the Map from the\"requestParameterMap\"property of the ExternalContext. If thevalue in theMap for the value of the \"clientId\"property of thecomponent is null, create a String byconcatenatingthe value of the \"clientId\" property of the component with theString \".x\" (without the quotes). Create another String in thesame manner, but concatenate \".y\" (without the quotes). Ifnull is the value in the Mapfor bothStrings, return from decode(). If the valuein theMap for the value of the \"clientId\"property of thecomponent is not null, get the value of the\"type\"attribute, and convert it to lower case. If the result is equalto the String \"reset\" (without the quotes), return fromdecode(). Otherwise, create ajakarta.faces.event.ActionEvent around thecomponent,and pass it to the queueEvent() method ofthecomponent, which must be an instance ofUICommand. Encode Behavior Render the clientId of the component as the value of the\"name\"attribute. Render the current value of the component as the valueof the \"value\" attribute. If \"image\" attribute is specified renderit as the value of the \"src\" attribute after passing it to thegetResourceURL() method of theViewHandler for this application, andpassing theresult through the encodeResourceURL()method of theExternalContext. Note that callinggetResourceURL() will prefix thecontext-root of thecurrent application if the value of the \"src\" attribute startswith \"/\". When handling the \"image\" attribute, thevalue must notbe escaped. For example, & must not beturned into&. If the \"styleClass\"attribute isspecified, render its value as the value of the \"class\" attribute.If the user has specified an \"onclick\" attribute, append thatJavaScript to any existing JavaScript before rendering. If the component being renderedbythis renderer has any UIParameter children,each oneof them must be rendered using the renderer for component-family:\"jakarta.faces.Input\" and renderer-type: \"jakarta.faces.Hidden\". Fordiscussion, this is called the hiddenRenderer. A component withcomponent-type \"jakarta.faces.Input\" must be created for local usein rendering each UIParameter child. The\"id\"property of the temporary component must be set to the \"name\" ofthe UIParameter. The \"value\" property ofthetemporary component must be set to the \"value\" of theUIParameter. For each UIParameterchild, the hiddenRenderer must have itsencodeBegin(), encodeChildren(),andencodeEnd() methods called, in order,passing thetemporary component as the second argument.",
        "attribute": [
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent))",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "alt",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component. This attribute is ignored when the image attribute is not specified."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "action",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "image",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Absolute or relative URL of the image to be displayed for this button. If specified, this \"input\" element will be of type \"image\". Otherwise, it will be of the type specified by the \"type\" property with a label specified by the \"value\" property. Note that if the value of this attribute starts with \"/\", the rendered value for this attribute will be prefixed with the context-root for this application."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Type of button to create. Valid values are \"submit\", \"button\", and \"reset\". If not specified, or not a valid value, the default value is \"submit\"."
          }
        ]
      },
      {
        "name": "commandLink",
        "description": "Render an HTML \"a\"anchorelement that acts like a form submit button whenclicked. General Behaviour Both the encode and decode behavior require the ability togetthe id/name for a hidden field, which may be rendered in markup orwhichmay be programmatically added via client DOM manipulation,whose value is set by the JavaScript form submit. This name mustbe constructed as follows: Get the clientId for the form of which thiscomponent is achild. AppendNamingContainer.SEPARATOR_CHAR. Append a constant string that is the same for allcommandlink components in the tree. In the following text, this String is calledhiddenFieldName. Decode Behavior Obtain the \"clientId\" property of the component. Obtain theMap from the \"requestParameterMap\" propertyof theExternalContext. Derive hiddenFieldName asabove.Get the entry in the Map under the key thatis thehiddenFieldName. If the there is no entry, or the entry is theempty String, or the entry is not equal to the value of the\"clientId\" property, return immediately. If there is an entry,and its value is equal to the value of the \"clientId\" property,create a new jakarta.faces.event.ActionEventinstancearound the component and call queueActionEvent()onthe component, passing the event. Encode Behavior If the value of the disabledattribute istrue, render a span element. Render all thepassthruattributes and the target attribute aspass-throughattributes on the span, even though the targetattribute will have no effect on a span. Render the current valueof the component as the content of the span. Return. If the disabled attribute is notpresent, or itsvalue is false, render an HTML aelement. Render \"#\" as the value of the \"href\" attribute. Renderthe current value of the component as the link text if it isspecified. Render JavaScript that is functionally equivalent tothe following as the value of the \"onclick\" attribute: document.forms['CLIENT_ID']['hiddenFieldName'].value='CLIENT_ID';document.forms['CLIENT_ID']['PARAM1_NAME'].value='PARAM1_VALUE';document.forms['CLIENT_ID']['PARAM2_NAME'].value='PARAM2_VALUE';return false; document.forms['CLIENT_ID'].submit()\" where hiddenFieldNameisas described above, CLIENT_ID is the clientId of the UICommandcomponent, PARAM*_NAME and PARAM*_VALUE are the names and values,respectively, of any nested UIParameter children. The name andthe value must be URLEncoded. If an \"onclick\" attribute wasspecified by the user, render this JavaScript in a function,and render the user's JavaScript in a function. Render bothfunctionsin a choice function as follows: var a=function(){#USER_FUNCTION#};var b=function(){#JSF_FUNCTION#};return (a()==false) ? false : b(); where #USER_FUNCTION# is the user's JavaScript and#JSF_FUNCTION# is the JavaScript rendered by Faces. The choicefunction should operate such that if the user's JavaScript returnstrue, then the rendered JavaScript will also execute. If the \"styleClass\" attribute is specified, render itsvalue asthe value of the \"class\" attribute. Render any non-UIParameteroutput children as normal inside of the \"a\" element. These willappear as the link text. Allow the form renderer to output asingle \"input\" element (for the entire page, regardless of howmany command link components are in the page) of \"type\" \"hidden\"whose \"name\" is the value of hiddenFieldName, and which must nothave a \"value\" attribute. Multiple occurrences of command linkcomponents in the tree should not cause multiple hiddenFieldNamehidden fields. Allow the form renderer to output an \"input\"element of \"type\" \"hidden\" for each of the nested UIParameterchildren, taking the name property (but not the value) from eachone in turn. If the \"disabled\" attribute is specified, do notrender the HTML \"a\" anchor element or its \"href\" attribute.Instead, render a \"span\" element. If the \"styleClass\" attributeis specified, render its value as the value of the \"class\"attribute on the \"span\". Render any pass-through attributes onthe \"span\". The content of the span element comes from the valueof the component or its children as specified above. If the user specified a targetattribute, itsvalue must be set using javascript since the onclickhandler will prevent the target attribute from being generated.This must be accomplished using JavaScript that is equivalent tothe following. document.forms['CLIENT_ID'].target='TARGET'; Where TARGET is the value of the target attribute on theJSPtag.",
        "attribute": [
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent))",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "charset",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "hreflang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rel",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "shape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "target",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed."
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink."
          },
          {
            "name": "action",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "coords",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rev",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "commandScript",
        "description": "Render a JavaScript function that invokes faces.ajax.request() function. Render an HTML script element. If the value of the \"name\" attribute does not contain a period . indicating a namespaced function name, then render JavaScript var keyword, followed by a space character. Render the value of the \"name\" attribute, followed by JavaScript assignment operator. Render JavaScript function which invokes faces.ajax.request() with data provided by execute, render, onbegin, oncomplete, onsuccess and onerror arguments, if any. If the component being rendered has any UIParameter children, each one of them must be encoded into params object of the options object of the faces.ajax.request() function. If the rendered JavaScript function is invoked with an object argument, each property must be encoded into params object of the options object of the faces.ajax.request() function. This will override any property with the same key. Obtain the Map from the \"requestParameterMap\" property of the ExternalContext. If the value in the Map for the value of the \"jakarta.faces.source\" equals to the \"clientId\" property of the component, create a jakarta.faces.event.ActionEvent around the component, and pass it to the queueEvent() method of the component, which must be an instance of UICommand.",
        "attribute": [
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "autorun",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Whether to execute declared JavaScript function during load event of the window. Defaults to false."
          },
          {
            "name": "actionListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent))",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that \"some action happened\"."
          },
          {
            "name": "render",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "This is a space separated list of client identifiers of components that will participate in the \"render\" portion of the Request Processing Lifecycle. If a literal is specified the identifiers must be space delimited. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\" may be specified in the identifier list. If not specified, the default value of \"@none\" is assumed. For example, @this clientIdOne clientIdTwo."
          },
          {
            "name": "onevent",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the JavaScript function that will handle UI events."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean."
          },
          {
            "name": "name",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of JavaScript function to be declared, e.g. name=\"functionName\". This can be a namespaced function name, e.g. name=\"ez.functionName\"."
          },
          {
            "name": "action",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object. The toString() of the returned Object is called to derive the logical outcome. This outcome is passed to the NavigationHandler for this application."
          },
          {
            "name": "execute",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "This is a space separated list of client identifiers of components that will participate in the \"execute\" portion of the Request Processing Lifecycle. If a literal is specified the identifiers must be space delimited. Any of the keywords \"@this\", \"@form\", \"@all\", \"@none\" may be specified in the identifier list. If not specified, the default value of \"@this\" is assumed. For example, @this clientIdOne clientIdTwo."
          },
          {
            "name": "resetValues",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Reset specific input values. Interpret the value of the render attribute as a space separated list of client identifiers suitable for passing directly to UIViewRoot.resetValues(). The implementation must cause an ActionListener to be attached to the ActionSource component in which this tag is nested that calls UIViewRoot.resetValues() passing the value of the render attribute as the argument."
          },
          {
            "name": "onerror",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the JavaScript function that will handle errors."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. Defaults to true."
          }
        ]
      },
      {
        "name": "dataTable",
        "description": "Renders an HTML \"table\" element compliant with the HTML 401specification. Render the \"caption\" facet, if present, inside a\"caption\" element immediately below the \"table\" element. If the\"captionClass\" attribute is specified, render its value as thevalue of the \"class\" attribute on the \"caption\" element. If the\"captionStyle\" attribute is specified, render its value as thevalue of the \"style\" attribute on the \"caption\" element. Please consult the javadoc for UIDatatosupplement this specification. If the \"styleClass\" attribute isspecified, render its value as the value of the \"class\" attributeon the \"table\" element. Any pass-through attributes are alsorendered on the \"table\" element. Column Groups If the UIData component has a\"colgroups\" facet,render its contents. Consistent with the rules of facets ingeneral, this facet must have only one child. In general, thiswill be a panel group component that willcontaincolgroup and colelements per the HTMLTable specification. Use of column grouping can improveaccessibility. This facet must be rendered before the tableheader and footer. Rendering the header If the UIData component has a\"header\" facet, orany of the child UIColumn components has a\"header\"facet, render a \"thead\" element. If the UIDatacomponent has a \"header\" facet, encode its contents inside of \"tr\"and \"th\" elements, respectively. Output the value of the\"headerClass\" attribute of the UIDatacomponent, ifpresent, as the value of the \"class\" attribute on the \"th\".Output the number of child UIColumncomponents of theUIData component as the value of the\"colspan\"attribute on the \"th\". Output \"colgroup\" as the value of the\"scope\" attribute on the \"th\" element. If any of the child UIColumncomponents has a\"header\" facet render a \"tr\" element. For eachUIColumn that actually has a \"header\"facet, renderit inside of a \"th\" element. Columns that don't have a \"header\"facet cause an empty \"th\" element to be rendered. Output thevalue of the \"headerClass\" attribute of the UIColumncomponent, if present, as the value of the \"class\" attribute onthe \"th\". If the \"headerClass\" attribute of the UIColumncomponent is not present, output the value of the \"headerClass\"attribute of the UIData component, ifpresent, asthe value of the \"class\" attribute on the \"th\". Output \"col\" asthe value of the \"scope\" attribute on the \"th\" element. Close out the \"thead\" element. Rendering the footer Follow the same process as for the header, except replace\"header\" with \"footer\", \"th\" with \"td\", \"thead\" with \"tfoot\", and\"headerClass\" with \"footerClass\". Do not render any \"scope\"attribute for the footer. Rendering the table body Look at the value of the \"bodyrows\" attribute. If present,this must be a comma separated list of integers. Each entry inthis list is the row index of the row before which a \"tbody\"element should be rendered. If there was no \"bodyrows\" attribute, or it was empty,render a\"tbody\" element. Keep track of the result of the \"rows\" propertyon the UIData component. Keep track of thenumber ofrows we have rendered so far. Iterate through the rows. Set the\"rowIndex\" property of the UIData componentto becorrect as we iterate through the rows. Stop rendering childrenand close out the \"tbody\" element if the \"rowAvailable\" propertyof the UIData returned false. If thecurrent rowindex is contained in the \"bodyrows\" attribute, check if a \"tbody\"start element was rendered that needs to be closed, and if so,close the \"tbody\" element. Then render a \"tbody\" element start.Otherwise, do not render a \"tbody\" element. Output a \"tr\" element. Output the value of the \"rowClasses\"per the attribute description below. For eachUIColumn child, if the column component hasa\"rowHeader\" attribute with a value of \"true\", output a \"th\"element with a \"scope\" attribute with the value of \"row\".Otherwise, if the column component has no \"rowHeader\" attribute,or its value is false, output a \"td\" element. In either caseattach the value of the \"columnClasses\" attribute of theUIData component per the attributedescription below.Recursively encode each child of each UIColumnchild.Close out the \"td\" or \"th\" element. When done with the row, closeout the \"tr\" element. When done with all the rows, close out the\"tbody\" element. When done rendering all the rows, set the \"rowIndex\"property ofthe UIData to -1, and close out the \"table\"element.",
        "attribute": [
          {
            "name": "first",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Zero-relative row number of the first row to be displayed. If this property is set to zero, rendering will begin with the first row of the underlying data."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "bgcolor",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name or code of the background color for this table."
          },
          {
            "name": "border",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around this table."
          },
          {
            "name": "captionStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this caption is rendered."
          },
          {
            "name": "cellspacing",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the left side of the table and the leftmost column, the top of the table and the top of the top side of the topmost row, and so on for the right and bottom of the table. It also specifies the amount of space to leave between cells."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "frame",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which sides of the frame surrounding this table will be visible. Valid values are: none (no sides, default value); above (top side only); below (bottom side only); hsides (top and bottom sides only); vsides (right and left sides only); lhs (left hand side only); rhs (right hand side only); box (all four sides); and border (all four sides)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rules",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which rules will appear between cells within this table. Valid values are: none (no rules, default value); groups (between row groups); rows (between rows only); cols (between columns only); and all (between all rows and columns)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rows",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of rows to display, starting with the one identified by the \"first\" property. If this value is set to zero, all available rows in the underlying data model will be displayed."
          },
          {
            "name": "var",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a request-scope attribute under which the model data for the row selected by the current value of the \"rowIndex\" property (i.e. also the current value of the \"rowData\" property) will be exposed."
          },
          {
            "name": "bodyrows",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated list of row indices for which a new \"tbody\" element should be started (and any previously opened one should be ended)."
          },
          {
            "name": "captionClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any caption generated for this table."
          },
          {
            "name": "cellpadding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the border of each cell and its contents."
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of actual column children of the UIData, no \"class\" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of actual column children of the UIData, the elements at the posisiton in the list after the last column are ignored."
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this table."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this table."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the rows of this table. A space separated list of classes may also be specified for any individual row. Thes styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "summary",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Summary of this table's purpose and structure, for user agents rendering to non-visual media such as speech and Braille."
          },
          {
            "name": "width",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Width of the entire table, for visual user agents."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "doctype",
        "description": "Render the markup fora <!DOCTYPE> declaration. Decode Behavior No action is required during decode for this renderer. Encode Behavior Output an XML Doctype using the provided attributes. Output theliteral text <!DOCTYPE. The \"rootElement\" attribute isrequired and must be rendered next. If the \"public\" attribute isdefined, render the literal text PUBLIC then render thevalue of the attribute inside double quotes. If the \"system\" attributeis defined, render it next, inside double quotes. Close the doctypedeclaration with the literal text >. No relocation occurs with the output of this component. It isrendered at whatever position in the view hierarchy it happens to beencountered when traversing the view to render. Therefore, thiscomponent must be located in the view hierarchy at the correct locationso that the final rendered markup has it in the proper place withrespect to the user agent that consumes the rendered markup. In practicethis means in front of the <html> or <h:html> element.Furthermore, if multiple <h:doctype> components exist,all of them will be rendered. If this component is present in a view, any DOCTYPE that wouldotherwise have been rendered by virtue of being present in the VDL pagemust be ignored.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "rootElement",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The root XML element"
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "public",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Will be output as the public part of the DOCTYPE"
          },
          {
            "name": "system",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Will be output as the system part of the DOCTYPE"
          }
        ]
      },
      {
        "name": "form",
        "description": "Decode Behavior Obtain the Map from the\"requestParameterMap\"property of the ExternalContext. If the mapcontainsan entry for the \"clientId\" of this UIFormcomponent,call setSubmitted(true) on the form,otherwise callsetSubmitted(false) on the form. Encode Behavior The value of the \"method\" attribute must be \"post\". Thevalueof the \"action\" attribute must be the result of passing the viewidentifier of the current view to the getActionURL()method of the ViewHandler for thisapplication, thenpassing that String to the encodeActionURL()methodon the ExternalContext. The value of theacceptcharsetattribute must be rendered as the value of \"accept-charset\".If the \"styleClass\" attribute is specified, render its value as thevalue of the \"class\" attribute. Render a \"name\"attribute with a value the same as the \"id\" attribute as describedin \"GeneralNotes onEncoding\" regarding the \"id\" attribute for UIInputcomponents. Obtain the UIViewRootview identifier anduse it to obtain an action URL by callingViewHandler.getActionURL.Use the action URL to obtain an encodedaction URL by callingExternalContext.encodeActionURL. Obtain anencoded partial action URL by callingExternalContext.encodePartialActionURLusing action URL as the argument.Compare the result from ExternalContext.encodePartialActionURLwith thevalue from ExternalContext.encodeActionURL().If they are different,render a hidden field with the name jakarta.faces.encodedURLand the valueof this hidden field as the value from ExternalContext.encodePartialActionURL.",
        "attribute": [
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "acceptcharset",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "List of character encodings for input data that are accepted by the server processing this form."
          },
          {
            "name": "enctype",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Content type used to submit the form to the server. If not specified, the default value is \"application/x-www-form-urlencoded\"."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onreset",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this form is reset."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "target",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the response retrieved after this form submit is to be displayed."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "prependId",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this form should prepend its id to its descendent's id during the clientId generation process. If this flag is not set, the default value is true."
          },
          {
            "name": "accept",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "List of content types that a server processing this form will handle correctly"
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "onsubmit",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this form is submitted."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "graphicImage",
        "description": "Renders an HTML \"img\"element. Render the clientId as the value of the \"id\"attribute. Handling the Value If the \"name\" attribute is present, execute algorithm CommonAlgorithm for Obtaining A Resource to Render to obtain aResource instance. CallResource.getRequestPath() and output theresult as thevalue of the \"src\" attribute on the rendered markup. Otherwise, if the \"url\" attribute is present, treat itsvalue asif it was the value of the \"value\" attribute. Otherwise, if the\"value\" attribute is present, render the value of the component asthe value of the \"src\" attribute, after passing it to thegetResourceURL() method of the ViewHandlerfor this application, and passing the result through theencodeResourceURL() method of theExternalContext. When handling the \"src\" attribute,the value must not be escaped. For example, &must notbe turned into &. If the\"styleClass\"attribute is specified, render its value as the value of the \"class\"attribute.",
        "attribute": [
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "url",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Context-relative URL to retrieve the resource associated with this component. This is an alias for the \"value\" property."
          },
          {
            "name": "alt",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component."
          },
          {
            "name": "height",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Override for the height of this image."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "longdesc",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "URI to a long description of the image represented by this element."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "width",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Override for the width of this image."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "ismap",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this image is to be used as a server side image map. Such an image must be enclosed within a hyperlink (\"a\"). A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as ismap=\"ismap\"."
          },
          {
            "name": "library",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The libraryName for this resource."
          },
          {
            "name": "name",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The resourceName for this resource."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "usemap",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of a client side image map (an HTML \"map\" element) for which this element provides the image."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "head",
        "description": "Render the markup for a <head> element. Decode Behavior No action is required during decode for this renderer. Encode Behavior Render the starting <head> element tag. Any attributes declared on the element must be passed through unmodified to the rendered output. Just before rendering the closing </head> element tag, render any resources that have been targeted for this \"head\" element: Any attributes declared on the element must be passed through unmodified to the rendered output.",
        "attribute": [
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          }
        ]
      },
      {
        "name": "inputFile",
        "description": "Rendersan HTML \"input\" element of \"type\" \"file\". The standard HTML_BASICRenderKit specifies behavior that assumes Servlet 3.0 or later.Portlet implementations must override this implementation with asemantically equivalent one that functions under the constraintsof the Portlet specification. Decode Behavior Obtain the Map from the \"requestParameterMap\"property of the ExternalContext. If theMap contains an entry for the \"clientId\" of thecomponent, pass the value of the entry to thesetSubmittedValue() method of the component, whichmust be an instance of EditableValueHolder, andreturn. Otherwise, obtain the \"request\" property from theExternalContext and cast it tojakarta.servlet.http.HttpServletRequest. CallgetParts() on the httpServletRequest. Iterate overthe parts. If the \"name\" property of the current part is equal tothe \"clientId\", then collect the part.After the iteration, if the multiple attribute is set to true,then pass java.util.Collection<jakarta.servlet.http.Part> to the setSubmittedValue() method of the component,else pass the first item, if any, as jakarta.servlet.http.Part to thesetSubmittedValue() method of the component. If anexception is thrown during the iteration, log the exception andcontinue. The standard implementation must override thegetConvertedValue() so that it filters out from thesubmittedValue any parts which returnnull or an empty string on getSubmittedFileName(),or return 0 or less on getSize(). Any exception thrown when interacting with the underlyingmulti-part API must be wrapped in a FacesExceptionand allowed to reach the ExceptionHandler. Encode Behavior Render the clientId of the component as the value of the\"name\" attribute. Do not render the \"value\" attribute. If the\"styleClass\" attribute is specified, render its value as the valueof the \"class\" attribute. If ProjectStage is notProjectStage.Production, verify that the enclosingform has an enctype attribute whose value ismultipart/form-data. If not, add aFacesMessage for this component's clientId to theFacesContext stating that file upload requires a formwith enctype equal tomultipart/form-data. If ProjectStageis ProjectStage.Production, do notdo this verification.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component. If the multiple attribute is set to true, then this must be assignable to java.util.Collection<jakarta.servlet.http.Part>, else this must be assignable to jakarta.servlet.http.Part."
          },
          {
            "name": "accept",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated string of mime types of files to filter in client side file browse dialog. Note: this is not validated in server side."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left). These attributes are case sensitive when rendering to XHTML, so care must be taken to have the correct case."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "multiple",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating that this element must allow multiple file selection. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as multiple=\"multiple\"."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "inputHidden",
        "description": "Renders an HTML \"input\" element of type\"hidden\". Decode Behavior See the decode description for the InputText renderer. Encode Behavior Render the clientId of the component as the value of the\"name\" attribute. Render the current value of the component asthe value of the \"value\" attribute.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "inputSecret",
        "description": "Renders an HTML \"input\" element of \"type\" \"password\". Decode Behavior See the decode description for the InputText renderer. Encode Behavior Render the clientId of the component as the value of the \"name\"attribute. Render the current value of the component as the valueof the \"value\" attribute, if and only if the \"redisplay\" componentattribute is the string \"true\". If the \"styleClass\" attribute isspecified, render its value as the value of the \"class\"attribute.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "autocomplete",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If the value of this attribute is \"off\", render \"off\" as the value of the attribute. This indicates that the browser should disable its autocomplete feature for this component. This is useful for components that perform autocompletion and do not want the browser interfering. If this attribute is not set or the value is \"on\", render nothing."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "size",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of characters used to determine the width of this field."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "maxlength",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The maximum number of characters that may be entered in this field."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "redisplay",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that any existing value in this field should be rendered when the form is created. Because this is a potential security risk, password values are not displayed by default."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "inputText",
        "description": "Renders an HTML \"input\"element of \"type\" \"text\". Decode Behavior Obtain the Map from the\"requestParameterMap\"property of the ExternalContext. If theMap contains an entry for the \"clientId\" ofthecomponent, pass the value of the entry to thesetSubmittedValue() method of thecomponent, whichmust be an instance of EditableValueHolder. Encode Behavior Render the clientId of the component asthe value of the \"name\" attribute. Render the current value ofthe component as the value of the \"value\" attribute. If the\"styleClass\" attribute is specified, render its value as the valueof the \"class\" attribute.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "autocomplete",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If the value of this attribute is \"off\", render \"off\" as the value of the attribute. This indicates that the browser should disable its autocomplete feature for this component. This is useful for components that perform autocompletion and do not want the browser interfering. If this attribute is not set or the value is \"on\", render nothing."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Controls the data type and associated control of the element. Default value is text. If a value is specified for which already a more specific component exist, such as hidden, password, checkbox, radio, file, submit, image, reset and button, and the ProjectStage is set to Development, then the renderer must add a warning message stating that the more specific component should be preferred."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "alt",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "maxlength",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The maximum number of characters that may be entered in this field."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "size",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of characters used to determine the width of this field."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "inputTextarea",
        "description": "Renders an HTML \"textarea\" element. Decode Behavior See the encode description for the InputText renderer. Encode Behavior Render theclientId as the value of the \"name\" attribute. Render the currentvalu eof the component inside the \"textarea\"element.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "cols",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of columns to be displayed."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "rows",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of rows to be displayed."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "link",
        "description": "",
        "attribute": [
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "outcome",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The logical outcome used to resolve a navigation case."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "charset",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "fragment",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The identifier of the page fragment which should be brought into focus when the target page is rendered. The value of this attribute is appended to the end of target URL following a hash (#) mark. This notation is part of the standard URL syntax."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rev",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "disableClientWindow",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Disable appending the ClientWindow on the rendering of this element."
          },
          {
            "name": "includeViewParams",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Whether to include page parameters in the target URI."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "coords",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit."
          },
          {
            "name": "hreflang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rel",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "shape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "target",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed."
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink."
          }
        ]
      },
      {
        "name": "message",
        "description": "Render a single message for a specific component. Set-up for Rendering Obtain the \"summary\" and \"detail\" properties fromUIMessage component. If not present, keeptheempty string as the value, respectively. Obtain the firstFacesMessage to render from the component,usingthe \"for\" property of the UIMessage. Thiswill bethe only message we render. Obtain the severity style for thismessage. If the severity of the message isFacesMessage.SEVERITY_INFO, the severitystylecomes from the value of the \"infoStyle\" attribute. If theseverity of the message isFacesMessage.SEVERITY_WARN, the severitystylecomes from the value of the \"warnStyle\" attribute, and so on foreach of the severities, INFO, WARN, ERRORandFATAL. The same rules apply for obtainingtheseverity style class, but instead of \"infoStyle, warnStyle\", etcuse \"infoClass, warnClass\", etc. Obtain the \"style\",\"styleClass\" and \"layout\" attributes from theUIMessage component. If we have a \"style\"attribute and a severity style attribute, use the severity styleattribute as the value of the \"style\" attribute. If we have no\"style\" attribute, but do have a severity style, use theseverity style as the value of the \"style\" attribute. The sameprecedence rules apply for the style class. Obtain the value ofthe dir and langattributes. Rendering For the message renderer, we only render one row, for thefirstmessage. For the messages renderer, we render as many rows as wehave messages. If any of the \"dir\", \"lang\", \"style\" or\"styleClass\" attributes has a non-null value (as determinedabove), render a \"span\" element, outputting the value of the\"style\" attribute as the the value of the \"style\" attribute, andoutputting the value of the \"styleClass\" attribute as the value ofthe \"class\" attribute on the \"span\" element. Output the \"dir\" and\"lang\" attributes as well, if they are present. If theUIMessage has a \"tooltip\" attribute withthe value of\"true\", and the UIMessage has \"showSummary\"and\"showDetail\" properties with the value \"true\", if we haven'talready written out the \"span\", output the \"summary\" as the valueof the \"title\" attribute on the \"span\". If we haven't alreadywritten out a \"title\" attribute, and \"showSummary\" is true, outputthe summary. If \"showDetail\" is true, output the detail. Closeout the span if necessary.",
        "attribute": [
          {
            "name": "for",
            "required": true,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "errorClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"ERROR\"."
          },
          {
            "name": "fatalClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"FATAL\"."
          },
          {
            "name": "infoClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"INFO\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "tooltip",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of the message should be displayed as a tooltip."
          },
          {
            "name": "warnStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"WARN\"."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "errorStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"ERROR\"."
          },
          {
            "name": "fatalStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"FATAL\"."
          },
          {
            "name": "infoStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"INFO\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "warnClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"WARN\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "messages",
        "description": "Thesame as for theMessage renderer, but output all the messages. If an \"id\" attribute has beenspecified,it must be rendered on the outermost markup corresponding to thiscomponent. If the value of the \"layout\" attribute is\"table\", render nested \"table\", \"tr\", and \"td\" elements, in thatorder. If the value of the \"layout\" attribute is \"list\", or the\"layout\" attribute is not specified, render nested \"ul\", \"li\"elements, in that order. Output the value of the \"style\" attributeas the value of the \"style\" attribute, output the value of the\"styleClass\" attribute as the value of the \"class\" attribute, andoutput the dir and lang attributes. Output these values on the\"table\" element or the \"ul\" element. Output the values of the\"errorStyle\", \"fatalStyle\", \"infoStyle\", \"warnStyle\" attributes asthe value of the \"style\" attribute on either the \"tr\" element orthe \"li\" element. Output the values of the \"errorClass\",\"fatalClass\", \"infoClass\", \"warnClass\" attributes as the value ofthe \"class\" attribute on either the \"tr\" element or the \"li\"element. The component is a UIMessages, andthere isno \"for\" attribute. Therefore, use either nulltoobtain the messages from the FacesContextor the emptystring if the components \"globalOnly\" property istrue. If the layout was \"table\" close outthe tableelements, otherwise, close out the list elements. If an h:form does not contain a h:messages tag and the ProjectStage is set to Development the runtime will automatically add h:messages for debugging purposes.",
        "attribute": [
          {
            "name": "for",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "showDetail",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is \"false\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "errorStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"ERROR\"."
          },
          {
            "name": "fatalStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"FATAL\"."
          },
          {
            "name": "infoStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"INFO\"."
          },
          {
            "name": "layout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The type of layout markup to use when rendering error messages. Valid values are \"table\" (an HTML table) and \"list\" (an HTML list). If not specified, the default value is \"list\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "tooltip",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of the message should be displayed as a tooltip."
          },
          {
            "name": "warnStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of \"WARN\"."
          },
          {
            "name": "globalOnly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is \"false\"."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "showSummary",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is \"true\"."
          },
          {
            "name": "errorClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"ERROR\"."
          },
          {
            "name": "fatalClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"FATAL\"."
          },
          {
            "name": "infoClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"INFO\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "warnClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of \"WARN\"."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputFormat",
        "description": "Render parameterized text. Obtain thestyle, styleClass,dir, andlang attributees from this component. Ifany arepresent, render a \"span\" element. Output thestyleClass attribute (if present) as thevalue of theclass attribute. Output the styleattribute as the value of the styleattribute.Output the dir and langattributes aspass through attributes. Accrue a list of the values of all childUIParameter components of this component.If thereare one or more accumulated parameter values, convert the list ofparameter values to an Object array, callMessageFormat.format(), passing thevalue of this component as the firstargument, andthe array of parameter values as the second argument, and renderthe result. Otherwise, render the value ofthiscomponent unmodified.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "escape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "outputLabel",
        "description": "",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "escape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. If omitted, this flag is assumed to be \"true\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "for",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which this element is a label."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputLink",
        "description": "",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "coords",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rev",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "charset",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "hreflang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rel",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types."
          },
          {
            "name": "shape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "target",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed."
          },
          {
            "name": "type",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "outputScript",
        "description": "Render the markup for a <script> element thatrenders the script Resource specified by the optionalname attribute and library attributes. The implementation of this renderer must have a @ListenerForannotation attached to it, at the class level, declaring PostAddToViewEvent.classas the value of the systemEventClass attribute. The presence ofthis annotation on a renderer implies the renderer implements ComponentSystemEventListener,which this renderer must do. The implementation ofprocessEvent() must extract the UIComponentfrom the argument event and look for the presence of the key\"target\" in the component's attribute Map. Ifand only if such a key is present, the implementation ofprocessEvent() must pass the component to UIViewRoot.addComponentResource(). Decode Behavior No action is required during decode for this renderer. Encode Behavior Common Algorithm for Obtaining A Resource to Render This algorithm is used by all resource renderers to obtaina Resource instance which is then rendered in aspecific way depending on what kind of renderer is doing theencoding. Look in the component attribute Map for avalue under the key name. Look in the component attribute Map for avalue under the key library. This attribute isoptional, therefore, library may benull. Create the resource by callingApplication.getResourceHandler.createResource(name,library);. Common Encode Behavior This algorithm is used by all resource renderers to render theresource. encodeBegin() must take no action. Because this renderer returns true fromgetRendersChildren(), the encodeChildren()method must take the following action. If there is no name attribute, and theargument component has no children, andProjectStage is notProjectStage.Production, add aFacesMessage for this component's clientId to theFacesContext stating that if no name attribute ispresent, and no body content is present either, then the usershould take action to correct this problem. In this case,encodeChildren() must take no furtheraction. If there is no name attribute and the argumentcomponent does have children, the renderermust ensure that those children are encoded as usual. If there is a name attribute and theargument component does have children, therenderer must log a descriptive localized message stating thatthe child content will be ignored. The resource referenced bythe name attribute will be rendered inencodeEnd(). If there is a name attribute and theargument component does not have children,encodeChildren() must take no action. encodeEnd() must take specific action based onthe specific kind of resource being rendered. Use the algorithm Common Encode Behavior forencodeBegin(), encodeChildren() andgetRendersChildren(). For encodeEnd(), use the algorithm CommonAlgorithm for Obtaining A Resource to Render above toobtain a reference to the Resource to beencoded. If this is NOT the first time this Resource hasbeen referenced on this request take no action and return. Render a script element. Use the result from callingresource.getRequestPath() as the value of the \"src\"attribue. Use the result from callingresource.getContentType() as the value of the \"type\"attribute, unless the value equals text/javascript and the current doctype is a HTML5 doctype.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "library",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The libraryName for this resource."
          },
          {
            "name": "target",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The target area for which this resource will be rendered. For example, target=\"head\" would cause the resource to be rendered within the head element."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "name",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The resourceName for this resource. This attribute is required if the script is NOT inline."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputStylesheet",
        "description": "Render the markup for a <link> element thatrenders the style Resource specified by the optionalname and library attributes. Decode Behavior No action is required during decode for this renderer. Encode Behavior Use the algorithm Common Encode Behavior forencodeBegin(), encodeChildren() andgetRendersChildren(). For encodeEnd(), use the algorithm CommonAlgorithm for Obtaining A Resource to Render to obtain areference to the Resource to be encoded. Output a <link> element. Use the result fromcalling resource.getRequestPath() as the value of the\"href\" attribute. Use the result from callingresource.getContentType() as the value of the \"type\"attribute, unless the value equals text/css and the current doctype is a HTML5 doctype..Use the literal string \"stylesheet\" as the value of the \"rel\"attribute, and the literal string \"screen\" as the value of the \"media\"attribute. The implementation of this renderer must have a @ListenerForannotation attached to it, at the class level, declaring PostAddToViewEvent.classas the value of the systemEventClass attribute. The presence ofthis annotation on a renderer implies the renderer implements ComponentSystemEventListener,which this renderer must do. The implementation ofprocessEvent() must extract the UIComponentfrom the argument event pass it to UIViewRoot.addComponentResource(), specifyingthe literal string \"head\" as the last argument. The stylsheet renderer must ensure that any stylesheets are included in the <head> of the document.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "library",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The libraryName for this resource."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "name",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The resourceName for this resource. This attribute is required if the stylesheet is NOT inline."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "outputText",
        "description": "",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "escape",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to \"true\" by default."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "panelGrid",
        "description": "",
        "attribute": [
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "bgcolor",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name or code of the background color for this table."
          },
          {
            "name": "border",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around this table."
          },
          {
            "name": "captionStyle",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this caption is rendered."
          },
          {
            "name": "cellspacing",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the left side of the table and the leftmost column, the top of the table and the top of the top side of the topmost row, and so on for the right and bottom of the table. It also specifies the amount of space to leave between cells."
          },
          {
            "name": "columns",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of columns to render before starting a new row."
          },
          {
            "name": "footerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this table."
          },
          {
            "name": "headerClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this table."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "rowClasses",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the rows of this table. A space separated list of classes may also be specified for any individual row. Thes styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "summary",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Summary of this table's purpose and structure, for user agents rendering to non-visual media such as speech and Braille."
          },
          {
            "name": "width",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Width of the entire table, for visual user agents."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "bodyrows",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated list of row indices for which a new \"tbody\" element should be started (and any previously opened one should be ended)."
          },
          {
            "name": "captionClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any caption generated for this table."
          },
          {
            "name": "cellpadding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the border of each cell and its contents."
          },
          {
            "name": "columnClasses",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of actual column children of the UIData, no \"class\" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of actual column children of the UIData, the elements at the posisiton in the list after the last column are ignored."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "frame",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which sides of the frame surrounding this table will be visible. Valid values are: none (no sides, default value); above (top side only); below (bottom side only); hsides (top and bottom sides only); vsides (right and left sides only); lhs (left hand side only); rhs (right hand side only); box (all four sides); and border (all four sides)."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "rules",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which rules will appear between cells within this table. Valid values are: none (no rules, default value); groups (between row groups); rows (between rows only); cols (between columns only); and all (between all rows and columns)."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "panelGroup",
        "description": "",
        "attribute": [
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "layout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The type of layout markup to use when rendering this group. If the value is \"block\" the renderer must produce an HTML \"div\" element. Otherwise HTML \"span\" element must be produced."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" property on generated markup."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectBooleanCheckbox",
        "description": "Renders an HTML \"input\" element of type \"checkbox\". Decode Behavior Obtain the Map from the\"requestParameterMap\"property of the ExternalContext. If thereis noentry in the Map for the \"clientId\" of thiscomponent, pass \"false\" to the setSubmittedValue()method of the component, which must be an instance ofEditableValueHolder. If there is an entry,and itsvalue is equal, ignoring case and without quotes, to any of theStrings: \"on\", \"yes\" or \"true\" pass true to thesetSubmittedValue() method of thecomponent. Encode Behavior Render the clientId of the component as the value of the \"name\"attribute. If the current value of the component is \"true\",output the \"checked\" attribute (must be rendered aschecked=\"checked\").If the \"styleClass\" attribute is specified, render its value as thevalueof the \"class\" attribute.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectManyCheckbox",
        "description": "Render an HTML checkboxlist. Decode Behavior See the \"DecodeBehavior for UISelectMany Components\" section. Encode Behavior If the \"layout\"attribute is specified, and its value is \"list\", render a \"ul\"element as root element, otherwiserender a \"table\" element. If the \"styleClass\" is specified,render the value of the \"styleClass\" attribute as the value of the\"class\" attribute on the root element. If the \"style\", or\"border\" attributes are specified, pass them thru and render their values as the \"style\"and \"border\" attributes on the root element, respectively.Ifthe \"layout\" attribute is specified, and its value is\"pageDirection\", render the children elements vertically,otherwise horizontally, in the root element. If any of the children arean instance of SelectItemGroup, render them as a nested root element.Each of the children are ultimately rendererd as follows. Renderan \"input\" element of \"type\" \"checkbox\" for each child component.Render the \"name\" attribute on the \"input\" element with the valueof the clientId of the component. Render an\"id\"attribute on the \"input\" element. Each \"id\" value must be unique.If the current SelectItem.isDisabled() returns true, render\"disabled\" as the value of the \"disabled\" attribute. Close outthe \"input\" element. Render a \"label\" element. Render the \"for\"attribute of the \"label\" element whose value is the corresponding\"input\" element's \"id\" value. Render any \"style\" as the \"class\"attribute on the \"label\" element. If the current checkbox would berendered as being checked, and there is a \"selectedClass\"attribute, append a space, followed by the value of the\"selectedClass\" attribute to any existing \"class\" attribute valueon the label element. Otherwise, render the value of the\"selectedClass\" attribute as the value of the \"class\" attribute onthe label element. If the current checkbox would be rendered asbeing not checked, and there is a \"unselectedClass\" attribute,append a space, followed by the value of the \"unselectedClass\"attribute to any existing \"class\" attribute value on the labelelement. Otherwise, render the value of the \"unselectedClass\"attribute as the value of the \"class\" attribute on the labelelement. Close out the starting \"label\" element andrenderthe label value from SelectItem.getLabel(). Close out the \"label\"element. As an exception to the general rules about how to handlethe \"id\" attribute, render it as an attribute on the outer \"table\"element, the value of which is the clientIdof thecomponent per the rules at the beginning of this specification.The value of the current SelectItem is rendered as the value ofthe \"value\" attribute. Coerce the value of the currently renderedchild to the type of the parent UISelectMany value following theExpression Language coercion rules, before comparing the values.If the value of the enclosing UISelectMany matches the currentvalue, render \"checked\" as the value of the \"checked\" attribute.See the \"Renderingthe option elements\" specification forListboxRenderer for more detail on how torender the\"option\" elements in this renderer.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "border",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around the table containing the options list. This attribute is ignored when the \"layout\" attribute equals to \"list\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "unselectedClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on unselected options."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "collectionType",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "layout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Orientation of the options list to be created. Valid values are \"pageDirection\" (list is laid out vertically), or \"lineDirection\" (list is laid out horizontally). If not specified, the default value is \"lineDirection\"."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "selectedClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on selected options."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectManyListbox",
        "description": "Render an HTML optionlist. Decode Behavior This section documents the decode behavior for allrenderersthat handle UISelectMany or UISelectOnecomponents. Decode Behavior forUISelectMany components Obtain the Map from the\"requestParameterValuesMap\" property of theExternalContext. If the Mapcontainsan entry for the \"clientId\" of the component, pass the value ofthe entry, cast to a String [], to thesetSubmittedValue() method of thecomponent, whichmust be an EditableValueHolder. If theMap does not contain an entry, create anemptyString array and callsetSubmittedValue() with it. Please check the javadoc forUISelectMany.getConvertedValue()for additional requirements for renderers that render this kindof component. Decode Behavior forUISelectOne components Obtain the Map from the\"requestParameterMap\"property of the ExternalContext. If thereis aMap entry for the \"clientId\" property ofthecomponent, pass it to the setSubmittedValue()methodof the component. If theMap does not contain an entry, callsetSubmittedValue() passing an emptyString as the argument. Encode Behavior Render an HTML \"select\" element. Render the clientId ofthe component as the value of the \"name\" attribute. If the\"styleClass\"attribute is specified, render its value as the value of the \"class\"attribute on the \"select\" element. If the component is aUISelectMany instance, render \"multiple\" asthe value of the\"multiple\" attribute. If the \"size\" attribute is specified, renderitsvalue as the value of the \"size\" attribute. Otherwise use the numberofitems as the value of the \"size\" attribute. Rendering the \"option\" elements The only valid children of this component areUISelectItem or UISelectItemsinstances. Iterate over the children of this component, and accruea list of jakarta.faces.model.SelectIteminstances.If the current child is aSelectItem whose noSelctionPropertyistrue, and the UISelectOneorUISelectMany parent of this option has oneor moreselected values that are not the \"no selection\"SelectItem, and thecomponent has a\"hideNoSelectionLabel\" attribute whose value is true,then the current option, which is the \"no selection\" option, mustnot be rendered. If the current child is aUISelectItem create a SelectIteminstancefrom its itemValue, itemLabel, itemEscaped, anditemDescription properties, add it to thelist. Ifthe current child is a UISelectItemsinstance, callits getValue() method. If the result is aSelectItem bean, add it to the list. If theresultis an array of SelectItem beans, add eachone to thelist. If the result is a Collection ofSelectItem beans, add each one to the list.If theresult is a Map, create a SelectItembean for each entry in the Map using thekey as thelabel, the value as the value, and null asthedescription. Iterate over the list of SelectItembeans. If thecurrent element is a SelectItemGroup,render an\"optgroup\" element with a \"label\" attribute, the value of which isthe \"label\" property from the current element, then callgetSelectItems() and render each element asbelow.If the current element is not a SelectItemGroup,render an \"option\" element. Follow the conversion rules in thespec to obtain a renderable String from the\"value\"property of the current element, render that as the value of the\"value\" atribute. Now it is time to see if the current element isthe selected value. Call its getSubmittedValue()method, casting the result to an Object [],otherwisethe component must be a UISelectOneinstance, callits getSubmittedValue() method and createanObject [] around the result. Determine thetype ofthe resultant array, if the resultant array is non-null, otherwisethe type is String. Coerce the current itemvalue tothis type following the Expression Language coercion rules. Ifthe resultant array is non-null, we look in the array for a valuethat, when we pass the renderable value to itsequals() method, it returns true,meaning the current element is selected. If the resultant arrayis null, if the component is aUISelectMany, call its getValue()method. If the result is a List obtain thevalues inthe list as an array. Otherwise, the component must be aUISelectOne instance. Call itsgetValue() method, which must be an Objectarray.Look for an element in the resultant array that, 1. when we passthe renderable value to its equals()method, itreturns true , or 2. if the renderablevalue is null,and there is a null element in the array, also conclude that thecurrent element is selected. Otherwise the current element is notselected. Now, if the current value is selected, write out anHTML boolean property \"selected\". If the currentSelectItem.isDisabled() returns true, render \"disabled\" as thevalue of the \"disabled\" attribute. If the value of the escapeproperty is true, use the writeText()method ofResponseWriter to write out the value ofthelabel property. Otherwise, use thewrite() method of the ResponseWritertodo so.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "collectionType",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "size",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Number of available options to be shown at all times. If not specified, all available options are shown."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectManyMenu",
        "description": "Render an HTML optionlist. Decode Behavior See the \"DecodeBehavior for UISelectMany Components\" section. Encode Behavior Render an HTML \"select\" element. Render the clientId ofthe component as the value of the \"name\" attribute. If the\"styleClass\"attribute is specified, render its value as the value of the \"class\"attribute on the \"select\" element. If the componentto be rendered is a UISelectMany, render \"multiple\" as the value ofthe \"multiple\" attribute. Render \"1\" as the value of the \"size\"attribute. See the \"Rendering the optionelements\" specification for ListboxRendererformore detail on how to render the \"option\" elements in thisrenderer.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "collectionType",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "selectOneListbox",
        "description": "Render an HTML option list. Decode Behavior See the \"DecodeBehavior for UISelectOne Components\" section. Encode Behavior Render an HTML \"select\" element. Render the clientId ofthe component as the value of the \"name\" attribute. If the\"styleClass\"attribute is specified, render its value as the value of the \"class\"attribute on the \"select\" element. If the componentto be rendered is a UISelectMany, render \"multiple\" as the value ofthe \"multiple\" attribute. If the \"size\" attribute is specified,render its value as the value of the \"size\" attribute. Otherwiseuse the number of items as the value of the \"size\" attribute. Seethe \"Rendering the optionelements\" specification for ListboxRendererformore detail on how to render the \"option\" elements in thisrenderer.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "size",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Number of available options to be shown at all times. If not specified, all available options are shown."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      },
      {
        "name": "selectOneMenu",
        "description": "Render an HTML option list. Decode Behavior See the \"DecodeBehavior for UISelectOne Components\" section. Encode Behavior Render an HTML \"select\" element. Render the clientId of thecomponent as the value of the \"name\" attribute. If the\"styleClass\" attribute is specified, render its value as the valueof the \"class\" attribute on the \"select\" element. If the componentto be rendered is a UISelectMany, render \"true\" as the value ofthe \"multiple\" attribute. Use the number of items as the value ofthe \"size\" attribute. See the \"Renderingthe option elements\" specification forListboxRenderer for more detail on how torender the\"option\" elements in this renderer.",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectOneRadio",
        "description": "Render a set of html \"input\" elements of type \"radio\". Decode Behavior Encode Behavior",
        "attribute": [
          {
            "name": "converter",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component."
          },
          {
            "name": "id",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container."
          },
          {
            "name": "rendered",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true."
          },
          {
            "name": "requiredMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the \"required\" facility, if the \"required\" facility is used."
          },
          {
            "name": "validatorMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."
          },
          {
            "name": "valueChangeListener",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent))",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that \"this value changed\"."
          },
          {
            "name": "border",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around the table containing the options list. This attribute is ignored when the \"layout\" attribute equals to \"list\"."
          },
          {
            "name": "disabled",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled=\"disabled\"."
          },
          {
            "name": "enabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options."
          },
          {
            "name": "label",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component."
          },
          {
            "name": "layout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Orientation of the options list to be created. Valid values are \"pageDirection\" (list is laid out vertically), or \"lineDirection\" (list is laid out horizontally). If not specified, the default value is \"lineDirection\"."
          },
          {
            "name": "onchange",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus."
          },
          {
            "name": "ondblclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element."
          },
          {
            "name": "onkeydown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element."
          },
          {
            "name": "onkeyup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element."
          },
          {
            "name": "onmousemove",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element."
          },
          {
            "name": "onmouseover",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element."
          },
          {
            "name": "onselect",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user."
          },
          {
            "name": "style",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered."
          },
          {
            "name": "tabindex",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."
          },
          {
            "name": "binding",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "converterMessage",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter."
          },
          {
            "name": "immediate",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase."
          },
          {
            "name": "required",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component."
          },
          {
            "name": "validator",
            "required": false,
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object))",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."
          },
          {
            "name": "value",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component."
          },
          {
            "name": "accesskey",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element."
          },
          {
            "name": "dir",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are \"LTR\" (left-to-right) and \"RTL\" (right-to-left)."
          },
          {
            "name": "disabledClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options."
          },
          {
            "name": "hideNoSelectionOption",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The \"no selection option\", if any, must be hidden."
          },
          {
            "name": "lang",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component."
          },
          {
            "name": "onblur",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus."
          },
          {
            "name": "onclick",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element."
          },
          {
            "name": "onfocus",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus."
          },
          {
            "name": "onkeypress",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element."
          },
          {
            "name": "onmousedown",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element."
          },
          {
            "name": "onmouseout",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element."
          },
          {
            "name": "onmouseup",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element."
          },
          {
            "name": "readonly",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly=\"readonly\"."
          },
          {
            "name": "styleClass",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the \"class\" attribute on generated markup."
          },
          {
            "name": "title",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component."
          },
          {
            "name": "role",
            "required": false,
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a \"role\" attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute."
          }
        ]
      }
    ]
  }
}