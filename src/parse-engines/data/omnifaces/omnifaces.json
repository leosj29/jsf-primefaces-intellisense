{
  "components": {
    "component": [
      {
        "description": "The <o:tree> allows the developers to have full control over the markup of a tree hierarchy by declaring the appropriate JSF components or HTML elements in the markup. The <o:tree> does namely not render any HTML markup by itself.",
        "name": "tree",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The current value of this component. As far only TreeModel is allowed as value.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The name of the request attribute which exposes the wrapped data of the current node of the treemodel.",
            "name": "var",
            "required": "false"
          },
          {
            "description": "The name of the request attribute which exposes the current node of the tree model.",
            "name": "varNode",
            "required": "false"
          }
        ]
      },
      {
        "description": " The <o:treeNode> represents the parent tree node. Within this component, the var attribute of the <o:tree> will expose the parent tree node. Each of its children is processed by <o:treeNodeItem> on which the var attribute of the <o:tree> in turn exposes each child of the parent tree node. The optional level attribute can be used to specify for which tree node level as obtained by TreeModel#getLevel() the <o:treeNode> should be rendered. The root tree node has level 0. If the level attribute is unspecified, then the <o:treeNode> will be rendered for any tree node level which hasn't already a <o:treeNode level='x'> specified. ",
        "name": "treeNode",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The tree node level to render the node children for. The root level is 0.",
            "name": "level",
            "required": "false",
            "type": "java.lang.Integer"
          }
        ]
      },
      {
        "description": " The <o:treeNodeItem> represents the child item of the parent tree note as represented by <o:treeNode>. Within this component, the var attribute of the parent <o:tree> component will expose the child tree node. Within <o:treeNodeItem> you can use <o:treeInsertChildren> to declare the place where to recursively render the <o:treeNode> whereby the current child item is in turn interpreted as a parent tree node (i.e. where you'd like to insert the grand-children). ",
        "name": "treeNodeItem",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " The <o:treeInsertChildren> represents the insertion point for the grand children. This is in turn further interpreted as <o:treeNode>. ",
        "name": "treeInsertChildren",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " This component includes the output from a resource located at the given path. This path can not extend outside of the current Servlet context. A resource is either a Servlet or a JSP page.",
        "name": "resourceInclude",
        "attribute": [
          {
          "description": "A String specifying the pathname to the resource",
          "name": "path",
          "required": "true",
          "type": "java.lang.String"
        }
      ]
      },
      {
        "description": " DeferredScript is a component which defers the loading of the given script resource to the window load event. In other words, the given script resource is only loaded when the window is really finished with loading. So, the enduser can start working with the webpage without waiting for the additional scripts to be loaded. Usually, it are those kind of scripts which are just for progressive enhancement and thus not essential for the functioning of the webpage. This will give bonus points with among others the Google PageSpeed tool, on the contrary to placing the script at bottom of body, or using defer='true' or even async='true'. ",
        "name": "deferredScript",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The 'library name' part of the resource identifier.",
            "name": "library",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The 'resource name' part of the resource identifier.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The group name on which the deferred script resources should be combined by CombinedResourceHandler. All deferred scripts resources having the same combined group name will be combined into a single deferred script in the place where the first member of the group occurs in the component tree.",
            "name": "group",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "JavaScript code to execute right before the script loading begins.",
            "name": "onbegin",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "JavaScript code to execute when the script loading is successfully completed.",
            "name": "onsuccess",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "JavaScript code to execute when the script loading has failed.",
            "name": "onerror",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " o:onloadScript is an extension to <h:outputScript> which will be executed in the end of the HTML body (thus when all HTML elements are initialized in the HTML DOM tree) and will re-execute its script body on every ajax request. This is particularly useful if you want to re-execute a specific helper script to manipulate the HTML DOM tree, such as (re-)adding fancy tooltips, performing highlights, etcetera, also after changes in the HTML DOM tree on ajax responses. You can put it anywhere in the view, it will always be relocated to the end of body. <o:onloadScript>alert('OnloadScript is invoked!');</o:onloadScript>",
        "name": "onloadScript",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " o:highlight is a helper component which highlights all invalid UIInput components and the associated labels by adding an error style class to them. Additionally, it by default focuses the first invalid UIInput component. The <o:highlight /> component can be placed anywhere in the view, as long as there's only one of it. Preferably put it somewhere in the master template for forms. <h:form> <h:inputText value='#{bean.input1}' required='true' /> <h:inputText value='#{bean.input1}' required='true' /> <h:commandButton value='Submit' action='#{bean.submit}' /> </h:form> <o:highlight /> The default error style class name is error. You need to specify a CSS style associated with the class yourself. For example, label.error { color: #f00; } input.error, select.error, textarea.error { background-color: #fee; } You can override the default error style class by the styleClass attribute: <o:highlight styleClass='invalid' /> You can disable the default focus on the first invalid input element setting the focus attribute. <o:highlight styleClass='invalid' focus='false' />",
        "name": "highlight",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The error style class which is to be applied on invalid inputs. Defaults to error.",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the first error element should gain focus. Defaults to true.",
            "name": "focus",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:conditionalComment is an UIComponent which renders a conditional comment. Conditional comments are an IE specific feature which enables the developer to (out)comment blocks of HTML depending on whether the client is using IE and if so even which version.",
        "name": "conditionalComment",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The if condition of the conditional comment. This is exactly the value you would usein <!--[if ...]>, e.g. if='lte IE 7'.",
            "name": "if",
            "required": "true",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " o:validateAll validates validates if ALL of the given UIInput components have been filled out. The default message is {0}: Please fill out all of those fields",
        "name": "validateAll",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Whether to invalidate all fields or only those which are empty.",
            "name": "invalidateAll",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateAllOrNone validates validates if at least ALL of the given UIInput components have been filled out or that NONE of the given UIInput components have been filled out. The default message is {0}: Please fill out all or none of those fields For general usage instructions, refer validateAll tag documentation. ",
        "name": "validateAllOrNone",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Whether to invalidate all fields or only those which are empty.",
            "name": "invalidateAll",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateOneOrMore validates if at least ONE of the given UIInput components has been filled out. The default message is {0}: Please fill out at least one of those fields For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. ",
        "name": "validateOneOrMore",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateOne validates if ONLY ONE of the given UIInput components has been filled out. The default message is {0}: Please fill out only one of those fields For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. ",
        "name": "validateOne",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateOneOrNone validates if ONLY ONE of the given UIInput components has been filled out or that NONE of the given UIInput components have been filled out. The default message is {0}: Please fill out only one or none of those fields For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. ",
        "name": "validateOneOrNone",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateEqual validates if ALL of the given UIInput components have the same value. The default message is {0}: Please fill out the same value for all of those fields For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. ",
        "name": "validateEqual",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " o:validateUnique validates if ALL of the given UIInput components have an unique value. The default message is {0}: Please fill out an unique value for all of those fields For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. ",
        "name": "validateUnique",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " ValidateOrder validates if the values of the given UIInput components as specified in the components attribute are in the order as specified by the type attribute which accepts the following values: lt (default): from least to greatest, without duplicates. lte: from least to greatest, allowing duplicates (equal values next to each other). gt: from greatest to least, without duplicates. gte: from greatest to least, allowing duplicates (equal values next to each other). The default message is {0}: Please fill out the values of all those fields in order For general usage instructions, refer validateAll tag documentation. The invalidateAll attribute has no effect on this component and is therefore not listed. This validator has the additional requirement that the to-be-validated values must implement Comparable. This validator throws an IllegalArgumentException when one or more of the values do not implement it. ",
        "name": "validateOrder",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The ordering type, available values are 'lt', 'lte', 'gt' and 'gte', defaults to 'lt'.",
            "name": "type",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " ValidateMultiple allows the developer to validate multiple fields by a custom validator method: ",
        "name": "validateMultiple",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The space separated collection of client IDs of UI input components to be validated.",
            "name": "components",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "This attribute can take either a ValueExpression representing an implementation of theMultiFieldValidator instance, or a MethodExpression representing a validatormethod with the following signature: boolean validate(FacesContext context, List<UIInput> components, List<Object> values)that will be called during Process Validations phase to perform correctness checks on the value ofthis component.",
            "name": "validator",
            "required": "true",
            "type": "java.lang.Object"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with a comma separated string of labels of the referenced input components.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@this' which is thevalidator component itself. Other available values are '@all' which will show the message for all ofthe referenced components and '@invalid' which will show the message for only the invalidatedcomponents. Any other space separated value will be treated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The <o:validator> basically extends the <f:validator> tag family with the possibility to evaluate the value expression in all attributes on a per request basis instead of on a per view build time basis. This allows the developer to change the attributes on a per request basis, such as the disabled attribute.",
        "name": "validator",
        "attribute": [
          {
            "description": "A ValueExpression that evaluates to an object that implements the javax.faces.validator.Validatorinterface.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.validator.Validator"
          },
          {
            "description": "Validator identifier of the Validator to be created and registered.",
            "name": "validatorId",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within thecomposite component inside of which this tag is nested.",
            "name": "for",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will besubstituted with the label of the referenced input component. Note that this attribute is ignored when the parent component has already validatorMessage specified.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A boolean value enabling request based determination of whether or not this validator is enabled onthe enclosing component.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The <o:converter> basically extends the <f:converter> tag family with the possibility to evaluate the value expression in all attributes on a per request basis instead of on a per view build time basis. This allows the developer to change the attributes on a per request basis. When you specify for example the standard <f:convertDateTime> by converterId='javax.faces.DateTime', then you'll be able to use all its attribuces such as pattern and locale as per its documentation, but then with the possibility to supply request based value expressions. ",
        "name": "converter",
        "attribute": [
          {
            "description": "A ValueExpression that evaluates to an object that implements the javax.faces.convert.Converterinterface.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Converter identifier of the Converter to be created and registered.",
            "name": "converterId",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "If present, this attribute refers to the value of one of the exposed attached objects within thecomposite component inside of which this tag is nested.",
            "name": "for",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " The <o:inputFile> is a component that extends the standard <h:inputFile> and adds support for multiple, directory, accept and maxsize attributes, along with built-in server side validation on accept and maxsize attributes. Additionally, it makes sure that the value of HTML file input element is never rendered. The standard <h:inputFile> renders Part#toString() to it which is unnecessary. ",
        "name": "inputFile",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The ValueExpression to store the uploaded file(s) in. For single file selection, it must refer a javax.servlet.http.Part property. For multiple file selection, it must a java.util.List<Part> property.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "Whether or not to allow multiple file selection.Defaults to false.",
            "name": "multiple",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Whether or not to enable directory selection.Defaults to false.",
            "name": "directory",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Comma separated string of mime types of files to filter in client side file browse dialog.This will also be validated in server side.",
            "name": "accept",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Validation message to be displayed when the condition in accept attribute is violated.",
            "name": "acceptMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Maximum size in bytes for each selected file.This will be validated in both client and server side.The client side validation requires a message(s) component with an ID.",
            "name": "maxsize",
            "required": "false",
            "type": "java.lang.Long"
          },
          {
            "description": "Validation message to be displayed when the condition in maxsize attribute is violated.",
            "name": "maxsizeMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": " A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter. ",
            "name": "converterMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase. ",
            "name": "immediate",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " Flag indicating that the user is required to provide a submitted value for this input component. ",
            "name": "required",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used. ",
            "name": "requiredMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void. ",
            "name": "validator",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'. ",
            "name": "valueChangeListener",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). These attributes are case sensitive when rendering to XHTML, so care must be taken to have the correct case. ",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'. ",
            "name": "disabled",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " A localized user presentable name for this component. ",
            "name": "label",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Code describing the language used in the generated markup for this component. ",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this element loses focus. ",
            "name": "onblur",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this element loses focus and its value has been modified since gaining focus. ",
            "name": "onchange",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is clicked over this element. ",
            "name": "onclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is double clicked over this element. ",
            "name": "ondblclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this element receives focus. ",
            "name": "onfocus",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed down over this element. ",
            "name": "onkeydown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed and released over this element. ",
            "name": "onkeypress",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is released over this element. ",
            "name": "onkeyup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is pressed down over this element. ",
            "name": "onmousedown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved within this element. ",
            "name": "onmousemove",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved away from this element. ",
            "name": "onmouseout",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved onto this element. ",
            "name": "onmouseover",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is released over this element. ",
            "name": "onmouseup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when text within this element is selected by the user. ",
            "name": "onselect",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'. ",
            "name": "readonly",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute. ",
            "name": "role",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The number of characters used to determine the width of this field. ",
            "name": "size",
            "required": "false",
            "type": "int"
          },
          {
            "description": " CSS style(s) to be applied when this component is rendered. ",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup. ",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767. ",
            "name": "tabindex",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Advisory title information about markup elements generated for this component. ",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " The <o:inputHidden> is a component that extends the standard <h:inputHidden> and changes the behavior to immediately convert, validate and update during apply request values phase, regardless of any conversion/validation errors on other UIInput components within the same form. The standard <h:inputHidden> follows the same lifecycle as other UIInput components which is in the end unintuive as hidden input fields are usually under control of the developer. ",
        "name": "inputHidden",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": " The current value of this component. ",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": " Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": " A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter. ",
            "name": "converterMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase. ",
            "name": "immediate",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " Flag indicating that the user is required to provide a submitted value for this input component. ",
            "name": "required",
            "required": "false",
            "type": "java.lang.Boolean"
          },
          {
            "description": " A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used. ",
            "name": "requiredMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void. ",
            "name": "validator",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'. ",
            "name": "valueChangeListener",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": "ViewParameter is a component that extends the standard UIViewParameter and provides astateless mode of operation and fixes the issue wherein null model values are converted to empty string parametersin query string (e.g. when includeViewParams=true) and the (bean) validation never being triggeredwhen the parameter is completely absent in query string, causing e.g. @NotNull to fail. The standard UIViewParameter implementation calls the model setter again after postback. This is not always desiredwhen being bound to a view scoped bean and can lead to performance problems when combined with an expensive converter.To solve this, this component by default stores the submitted value as a component property instead of in the model(and thus in the view state in case the binding is to a view scoped bean). The standard UIViewParameter implementation calls the converter regardless of whether the evaluated model value isnull or not. As converters by specification return an empty string in case of null value,this is being added to the query string as an empty parameter. This is not desired. The standard UIViewParameter implementation uses an internal 'is required' check when the submitted value isnull, hereby completely bypassing the standard UIInput validation, including any beanvalidation annotations and even the PreValidateEvent and PostValidateEvent events. This is notdesired. You can use it the same way as <f:viewParam>, you only need to change f: too:. ",
        "name": "viewParam",
        "attribute": [
          {
            "description": "The name of the request parameter from which the value for this componentis retrieved on an initial request or to override the stored value on apostback.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the converter message, replacing any messagethat comes from the converter.",
            "name": "converterMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The component identifier for this component. This value must beunique within the closest parent component that is a namingcontainer.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that the user is required to provide a submittedvalue for this input component. This component extends the behavior ofthis by only making this required for a non-faces request.",
            "name": "required",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validation message for the 'required'facility, if the 'required' facility is used.",
            "name": "requiredMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "MethodExpression representing a validator method that will becalledduring Process Validations to perform correctness checks on thevalue of this component. The expression must evaluate to apublicmethod that takes FacesContext, UIComponent, and Objectparameters,with a return type of void.",
            "name": "validator",
            "required": "false"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validator message, replacing anymessage that comes from the validator.",
            "name": "validatorMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A ValueExpression to which the value of the request parameter, asdetermined by the name attribute, is bound. The resolved value of thisexpression is used when encoding the view parameter into a bookmarkable link orredirect URL with view parameter encoding enabled. If this attribute is omitted,the value of the request parameter will instead be the local value of theUIViewParameter.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The default value to be used when actual value of the request parameter is null or empty.",
            "name": "default",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "MethodExpression representing a value change listener methodthat will be notified when a new value has been set for thisinput component. The expression must evaluate to a publicmethod that takes a ValueChangeEventparameter,with a return type of void, orto a public method that takes no arguments with a return typeof void. In the latter case, the method has no way of easilyknowing what the new value is, but this can be useful in caseswhere a notification is needed that 'this valuechanged'.",
            "name": "valueChangeListener",
            "required": "false"
          },
          {
            "description": "The maximum number of characters that maybe entered in this field.",
            "name": "maxlength",
            "required": "false",
            "type": "int"
          },
          {
            "description": "The ValueExpression linking this component to a property in abacking bean",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " The <o:scriptParam> is a component that extends the standard <f:viewParam> with support for setting results of client-side evaluated JavaScript code in bean. Usage It's similar to the <f:viewParam>. <f:metadata> <o:scriptParam script='new Date().getTimezoneOffset()' value='#{bean.clientTimeZoneOffset}' /> <o:scriptParam script='window.screen.width' value='#{bean.clientScreenWidth}' /> <o:scriptParam script='someFunctionName()' value='#{bean.resultOfSomeFunctionName}' /> </f:metadata> You can use the render attribute to declare which components should be updated when a script parameter has been set. <f:metadata> <o:scriptParam script='foo()' value='#{bean.resultOfFoo}' render='fooResult' /> </f:metadata> ... <h:body> ... <h:panelGroup id='fooResult'> <ui:fragment rendered='#{not empty bean.resultOfFoo}'> The result of foo() script is: #{bean.resultOfFoo} </ui:fragment> </h:panelGroup> ... </h:body> Note that as it extends from the standard <f:viewParam>, its built-in conversion and validation functionality is also supported on this component. So, the following is also possible: <f:metadata> <o:scriptParam script='window.navigator' value='#{bean.clientNavigator}' /> </f:metadata> With a clientNavigator being an instance of javax.json.JsonObject: private JsonObject clientNavigator; And this converter: package com.example; import java.io.StringReader; import javax.faces.component.UIComponent; import javax.faces.context.FacesContext; import javax.faces.convert.Converter; import javax.faces.convert.ConverterException; import javax.faces.convert.FacesConverter; import javax.json.Json; import javax.json.JsonObject; &#64;FacesConverter(forClass = JsonObject.class) public class JsobObjectConverter implements Converter<JsonObject> { &#64;Override public String getAsString(FacesContext context, UIComponent component, JsonObject modelValue) { if (modelValue == null) { return ''; } return modelValue.toString(); } &#64;Override public JsonObject getAsObject(FacesContext context, UIComponent component, String submittedValue) { if (submittedValue == null || submittedValue.isEmpty()) { return null; } try { return Json.createReader(new StringReader(submittedValue)).readObject(); } catch (Exception e) { throw new ConverterException('Not a valid JSON object', e); } } } ",
        "name": "scriptParam",
        "attribute": [
          {
            "description": "The script to be evaluated.",
            "name": "script",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the converter message, replacing any messagethat comes from the converter.",
            "name": "converterMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The component identifier for this component. This value must beunique within the closest parent component that is a namingcontainer.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that the user is required to provide a submittedvalue for this input component. This component extends the behavior ofthis by only making this required for a non-faces request.",
            "name": "required",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validation message for the 'required'facility, if the 'required' facility is used.",
            "name": "requiredMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "MethodExpression representing a validator method that will becalledduring Process Validations to perform correctness checks on thevalue of this component. The expression must evaluate to apublicmethod that takes FacesContext, UIComponent, and Objectparameters,with a return type of void.",
            "name": "validator",
            "required": "false"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validator message, replacing anymessage that comes from the validator.",
            "name": "validatorMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A ValueExpression to which the value representing the evaluated result of the script, asdetermined by the script attribute, is bound.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "A space separated string of client IDs to update after the script param has been set in bean on page load.",
            "name": "render",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The ValueExpression linking this component to a property in abacking bean",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " The <o:hashParam> is a component that extends the standard <f:viewParam> with support for setting hash query parameter values in bean and automatically reflecting updated model values in hash query string. The 'hash query string' is the part in URL after the # which could be formatted in the same format as a regular request query string (the part in URL after the ?). An example: https://example.com/page.xhtml#foo=baz&bar=kaz This specific part of the URL (also called hash fragment identifier) is by default not sent to the server. This component will on page load send it anyway and on every ajax request update the hash query string in client side when the model value has changed in server side. Usage It's very similar to the <o:viewParam>. <f:metadata> <o:hashParam name='foo' value='#{bean.foo}' /> <o:hashParam name='bar' value='#{bean.bar}' /> </f:metadata> This only requires that the JSF page has at least one {@link UIForm} component, such as <h:form> or <o:form>, otherwise the <o:hashParam> won't be able to fire the ajax request which sets the with hash query parameter values in bean. In such case an error will be printed to JS console when the project stage is Development. You can use the render attribute to declare which components should be updated when a hash parameter value is present. <f:metadata> <o:hashParam name='foo' value='#{bean.foo}' render='fooResult' /> <o:hashParam name='bar' value='#{bean.bar}' /> </f:metadata> ... <h:body> ... <h:panelGroup id='fooResult'> ... </h:panelGroup> ... </h:body> You can use the default attribute to declare a non-null value which should be interpreted as the default value. In other words, when the current model value matches the default value, then the hash parameter will be removed. <f:metadata> <o:hashParam name='foo' value='#{bean.foo}' /> <o:hashParam name='bar' value='#{bean.bar}' default='kaz' /> </f:metadata> When #{bean.foo} is 'baz' and #{bean.bar} is 'kaz' or empty, then the reflected hash query string will become https://example.com/page.xhtml#foo=baz. If #{bean.bar} is any other value, then it will appear in the hash query string. ",
        "name": "hashParam",
        "attribute": [
          {
            "description": "The name of the hash parameter from which the value for this componentis retrieved on an initial request or to override the stored value on apostback.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the converter message, replacing any messagethat comes from the converter.",
            "name": "converterMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The component identifier for this component. This value must beunique within the closest parent component that is a namingcontainer.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating that the user is required to provide a submittedvalue for this input component. This component extends the behavior ofthis by only making this required for a non-faces request.",
            "name": "required",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validation message for the 'required'facility, if the 'required' facility is used.",
            "name": "requiredMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "MethodExpression representing a validator method that will becalledduring Process Validations to perform correctness checks on thevalue of this component. The expression must evaluate to apublicmethod that takes FacesContext, UIComponent, and Objectparameters,with a return type of void.",
            "name": "validator",
            "required": "false"
          },
          {
            "description": "A ValueExpression enabled attribute that, if present, will beused as the text of the validator message, replacing anymessage that comes from the validator.",
            "name": "validatorMessage",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A ValueExpression to which the value of the hash parameter, asdetermined by the name attribute, is bound. The resolved value of thisexpression is used when encoding the view parameter into a bookmarkable link orredirect URL with view parameter encoding enabled. If this attribute is omitted,the value of the request parameter will instead be the local value of theUIViewParameter.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The default value of the hash parameter. When the model value matches the default value, then the hash parameter will be hidden.",
            "name": "default",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A space separated string of client IDs to update after the hash param has been set in bean on page load.",
            "name": "render",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "MethodExpression representing a value change listener methodthat will be notified when a new value has been set for thisinput component. The expression must evaluate to a publicmethod that takes a ValueChangeEventparameter,with a return type of void, orto a public method that takes no arguments with a return typeof void. In the latter case, the method has no way of easilyknowing what the new value is, but this can be useful in caseswhere a notification is needed that 'this valuechanged'.",
            "name": "valueChangeListener",
            "required": "false"
          },
          {
            "description": "The maximum number of characters that maybe entered in this field.",
            "name": "maxlength",
            "required": "false",
            "type": "int"
          },
          {
            "description": "The ValueExpression linking this component to a property in abacking bean",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": "The <o:viewAction> is a component that extends the standard <f:viewAction> andchanges the if attribute to be evaluated during INVOKE_APPLICATION phase instead of theAPPLY_REQUEST_VALUES phase. This allows developers to let the if attribute check theconverted and validated model values before performing the view action, which results in much more intuitive behavior. In below example, the FooConverter may convert a non-null parameter to null without causinga validation or conversion error, and the intent is to redirect the current page to otherpage.xhtml whenthe converted result is null. <f:viewParam name='foo' value='#{bean.foo}' converter='fooConverter' /><f:viewAction action='otherpage' if='#{bean.foo eq null}' /> This is however not possible with standard <f:viewAction> as it evaluates the ifattribute already before the conversion has taken place. This component solves that by postponing the evaluation ofthe if attribute to the INVOKE_APPLICATION phase. <f:viewParam name='foo' value='#{bean.foo}' converter='fooConverter' /><o:viewAction action='otherpage' if='#{bean.foo eq null}' /> Only when you set immediate='true', then it will behave the same as the standard<f:viewAction>.Messaging You can use the message attribute to add a global flash warning message. <o:viewAction ... message='Please use a valid link from within the site' /> Note that the message will only be shown when the redirect has actually taken place. The support was added inOmniFaces 3.2. ",
        "name": "viewAction",
        "attribute": [
          {
            "description": "MethodExpression representing the application action to invoke when this component isactivated by the user. The expression must evaluate to a public method that takes no parameters, andreturns an Object (the toString() of which is called to derive the logicaloutcome) which is passed to the NavigationHandler for this application.",
            "name": "action",
            "required": "false"
          },
          {
            "description": "MethodExpression representing an action listener method that will be notified when thiscomponent is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes noarguments with a return type of void. In the latter case, the method has no way of easily knowingwhere the event came from, but this can be useful in cases where a notification is needed that'some action happened'.",
            "name": "actionListener",
            "required": "false"
          },
          {
            "description": "Specifies the phase in which the action invocation should occur using the name of the phase constantin the PhaseId class (the case does not matter). The value must be one of APPLY_REQUEST_VALUES,PROCESS_VALIDATIONS, UPDATE_MODEL_VALUES, or INVOKE_APPLICATION. The default is INVOKE_APPLICATION.",
            "name": "phase",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Invoke the application action only when this attribute evaluates true during the specified phase.The default is true.",
            "name": "if",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "View actions are most commonly used on the initial view request. Therefore, view actions do notoperate on postback, by default. This attribute enables a view action to operate on postback.",
            "name": "onPostback",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Flag indicating that, if this component is activated by the user, notifications should be deliveredto interested listeners and actions immediately (that is, during Apply Request Values phase) ratherthan waiting until Invoke Application phase.",
            "name": "immediate",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The message to send along with the redirect, if any.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " ResolveComponent is a utility component via which a component can be looked up by its ID and a reference to it put in either the 'facelet scope' (default) or the request scope. ",
        "name": "resolveComponent",
        "attribute": [
          {
            "description": " Name under which the component will be made available to EL, scoped to the body of the Facelets tag (default) or to the request.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": " ID of the component that will be resolved (looked-up) and if found a reference of it made available to EL.",
            "name": "for",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "Optional scope identifier used to set the scope in which the component reference is inserted. If no scope is specified,the default scope 'facelet' will be used. Values values are 'facelet' (default) and 'request'. ",
            "name": "scope",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " MoveComponent is a utility component via which a components and behaviors can be moved to a target component at various ways. ",
        "name": "moveComponent",
        "attribute": [
          {
            "description": " ID of the target component for which the component moving will be done",
            "name": "for",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The destination relative to the target component where the source component(s) are moved to. Valid values are BEFORE - Component is moved right before target component, i.e. as a sibling with an index that's 1 position lower ADD_FIRST - Component is added as the first child of the target component, any other children will have their index increased by 1 ADD_LAST - Component is added as the last child of the target component, any other children will stay at their original location FACET - Component will be moved to the facet section of the target component under the name denoted by 'facet' BEHAVIOR - A Behavior will be moved to the behavior section of the target component AFTER - Component is moved right after target component, i.e. as a sibling with an index that's 1 position higher ",
            "name": "destination",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "In case the destination is set to FACET, the name of the facet in the target component to which the components should be moved ",
            "name": "facet",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "In case the destination is set to BEHAVIOR, the name of the default event that the target component is 'supposed' to have.This normally does not need to be set, but might be needed for some over-eager tag handlers associated with a behavior that in advance tryto check whether the behavior event matches with what the component supports. ",
            "name": "behaviorDefaultEvent",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "In case the destination is set to BEHAVIOR, the comma separated list events that the target component is 'supposed' to support.This normally does not need to be set, but might be needed for some over-eager tag handlers associated with a behavior that in advance tryto check whether the behavior event matches with what the component supports. ",
            "name": "behaviorEvents",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " o:methodParam is a tag handler that can be used to pass a method expression into a Facelets tag. By default this is not possible, and the expression that's intended to be a method expression will be created and made available as a value expression. This handler should be placed inside a Facelets tag as follows: <ui:composition xmlns='http://www.w3.org/1999/xhtml' xmlns:ui='http://xmlns.jcp.org/jsf/facelets' xmlns:h='http://xmlns.jcp.org/jsf/html' xmlns:o='http://omnifaces.org/ui' > <o:methodParam name='method' value='#{action}'/> <h:commandButton value='test' action='#{method}' /> </ui:composition> Assuming the above is a tag called actionmethod in the namespace test, a method can be passed into it as follows: <test:actionmethod action='#{methodParamBean.doAction}' /> In case a method with no parameters is passed that is to be used as an action listener with no parameters, then the component using this method unfortunely has to be wrapped by a component that puts the method in request scoped (with nested visibility), e.g. by using ui:repeat as follows: <ui:repeat var='method' value='#{method}'> <h:commandButton value='test' actionListener='#{method}' /> </ui:repeat> Using modern EL implementations, this is not needed in case the EL expression references the method using explicit parenthesis, e.g. #{methodParamBean.doAction()} ",
        "name": "methodParam",
        "attribute": [
          {
            "description": " Name under which the method expression will be made available to EL, scoped to the body of the Facelets tag.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": " The value expression that is to be interpreted and invoked as a method expression. This is typically the name of the parameter by which a value is passed into the Facelets tag.",
            "name": "value",
            "required": "true",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " Declare a tagfile attribute. This should in nested tags shield same attributes set on parent tags. This also offers the possibility to declare a default value. ",
        "name": "tagAttribute",
        "attribute": [
          {
            "description": "The declared attribute name.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The default value to be used when actual value is null.",
            "name": "default",
            "required": "false",
            "type": "java.lang.Object"
          }
        ]
      },
      {
        "description": "ComponentIdParam is a component that allows component ids to be provided as request parameters causing only components with matching ids to be rendered. Both simple component ids as well as client ids are supported. Components can be rendered without their parents having to be rendered. As such, e.g. single rows appearing in a table can be rendered without any of the surrounding markup appearing in the response. The intended usage of this component is to allow client-side scripts to request markup for specific components via a GET request (as opposed to AJAX based post-backs). This component is used in the same way view parameters are and needs to be put into the metadata section of aFacelet. ",
        "name": "componentIdParam",
        "attribute": [
          {
            "description": "The name of the request parameters from which the values are retrieved on an initial request thatrepresent component ids of those components from which the markup should appear in the response (i.e. whichshould be rendered)",
            "name": "componentIdName",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The name of the request parameters from which the values are retrieved on an initial request thatrepresent client ids of those components from which the markup should appear in the response (i.e. whichshould be rendered)",
            "name": "clientIdName",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether children of the components identified by clientIdName orcomponentIdName are rendered in addition to the component itself.Defaults to true",
            "name": "renderChildren",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The component identifier for this component. This value must beunique within the closest parent component that is a namingcontainer.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The ValueExpression linking this component to a property in abacking bean",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " OutputFormat is a component that extends the standard HtmlOutputFormat and provides support for capturing the output and exposing it into the request scope by the variable name as specified by the var attribute. ",
        "name": "outputFormat",
        "attribute": [
          {
            "description": " Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": " The component identifier for this component. This value must be unique within the closest parent component that is a naming container. ",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true. ",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " The current value of this component. ",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": " If specified, then the output will be captured and exposed in the request scope by the given variable name. ",
            "name": "var",
            "required": "false"
          },
          {
            "description": " Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). ",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to 'true' by default. ",
            "name": "escape",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Code describing the language used in the generated markup for this component. ",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " CSS style(s) to be applied when this component is rendered. ",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup. ",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Advisory title information about markup elements generated for this component. ",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The ValueExpression linking this component to a property in a backing bean ",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " o:outputLabel is a component that extends the standard outputLabel and provides extra support for automatically setting its value as the label of the component identified by its for attribute. It renders an HTML 'label' element. If a 'for' attribute is specified, the component specified by the value of the 'for' attribute is queried for its client id, which is then rendered as the value of the 'for' attribute of the HTML label element. ",
        "name": "outputLabel",
        "attribute": [
          {
            "description": " Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": " The component identifier for this component. This value must be unique within the closest parent component that is a naming container. ",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true. ",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " The value that will be rendered as the content of the HTML label element. If the for attribute is specified the component identified by it will have its label attribute set to this value. (both literals and value expressions are supported) ",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": " Access key that, when pressed, transfers focus to this element. ",
            "name": "accesskey",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). ",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. If omitted, this flag is assumed to be 'true'. ",
            "name": "escape",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Client identifier of the component for which this element is a label. The label attribute of that component will be set to the value of this component. ",
            "name": "for",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Code describing the language used in the generated markup for this component. ",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this element loses focus. ",
            "name": "onblur",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is clicked over this element. ",
            "name": "onclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is double clicked over this element. ",
            "name": "ondblclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this element receives focus. ",
            "name": "onfocus",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed down over this element. ",
            "name": "onkeydown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed and released over this element. ",
            "name": "onkeypress",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is released over this element. ",
            "name": "onkeyup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is pressed down over this element. ",
            "name": "onmousedown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved within this element. ",
            "name": "onmousemove",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved away from this element. ",
            "name": "onmouseout",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved onto this element. ",
            "name": "onmouseover",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is released over this element. ",
            "name": "onmouseup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " CSS style(s) to be applied when this component is rendered. ",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup. ",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767. ",
            "name": "tabindex",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Advisory title information about markup elements generated for this component. ",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The ValueExpression linking this component to a property in a backing bean ",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " The <o:graphicImage> is a component that extends the standard <h:graphicImage> with support for referencing an InputStream or byte[] property in value attribute. This property must point to a stateless @ApplicationScoped bean (both JSF and CDI scopes are supported). ",
        "name": "graphicImage",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The value that will be rendered as the content of the HTML img element. It must represent a methodexpression referring a stateless backing bean method returning either byte[] or InputStream.Thus, NOT a view or session scoped bean, but a request or application scoped one.This attribute is ignored when 'name' attribute is specified.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "When set to true then the value will be rendered in data URI format instead of request URI format.This attribute is ignored when 'name' attribute is specified. When this attribute is set to 'true','lastModified' and 'fragment' attributes are ignored.",
            "name": "dataURI",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "When set to true then the referenced image will only be loaded when the window is finishedloading and the image is visible in the viewport.This attribute is ignored when 'dataURI' attribute is specified.",
            "name": "lazy",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The image type, represented as file extension. E.g. 'jpg', 'png', 'gif', 'ico', 'svg', 'bmp', 'tiff', etc.This attribute is ignored when 'name' attribute is specified.",
            "name": "type",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The 'last modified' timestamp, can be either a java.lang.Long, or java.util.Date, or java.lang.Stringwhich is parseable as java.lang.Long. This attribute is ignored when 'name' attribute is specifiedor when 'dataURI' attribute is set to 'true'.",
            "name": "lastModified",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The URL fragment identifier, which will be appended to generated resource URL. This is particularlyuseful with SVG images with view modes. The value does not necessarily need to start with '#', thiswill be checked. This attribute is ignored when 'dataURI' attribute is set to 'true'.",
            "name": "fragment",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The resource name of the resource. Works the same way as on <h:graphicImage>.When this attribute is specified, 'value', 'type' and 'lastModified' attributes are ignored.",
            "name": "name",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The resource library name of the resource. Works the same way as on <h:graphicImage>.This attribtue is only used when 'name' attribute is specified.",
            "name": "library",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Alternate textual description of the element rendered by this component. ",
            "name": "alt",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). These attributes are case sensitive when rendering to XHTML, so care must be taken to have the correct case. ",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Override for the height of this image. ",
            "name": "height",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Flag indicating that this image is to be used as a server side image map. Such an image must be enclosed within a hyperlink ('a'). A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as ismap='ismap'. ",
            "name": "ismap",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Code describing the language used in the generated markup for this component. ",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " URI to a long description of the image represented by this element. ",
            "name": "longdesc",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is clicked over this element. ",
            "name": "onclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is double clicked over this element. ",
            "name": "ondblclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed down over this element. ",
            "name": "onkeydown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed and released over this element. ",
            "name": "onkeypress",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is released over this element. ",
            "name": "onkeyup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is pressed down over this element. ",
            "name": "onmousedown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved within this element. ",
            "name": "onmousemove",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved away from this element. ",
            "name": "onmouseout",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved onto this element. ",
            "name": "onmouseover",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is released over this element. ",
            "name": "onmouseup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute. ",
            "name": "role",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " CSS style(s) to be applied when this component is rendered. ",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup. ",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Advisory title information about markup elements generated for this component (simply put: the tooltip). ",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The name of a client side image map (an HTML 'map' element) for which this element provides the image. ",
            "name": "usemap",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Override for the width of this image. ",
            "name": "width",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " The <o:url> is a component which renders the given target URL or JSF view ID as a bookmarkable URL with support for adding additional query string parameters to the URL via nested <f:param> and <o:param>, and for exposing it into the request scope by the variable name as specified by the var attribute instead of rendering it. ",
        "name": "url",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "If specified, then the URL will be exposed in the request scope by the given variable name.",
            "name": "var",
            "required": "false"
          },
          {
            "description": "The target URL to encode.When specified, the domain and viewId attributes are ignored.",
            "name": "value",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The view ID to create URL for.Defaults to current view ID.This is ignored when value attribute is specified.",
            "name": "viewId",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The domain of the URL.Valid formats are: https://example.com, //example.com, example.com, / and //.If the value equals /, then the URL becomes domain-relative.If the value equals //, then the URL becomes scheme-relative.Defaults to current domain.This is ignored when value attribute is specified.",
            "name": "domain",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether to include view parameters in the URL.Defaults to false.This setting is ignored when includeRequestParams is set to true.",
            "name": "includeViewParams",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Whether to include request query string parameters in the URL.Defaults to false.When this setting is set to true, includeViewParams is ignored.",
            "name": "includeRequestParams",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The <o:sitemapUrl> is a component which renders the given target URL or JSF view ID as a sitemap URL with support for adding additional query string parameters to the URL via nested <f:param> and <o:param>. ",
        "name": "sitemapUrl",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The value of the 'loc' element of the sitemap URL.When specified, then the viewId and domain attributes are ignored.",
            "name": "value",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The view ID to create the URI part of the 'loc' element of the sitemap URL for.This is ignored when value attribute is specified.",
            "name": "viewId",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The domain of the 'loc' element of the sitemap URL.Valid formats are: https://example.com, //example.com, example.com, / and //.If the value equals /, then the URL becomes domain-relative.If the value equals //, then the URL becomes scheme-relative.A runtime exception will be thrown if an unsupported value is used.Defaults to current domain.This is ignored when value attribute is specified.",
            "name": "domain",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The value of the 'lastmod' element of the sitemap URL.",
            "name": "lastModified",
            "required": "false",
            "type": "java.time.Temporal"
          },
          {
            "description": "The value of the 'changefreq' element of the sitemap URL.Must be one of the known enum values.A runtime exception will be thrown if an unsupported value is used.",
            "name": "changeFrequency",
            "required": "false",
            "type": "org.omnifaces.component.output.SitemapUrl.ChangeFrequency"
          },
          {
            "description": "The value of the 'priority' element of the sitemap URL.Must be between 0.0 and 1.0.A runtime exception will be thrown if an unsupported value is used.",
            "name": "priority",
            "required": "false",
            "type": "java.math.BigDecimal"
          }
        ]
      },
      {
        "description": " Form is a component that extends the standard UIForm and submits by default to current request URI with query string and offers in combination with the <o:ignoreValidationFailed> tag on an UICommand component the possibility to ignore validation failures so that the invoke action phase will be executed anyway. It also supports adding custom query string parameters via a nested <o|h:param>. ",
        "name": "form",
        "attribute": [
          {
            "description": " The component identifier for this component. This value must be unique within the closest parent component that is a naming container. ",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether to use current request URI with query string as action URI. Defaults to true.This setting is ignored when includeRequestParams is set to true.",
            "name": "useRequestURI",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Whether to include request query string parameters in the URL.Defaults to false.When this setting is set to true, useRequestURI is ignored.",
            "name": "includeRequestParams",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Whether to send only the form data which actually need to be processed as opposed to the entire form. Defaults to true. ",
            "name": "partialSubmit",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true. ",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " List of content types that a server processing this form will handle correctly ",
            "name": "accept",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " List of character encodings for input data that are accepted by the server processing this form. ",
            "name": "acceptcharset",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). ",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Content type used to submit the form to the server. If not specified, the default value is 'application/x-www-form-urlencoded'. ",
            "name": "enctype",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Code describing the language used in the generated markup for this component. ",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is clicked over this element. ",
            "name": "onclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is double clicked over this element. ",
            "name": "ondblclick",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed down over this element. ",
            "name": "onkeydown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is pressed and released over this element. ",
            "name": "onkeypress",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a key is released over this element. ",
            "name": "onkeyup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is pressed down over this element. ",
            "name": "onmousedown",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved within this element. ",
            "name": "onmousemove",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved away from this element. ",
            "name": "onmouseout",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is moved onto this element. ",
            "name": "onmouseover",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when a pointer button is released over this element. ",
            "name": "onmouseup",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this form is reset. ",
            "name": "onreset",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Javascript code executed when this form is submitted. ",
            "name": "onsubmit",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " CSS style(s) to be applied when this component is rendered. ",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup. ",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Name of a frame where the response retrieved after this form submit is to be displayed. ",
            "name": "target",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " Advisory title information about markup elements generated for this component. ",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The ValueExpression linking this component to a property in a backing bean ",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          }
        ]
      },
      {
        "description": " Cache is a component that initially renders the output of its children into a buffer instead of to the response. This output is then inserted into a cache and on subsequent requests the content retrieved from the cache is used. By default the viewid concatenated to the component id via an underscore is used as the cache key. Note that this component does not support a cache loader and locking mechanism. This mean several simultaenous page requests may render the same content and it's undetermined which of those will end up being cached. An optional caching provider (see below) can be set to control the caching implementation that is used for the actual caching. ",
        "name": "cache",
        "attribute": [
          {
            "description": "Optional key used to store content in the cache. If no key is specified, a key is calculatedbased on the client Id of this component. While auto-generated keys can be convenient, note that in the face of dynamic behavior on a view theid of a component and thus the cache key can change in ways that are difficult to predict. Keys are relative to the scope for which they are defined, meaning a key 'foo' for the a session scopedcache will not conflict with a key of the same name for an application scoped cache. ",
            "name": "key",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Optional scope identifier used to set the scope in which caching takes place. If no scope is specified,the default scope 'session' will be used. The supported scopes depent on the caching provider that is installed via theorg.omnifaces.CACHE_PROVIDER. If no such provider is installed, a default one is usedthat supports scopes 'session' and 'application'. A runtime exception will be thrown if an unsupported value for scope is used. ",
            "name": "scope",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Optional amount of time in seconds for which the cached content is valid (TTL). This is countedfrom the moment content is actually added to the cache. If no time is provided the content will be subjectto the global cache settings, and in absence of these are subject to the behavior of the cache implementationthat is used. The default cache implementation will simply cache indefinitely. Whether the content is actually removed from the cache (to preserve memory) after the given time has elapsed isdependend on the actual cache implementation that is used. The default cache implementation willNOT do this automatically, but will instead remove it only when the cache item is being accessedagain. Following the above, new content will only be inserted into the cache following a page request. A time of e.g. 30will not cause new content to be inserted into the cache at 30 seconds intervals. Note that this component does not support a cache loader and locking mechanism. This means after content times out,several simultaneous page requests may render the same content and it's undetermined which of those will end up being cached. ",
            "name": "time",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Switches to an alternative method to grab the content generated by the children of this component. Default is false. Normally this content is obtained by replacing the so-called response writer when the parent Cachecomponent delegates rendering to its children. However, in some cases (like h:form) there is an amountof post-processing being done on the response outside the context of this parent - child delegation. Via this switch, the full response is buffered if the cache doesn't contain content for this component and specialmarkers are inserted surrounding the children's rendering. Afterwards, the content between the markers (if any) isextracted and inserted into the cache. Note that the full response is only buffered incase there's no value in the cache.For all other requests this buffering will not happen. Since this is clearly a more resource intensive and invasive method to grab content, it's not enabled by default.In addition to setting this attribute to true, the org.omnifaces.servlet.BufferedHttpServletResponseServlet Filter needs to be configured to filter the Faces Servlet (or alternatively just the pages for which the bufferingmethod should be used). ",
            "name": "useBuffer",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Resets the cache when set to true. Default is false. This attribute can be used to reset the cache, meaning that the first time the cache component is renderedagain, it will re-render its children and will cause any cached value expressions (via o:cacheValue) to bere-evaluated when its next referenced. Note that this value has to remain true until the cache component is rendered, after that it should be set to falseagain otherwise the cached content will be reset again at the next rendering. ",
            "name": "reset",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Disables the cache when set to true. Default is false. This attribute can be used to disable the cache (temporarily). In disabled state the children will be rendered directlyand cached content (if any) will not be used, nor will the rendering outcome of the children be cached. When the attribute is set to false again any content that was cached before the cache was disabled will beshown again if said content is still available in the cache. The content that was rendered when the cache was disabledhas no effect on any such previously cached content. ",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " Tag handler (runs at tree build-time) that makes a value expression available under the given name that caches its value. Although the value expressions scope is that of the entire Facelet in which this tag appears, the value it self is cached using the parent Cache component. This means that if the parent o:Cache component clears its cache (e.g. because of time to live expiration), the value cached by this value expression will be automatically cleared as well. The direct parent of this component MUST be o:Cache or a potential subclass of the associated UIComponent. It's an error to have any other kind of parent. The intended use of this is to explicitly cache a value expression that is used by one of the component children of o:Cache, so that even after a post-back (where the cached markup is of nu use) the original value expression will not be re-evaluated. ",
        "name": "cacheValue",
        "attribute": [
          {
            "description": " Name under which the value expression will be made available to EL, scoped to the Facelet in which this tag occurs.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": " The value expression for which its value will be cached on demand and made available as a new value expression.",
            "name": "value",
            "required": "true",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " The <o:importConstants> allows the developer to have a mapping of all constant field values of the given type in the request scope. The constant field values are those public static final fields. This works for classes, interfaces and enums. For example: public class Foo { public static final String FOO1 = 'foo1'; public static final String FOO2 = 'foo2'; } public interface Bar { public static final String BAR1 = 'bar1'; public static final String BAR2 = 'bar2'; } public enum Baz { BAZ1, BAZ2; } The constant field values of the above types can be mapped into the request scope as follows: <o:importConstants type='com.example.Foo' /> <o:importConstants type='com.example.Bar' /> <o:importConstants type='com.example.Baz' var='Bazzz' /> ... #{Foo.FOO1}, #{Foo.FOO2}, #{Bar.BAR1}, #{Bar.BAR2}, #{Bazzz.BAZ1}, #{Bazzz.BAZ2} The map is by default stored in the request scope by the simple name of the type as variable name. You can override this by explicitly specifying the var attribute, as demonstrated for com.example.Baz in the above example. The resolved constants are by reference stored in the cache to improve retrieving performance. ",
        "name": "importConstants",
        "attribute": [
          {
            "description": " The fully qualified name of the class/interface/enum to import the constant field values for.",
            "name": "type",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": " The name of the request attribute which exposes the mapping of the constants in the request scope.",
            "name": "var",
            "required": "false"
          }
        ]
      },
      {
        "description": " The <o:importFunctions> allows the developer to have access to all functions of the given fully qualified name of a type in the Facelet scope using the usual EL functions syntax without the need to register them in .taglib.xml file. The functions are those public static methods with a non-void return type. For example: <o:importFunctions type='java.lang.Math' var='m' /> <o:importFunctions type='org.omnifaces.util.Faces' /> ... #{m:abs(-10)} #{m:max(bean.number1, bean.number2)} ... <base href='#{Faces:getRequestBaseURL()}' /> The functions prefix becomes by default the simple name of the type. You can override this by explicitly specifying the var attribute. If there are multiple function methods with exactly the same name, then the one with the least amount of parameters will be used. If there are multiple function methods with exactly the same name and amount of parameters, then the choice is unspecified (technically, JVM-dependent) and should not be relied upon. So if you absolutely need to differentiate functions in such case, give them each a different name. Note that the colon : operator to invoke the method is as required by EL functions spec. It's by design not easily possible to change it to the period . operator. Also note that in case of org.omnifaces.util.Faces it's considered poor practice if the same functionality is already available through the implicit EL variables #{facesContext}, #{view}, #{request}, etc such as #{request.contextPath} which should be preferred over #{Faces:getRequestContextPath()}. The resolved functions are by reference stored in the cache to improve retrieving performance. ",
        "name": "importFunctions",
        "attribute": [
          {
            "description": " The fully qualified name of the class to import the public static non-void methods for.",
            "name": "type",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": " The EL functions prefix which exposes the functions in the Facelet scope.",
            "name": "var",
            "required": "false"
          }
        ]
      },
      {
        "description": " The <o:ignoreValidationFailed> allows the developer to ignore validation failures when executing an UICommand action. This taghandler must be placed inside an UICommand component and the parent UIForm must be an <o:form>. Any validation errors will be ignored and thus not be displayed. Note that the model values will (obviously) only be updated for components which have passed the validation. ",
        "name": "ignoreValidationFailed"
      },
      {
        "description": " The <o:skipValidators> allows the developer to skip validators when executing a submit. This taghandler must be placed inside the component that invokes the submit, may be an UICommand (both ajaxified or not) as well as any ClientBehaviorHolder (ajax enabled) component. Validation will happen, but no validator will be executed since they will be temporary detached from processed components. Conversion errors could still occur. Note that the model values will be updated for all processed components. ",
        "name": "skipValidators"
      },
      {
        "description": " The <o:enableRestorableView> instructs the view handler to recreate the entire view whenever the view has been expired, i.e. whenever #restoreView(FacesContext, String) returns null and the current request is a postback. This effectively prevents ViewExpiredException on the view. This tag needs to be placed in <f:metadata> of the view. There are however technical design limitations: please consult the javadoc for details. To the point, the bean associated with the view has to be exclusively request scoped in order to properly recreate the same view. ",
        "name": "enableRestorableView"
      },
      {
        "description": " The <o:validateBean> allows the developer to control bean validation groups on a per-UICommand or UIInput component basis. Usage example: <h:commandButton> <o:validateBean groups='javax.validation.groups.Default,com.example.MyGroup'/> </h:commandButton>",
        "name": "validateBean",
        "attribute": [
          {
            "description": "A comma-separated list of validation groups. A validation group is a fully-qualified class name.",
            "name": "validationGroups",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A boolean value enabling page level determination of whether or not this validator is enabled.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "If specified, then only the given bean will be validated at class level.If unspecified, then only the bean properties bound to the in the current request processed/executed input fields will be validated 'as usual'.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "Set the class level validation method, which can be either 'validateCopy' or 'validateActual'.If set to 'validateCopy', then it will perform the validation on a copy/clone of the actual bean. This has the advantage that the validation can be performed before the model is updated.If set to 'validateActual', then it will perform the validation on the actual bean instance.This has the disadvantage that the validation can only be performed after the model is updated and thus the action method will always be invoked regardless of the validation outcome.Defaults to 'validateCopy'.This attribute is ignored when the 'value' attribute is unspecified.",
            "name": "method",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Set the bean copy strategy to use in case 'value' attribute is specified and the 'method' attribute is set (or defaulted) to 'validateCopy'.This can be either an EL expression referring a concrete instance, or a String representing the fully qualified name of the instance of the org.omnifaces.util.copier.Copier interface, which must be stateless and/or threadsafe.If unspecified, then it defaults to the best possibility in this order: Cloneable, or Serializable, or copy constructor, or default constructor.This attribute is ignored when the 'value' attribute is unspecified, or when the 'method' attribute is not set to 'validateCopy'.",
            "name": "copier",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The identifier for which this validator should show the message. Defaults to '@form' which is theparent UIForm. Other available values are '@all' which will show the message for allinvalidated components, '@global' which will show a global message, and '@violating' which willmatch components by ConstraintViolation Property Path. Any other space separated value will betreated as client ID of UI input component.",
            "name": "showMessageFor",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The faces message uses a predefined message format, which corresponds to the value of javax.faces.validator.BeanValidator.MESSAGEin the message bundle. The default message format of {1}: {0} prepends all the validated labels whichwere checked when the error message occurred. This is useful in the case of validating a single bean property, butsometimes confusing in the case of validating a bean with many properties. In case you'd like to fine-tune the beanvalidation message on a per-<o:validateBean>-basis, then you can since OmniFaces 3.12 use themessageFormat attribute. Any {0} placeholder will be substituted with the error messageand any {1} placeholder will be substituted with the labels of all validated fields.",
            "name": "messageFormat",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " ValidateUniqueColumn validates if the given UIInput component in an UIData component has an unique value throughout all rows, also those not visible by pagination. This validator works directly on the data model and may therefore not work as expected if the data model does not represent all available rows of the UIData component (e.g. when there's means of lazy loading). The default message is {0}: Please fill out an unique value for the entire column. Duplicate found in row {1} Usage example: <h:dataTable value='#{bean.items}' var='item'> <h:column> <h:inputText value='#{item.value}'> <o:validateUniqueColumn /> </h:inputText> </h:column> </h:dataTable> In an invalidating case, only the first row on which the value is actually changed (i.e. the value change event has been fired on the input component in the particular row) will be marked invalid and a faces message will be added on the client ID of the input component in the particular row. The default message can be changed by the message attribute. Any '{0}' placeholder in the message will be substituted with the label of the input component. Any '{1}' placeholder in the message will be substituted with the 1-based row index of the data model. Note that this does not take pagination into account and that this needs if necessary to be taken care of in the custom message yourself. <o:validateUniqueColumn message='Duplicate value!' />",
        "name": "validateUniqueColumn",
        "attribute": [
          {
            "description": "The validator message to be shown on failure. Any '{0}' placeholder in the message will be substituted with the label of theinput component. Any '{1}' placeholder in the message will be substituted with the 1-based row index of the datamodel.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the validation should be disabled or not. Defaults to false.",
            "name": "disabled",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The <o:massAttribute> sets an attribute of the given name and value on all nested components, if they don't already have an attribute set. On boolean attributes like disabled, readonly and rendered, any literal (static) attribute value will be ignored and overridden. Only if they have already a value expression #{...} as attribute value, then it won't be overridden. This is a technical limitation specifically for boolean attributes as they don't default to null. For example, the following setup <o:massAttribute name='disabled' value='true'> <h:inputText id='input1' /> <h:inputText id='input2' disabled='true' /> <h:inputText id='input3' disabled='false' /> <h:inputText id='input4' disabled='#{true}' /> <h:inputText id='input5' disabled='#{false}' /> </o:massAttribute> will set the disabled='true' attribute in input1, input2 and input3 as those are the only components without a value expression on the boolean attribute. As another general example without booleans, the following setup <o:massAttribute name='styleClass' value='#{component.valid ? '' : 'error'}'> <h:inputText id='input1' /> <h:inputText id='input2' styleClass='some' /> <h:inputText id='input3' styleClass='#{'some'}' /> <h:inputText id='input4' styleClass='#{null}' /> </o:massAttribute> will only set the styleClass='#{component.valid ? '' : 'error'}' attribute in input1 as that's the only component on which the attribute is absent. Do note that the specified EL expression will actually be evaluated on a per-component basis. To target a specific component (super)class, use the target attribute. The example below skips labels (as that would otherwise fail in the example below because they don't have a valid property): <o:massAttribute name='styleClass' value='#{component.valid ? '' : 'error'}' target='javax.faces.component.UIInput'> <h:outputLabel for='input1' /> <h:inputText id='input1' /> <h:outputLabel for='input2' /> <h:inputText id='input2' /> <h:outputLabel for='input3' /> <h:inputText id='input3' /> </o:massAttribute>",
        "name": "massAttribute",
        "attribute": [
          {
            "description": "The name of the attribute to be set on all nested components. This cannot be set to idor binding as those are already evaluated during view build time and they shouldn't beshared among components anyway.",
            "name": "name",
            "required": "true"
          },
          {
            "description": "The value of the attribute to be set on all nested components. This will be evaluated on aper-component basis. In other words, #{component} can be used here to refer the 'current' component.",
            "name": "value",
            "required": "true",
            "type": "java.lang.Object"
          },
          {
            "description": "The FQN (fully qualified name) of the specific UIComponent (super)class for which theattribute should be set. For example, javax.faces.component.UIInput which has thevalid property. Since OmniFaces 3.10, this value can be a comma separated string of FQNs.",
            "name": "target",
            "required": "false"
          }
        ]
      },
      {
        "description": " <o:viewParamValidationFailed> allows the developer to handle a view parameter validation failure with either a redirect or a HTTP error status, optionally with respectively a flash message or HTTP error message. This tag can be placed inside <f:metadata> or <f|o:viewParam>. When placed in <f|o:viewParam>, then it will be applied when the particular view parameter has a validation error as per UIViewParameter#isValid(). When placed in <f:metadata>, and no one view parameter has already handled the validation error via its own <o:viewParamValidationFailed>, then it will be applied when there's a general validation error as per FacesContext#isValidationFailed(). The sendRedirect attribute uses under the covers Faces#redirect(String, String...) to send the redirect, so the same rules as to scheme and leading slash apply here. The sendError attribute uses under the covers Faces#responseSendError(int, String) to send the error, so you can customize HTTP error pages via <error-page> entries in web.xml, otherwise the server-default one will be displayed instead. * f:viewParam required='true' fail As a precaution, the <f:viewParam required='true'> has in current Mojarra and MyFaces releases (as of now, Mojarra 2.2.7 and MyFaces 2.2.4) a design error. When the parameter is not specified in the query string, then it is retrieved as null which causes that an internal isRequired() check is performed instead of delegating the check to standard UIInput implementation. This has the consequence that PreValidateEvent and PostValidateEvent listeners are never invoked, which the <o:viewParamValidationFailed> is actually relying on. This is fixed in <o:viewParam. * Examples With the example below, when at least one view param is absent, then the client will be returned a HTTP 400 error. <f:metadata><o:viewParam name='foo' required='true' /><o:viewParam name='bar' required='true' /><o:viewParamValidationFailed sendError='400' /> </f:metadata> With the example below, only when the 'foo' parameter is absent, then the client will be redirected to 'login.xhtml'. When the 'bar' parameter is absent, nothing new will happen. The process will proceed 'as usual'. I.e. the validation error will end up as a faces message in the current view the usual way. <f:metadata><o:viewParam name='foo' required='true'> <o:viewParamValidationFailed sendRedirect='login.xhtml' /></o:viewParam><o:viewParam name='bar' required='true' /> </f:metadata> With the example below, only when the 'foo' parameter is absent, regardless of the 'bar' or 'baz' parameters, then the client will be returned a HTTP 401 error. When the 'foo' parameter is present, but either 'bar' or 'baz' parameter is absent, then the client will be redirected to 'search.xhtml'. <f:metadata><o:viewParam name='foo' required='true'> <o:viewParamValidationFailed sendError='401' /></o:viewParam><o:viewParam name='bar' required='true' /><o:viewParam name='baz' required='true' /><o:viewParamValidationFailed sendRedirect='search.xhtml' /> </f:metadata> In a nutshell: when there are multiple <o:viewParamValidationFailed> tags, then they will be applied in the same order as they are declared in the view. So, with the example above, the one nested in <f|o:viewParam> takes precedence over the one nested in <f:metadata>. * Messaging By default, the first occurring faces message on the parent component will be copied, or when there is none, then the first occurring global faces message will be copied. When sendRedirect is used, then it will be set as a global flash error message. When sendError is used, then it will be set as HTTP status message. You can override this message by explicitly specifying the message attribute. This is applicable on both sendRedirect and sendError. <o:viewParamValidationFailed sendRedirect='search.xhtml' message='You need to perform a search.' /> ... <o:viewParamValidationFailed sendError='401' message='Authentication failed. You need to login.' /> * Design notes You can technically nest multiple <o:viewParamValidationFailed> inside the same parent, but this is not the documented approach and the behavior is unspecified. You can not change the HTTP status code of a redirect. This is not a JSF limitation, but a HTTP limitation. The status code of a redirect will always end up the one of the redirected response. If you intend to 'redirect' with a different HTTP status code, then you should be using sendError instead and specify the desired page as <error-page> in web.xml. ",
        "name": "viewParamValidationFailed",
        "attribute": [
          {
            "description": "The URL to send redirect to on validation failure. The same rules apply as with Faces#redirect().This attribute is required when the sendError attribute is absent.",
            "name": "sendRedirect",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The HTTP status to send error with on validation failure.This attribute cannot be specified when the sendRedirect is already specified.",
            "name": "sendError",
            "required": "false",
            "type": "java.lang.Integer"
          },
          {
            "description": "The message to send along with the redirect or error.If this attribute is not specified, then by default the validation error message will be used.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " CommandScript is an extension to <h:commandXxx> which generates a JavaScript function in the global JavaScript scope which allows the enduser to execute a JSF ajax request by a just function call functionName() in the JavaScript context. The <o:commandScript> component is required to be enclosed in an UIForm component. The name attribute is required and it represents the JavaScript function name. The execute and render attributes work exactly the same as in <f:ajax>. The onbegin and oncomplete attributes must represent (valid!) JavaScript code which will be executed before sending the ajax request and after processing the ajax response respectively. The action, actionListener and immediate attributes work exactly the same as in <h:commandXxx>. Basic usage example of <o:commandScript> which submits the entire form on click of a plain HTML button: <h:form> <h:inputText value='#{bean.input1}' ... /> <h:inputText value='#{bean.input2}' ... /> <h:inputText value='#{bean.input3}' ... /> <o:commandScript name='submitForm' action='#{bean.submit}' render='@form' /> </h:form> <input type='button' value='submit' onclick='submitForm()' /> Usage example which uses the <o:commandScript> as a poll function which updates every 3 seconds: <h:form> <h:dataTable id='data' value='#{bean.data}' ...>...</h:dataTable> <o:commandScript name='updateData' action='#{bean.reloadData}' render='data' /> </h:form> <h:outputScript target='body'>setInterval(updateData, 3000);</h:outputScript> The component also supports nesting of <f:param>, <f:actionListener> and <f:setPropertyActionListener>, exactly like as in <h:commandXxx>. The function also supports a JS object as argument which will then end up in the HTTP request parameter map: functionName({ name1: 'value1', name2: 'value2' }); With the above example, the parameters are in the action method available as follows: String name1 = Faces.getRequestParameter('name1'); // value1 String name2 = Faces.getRequestParameter('name2'); // value2",
        "name": "commandScript",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), orprocessed on any subsequent form submit. The default value for this property is true.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "The script function name.",
            "name": "name",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "A space separated string of client IDs to process on ajax request.",
            "name": "execute",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A space separated string of client IDs to update on ajax response.",
            "name": "render",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A script to execute before ajax request is fired.",
            "name": "onbegin",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "A script to execute after ajax response is processed.",
            "name": "oncomplete",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether the command script should automatically run inline during page load.Note that this thus runs immediately at the moment the script is been interpreted by the web browserand thus not in end of HTML body or during window load event. So if the script logic depends on theHTML DOM tree composition, then it will depend on location of the command script component itself.",
            "name": "autorun",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "MethodExpression representing the application action to invoke when this component isactivated by the user. The expression must evaluate to a public method that takes no parameters, andreturns an Object (the toString() of which is called to derive the logicaloutcome) which is passed to the NavigationHandler for this application.",
            "name": "action",
            "required": "false"
          },
          {
            "description": "MethodExpression representing an action listener method that will be notified when thiscomponent is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes noarguments with a return type of void. In the latter case, the method has no way of easily knowingwhere the event came from, but this can be useful in cases where a notification is needed that'some action happened'.",
            "name": "actionListener",
            "required": "false"
          },
          {
            "description": "Flag indicating that, if this component is activated by the user, notifications should be deliveredto interested listeners and actions immediately (that is, during Apply Request Values phase) ratherthan waiting until Invoke Application phase.",
            "name": "immediate",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " Param is a component that extends the standard UIParameter to implement ValueHolder and thus support a Converter to convert the supplied value to string, if necessary. You can use it the same way as <f:param>, you only need to change f: into o: to get the extra support for a Converter by usual means via the converter attribute of the tag, or the nested <f:converter> tag, or just automatically if a converter is already registered for the target class. Also, if no value is specified, but children are present, then the encoded output of children will be returned as value. This is useful when you want to supply JSF components or HTML as parameter of an unescaped <h:outputFormat>. For example, <h:outputFormat value='#{bundle.paragraph}' escape='false'> <o:param><h:link outcome='contact' value='#{bundle.contact}' /></o:param> </h:outputFormat> with this bundle paragraph = Please {0} for more information. contact = contact us will result in the link being actually encoded as output format parameter value. ",
        "name": "param",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Name of the parameter to be created.",
            "name": "name",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Value of the parameter to be set.",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "Converter instance registered with this component.",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": "Flag enabling or disabling the inclusion of the parameter.",
            "name": "disable",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The <o:messages> is a component that extends the standard <h:messages> with the following new features: Multiple for components Possibility to specify multiple client IDs space separated in the for attribute. The example below would only display messages for input1 and input3: <h:form> <o:messages for='input1 input3' /> <h:inputText id='input1' /> <h:inputText id='input2' /> <h:inputText id='input3' /> <h:inputText id='input4' /> </h:form> It can even refer non-input components which in turn contains input components. The example below would only display messages for input1 and input2: <h:form> <o:messages for='inputs' /> <h:panelGroup id='inputs'> <h:inputText id='input1' /> <h:inputText id='input2' /> </h:panelGroup> <h:inputText id='input3' /> <h:inputText id='input4' /> </h:form> You can even combine them. The example below would only display messages for input1, input2 and input4. <h:form> <o:messages for='inputs input4' /> <h:panelGroup id='inputs'> <h:inputText id='input1' /> <h:inputText id='input2' /> </h:panelGroup> <h:inputText id='input3' /> <h:inputText id='input4' /> </h:form> Displaying single message Show a single custom message whenever the component has received any faces message. This is particularly useful when you want to display a global message in case any of the in for specified components has a faces message. For example: <o:messages for='form' message='There are validation errors. Please fix them.' /> <h:form id='form'> <h:inputText id='input1' /><h:message for='input1' /> <h:inputText id='input2' /><h:message for='input2' /> <h:inputText id='input3' /><h:message for='input3' /> </h:form> HTML escaping Control HTML escaping by the new escape attribute. <o:messages escape='false' /> Beware of potential XSS attack holes when user-controlled input is redisplayed through messages! Iteration markup control Control iteration markup fully by the new var attribute which sets the current FacesMessage in the request scope and disables the default table/list rendering. For example, <dl> <o:messages var='message'> <dt>#{message.severity}</dt> <dd title='#{message.detail}'>#{message.summary}</dd> </o:messages> </dl> Note: the iteration is by design completely stateless. It's therefore not recommended to nest form components inside the <o:messages> component. It should be used for pure output only, like as the standard <h:messages>. Plain output links are however no problem. Also note that the message and escape attributes have in this case no effect. With a single message, there's no point of iteration. As to escaping, just use <h:outputText escape='false'> the usual way. Design notice: the component class is named OmniMessages instead of Messages to avoid confusion with the Messages utility class. ",
        "name": "messages",
        "renderer-type": "org.omnifaces.Messages",
        "attribute": [
          {
            "description": "The component identifier for this component. This value must be unique within the closest parentcomponent that is a naming container.",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The ValueExpression linking this component to a property in a backing bean.",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit.Default value is 'true'.",
            "name": "rendered",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed.Default value is 'false'.",
            "name": "globalOnly",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The space separated collection of client IDs of UI input components whose messages needs to be displayed.It is also possible to specify the client ID of a parent component containing UI input components of interest.This attribute is ignored when the globalOnly attribute is set to 'true'.",
            "name": "for",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether the message should be redisplayed if already displayed by another message(s) component beforehand.Default value is 'true'.",
            "name": "redisplay",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "The name of the request attribute which exposes the current faces message in the request scope.This will trigger rendering without any HTML markup and delegate the markup control to the developer like as ui:repeat.",
            "name": "var",
            "required": "false"
          },
          {
            "description": "The single INFO message to be shown instead when this component has any faces message.This attribute is ignored when the var attribute is specified.",
            "name": "message",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The type of layout markup to use when rendering error messages.Valid values are 'table' (an HTML table) and 'list' (an HTML unordered list).Default value is 'list'.This attribute is ignored when the var attribute is specified.",
            "name": "layout",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The tooltip to be applied on the of HTML table or ul when this component is rendered.This attribute is ignored when the var attribute is specified.",
            "name": "title",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Flag indicating whether the summary portion of displayed messages should be included.Default value is 'true'.This attribute is ignored when the var attribute is specified.",
            "name": "showSummary",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Flag indicating whether the detail portion of displayed messages should be included.Default value is 'false'.This attribute is ignored when the var attribute is specified.",
            "name": "showDetail",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Flag indicating whether the detail portion of the message should be displayed as a tooltip.Default value is 'false'.This attribute is ignored when the var or title attribute is specified.",
            "name": "tooltip",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "Flag indicating that characters in summary and detail that are sensitive in HTML and XML markup must be escaped.Default value is 'true'.This attribute is ignored when the var attribute is specified.",
            "name": "escape",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": "CSS style(s) to be applied on the HTML table or HTML ul when this component is rendered.This attribute is ignored when the var attribute is specified.",
            "name": "style",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Space-separated list of CSS style class(es) to be applied on the HTML table or ul when this component is rendered.This value must be passed through as the 'class' attribute on generated markup.This attribute is ignored when the var attribute is specified.",
            "name": "styleClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style(s) to apply to HTML tr or li with any message with a severity class of 'INFO'.This attribute is ignored when the var attribute is specified.",
            "name": "infoStyle",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style class to apply to HTML tr or li with any message with a severity class of 'INFO'.This attribute is ignored when the var attribute is specified.",
            "name": "infoClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style(s) to apply to HTML tr or li with any message with a severity class of 'WARN'.This attribute is ignored when the var attribute is specified.",
            "name": "warnStyle",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style class to apply to HTML tr or li with any message with a severity class of 'WARN'.This attribute is ignored when the var attribute is specified.",
            "name": "warnClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style(s) to apply to HTML tr or li with any message with a severity class of 'ERROR'.This attribute is ignored when the var attribute is specified.",
            "name": "errorStyle",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style class to apply to HTML tr or li with any message with a severity class of 'ERROR'.This attribute is ignored when the var attribute is specified.",
            "name": "errorClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style(s) to apply to HTML tr or li with any message with a severity class of 'FATAL'.This attribute is ignored when the var attribute is specified.",
            "name": "fatalStyle",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "CSS style class to apply to HTML tr or li with any message with a severity class of 'FATAL'.This attribute is ignored when the var attribute is specified.",
            "name": "fatalClass",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Code describing the language used in the generated markup for this component.This attribute is ignored when the var attribute is specified.",
            "name": "lang",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Direction indication for text that does not inherit directionality.Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left).This attribute is ignored when the var attribute is specified.",
            "name": "dir",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " o:socket opens an one-way (server to client) web socket based push conntection in client side which can be reached from server side via org.omnifaces.cdi.PushContext interface injected in any CDI/container managed artifact via org.omnifaces.cdi.Push annotation. For detailed usage instructions, see org.omnifaces.cdi.push.Socket javadoc. ",
        "name": "socket",
        "attribute": [
          {
            "description": "The port number of the web socket host, in case it is different from the port number in the request URI.Defaults to the port number of the request URI.",
            "name": "port",
            "required": "false",
            "type": "java.lang.Integer"
          },
          {
            "description": "The name of the web socket channel.It may not be an EL expression and it may only contain alphanumeric characters, hyphens, underscores and periods.All open websockets on the same channel will receive the same push message from the server.",
            "name": "channel",
            "required": "true"
          },
          {
            "description": "The scope of the web socket channel.It may not be an EL expression and allowed values are application, session and view, case insensitive.When the value is application, then all channels with the same name throughout the application will receive the same push message.When the value is session, then only the channels with the same name in the current user session will receive the same push message.When the value is view, then only the channel in the current view will receive the push message.The default scope is application.When the user attribute is specified, then the default scope is session.",
            "name": "scope",
            "required": "false"
          },
          {
            "description": "The user identifier of the web socket channel, so that user-targeted push messages can be sent.It must implement Serializable and preferably have low memory footprint.Suggestion: use #{request.remoteUser} or #{someLoggedInUser.id}.All open websockets on the same channel and user will receive the same push message from the server.",
            "name": "user",
            "required": "false",
            "type": "java.io.Serializable"
          },
          {
            "description": "The JavaScript event handler function that is invoked when the web socket is opened.The function will be invoked with one argument: the channel name.",
            "name": "onopen",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "The JavaScript event handler function that is invoked when a push message is received from the server.The function will be invoked with three arguments: the push message, the channel name and the raw MessageEvent itself.",
            "name": "onmessage",
            "required": "true",
            "type": "java.lang.String"
          },
          {
            "description": "The JavaScript event handler function that is invoked when a connection error has occurred and the websocket will attempt to reconnect. The function will be invoked with three arguments: the error reason code, thechannel name and the raw CloseEvent itself. Note that this will not be invoked on final close of theweb socket, even when the final close is caused by an error.",
            "name": "onerror",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Sets the JavaScript event handler function that is invoked when the web socket is closed and will not anymoreattempt to reconnect. The function will be invoked with three arguments: the close reason code, the channel nameand the raw CloseEvent itself. Note that this will also be invoked when the close is caused by anerror and that you can inspect the close reason code if an actual connection error occurred and which one (i.e.when the code is not 1000 or 1008). ",
            "name": "onclose",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": "Whether to (auto)connect the web socket or not.Defaults to true.It's interpreted as a JavaScript instruction whether to open or close the web socket push connection.Note that this attribute is re-evaluated on every ajax request.You can also explicitly set it to false and then manually control in JavaScript byOmniFaces.Push.open('channelName') and OmniFaces.Push.close('channelName').",
            "name": "connected",
            "required": "false",
            "type": "boolean"
          }
        ]
      },
      {
        "description": " The o:selectItemGroups is an extension of {@link UISelectItems} which allows you to iterate over a nested collection representing groups of select items. This is the {@link UIComponent} counterpart of javax.faces.model.SelectItemGroup. There is no equivalent (yet) in the standard JSF API. Currently the only way to represent {@link SelectItemGroup} in UI is to manually create and populate them in a backing bean which can end up to be quite verbose. Below example assumes a List<Category> as value wherein Category in turn has a List<Product>. <h:selectOneMenu value='#{bean.selectedProduct}' converter='omnifaces.SelectItemsConverter'> <f:selectItem itemValue='#{null}' /> <o:selectItemGroups value='#{bean.categories}' var='category' itemLabel='#{category.name}'> <f:selectItems value='#{category.products}' var='product' itemLabel='#{product.name}' /> </o:selectItemGroups> </h:selectOneMenu>",
        "name": "selectItemGroups",
        "attribute": [
          {
            "description": "Any Iterable, Map or array of objects representing select item groups.",
            "name": "value",
            "required": "true",
            "type": "java.lang.Object"
          },
          {
            "description": "The name of the EL variable which exposes the currently iterated select item group.Defaults to item.",
            "name": "var",
            "required": "false"
          },
          {
            "description": "The value of the select item group.This will be exposed to any nested UISelectItem(s) children.Defaults to the currently iterated select item group.",
            "name": "itemValue",
            "required": "false",
            "type": "java.lang.Object"
          },
          {
            "description": "The label of the select item group.Defaults to the String representation of itemValue.",
            "name": "itemLabel",
            "required": "false",
            "type": "java.lang.String"
          }
        ]
      },
      {
        "description": " The PathParam is a component that extends the OmniFaces Param to support MultiViews feature of FacesViews. It is done by rendering the supplied parameters of such components as <h:link> and <h:button> among others as path parameters and not as query parameters as otherwise will be produced by <o:param> and <f:param> tags. The component has built-in support for a Converter to convert the supplied value to string by usual means via the converter attribute of the tag, or the nested <f:converter> tag, or just automatically if a converter is already registered for the target class via @FacesConverter(forClass). This component doesn't support returning encoded output of its children as parameter value in case no value is present. This feature is provided by Param component instead. Also, the name attribute must not be specified for this component as it already evaluates to a predefined one. This component is used to create bookmarkable URLs via standard outcome target components that take into account <o:pathParam> tags nested in the components. The path parameters will be rendered in the order they were declared for a view id that is defined as a multi view and if the view was not defined as a multi view then they won't be rendered at all. Additionally, declaring path parameters for a non-multi view will be logged as a warning and a faces warning message will be added for any stage different from Production. In the following example the link to the multi view page will be rendered with two path parameters: <h:link value='Link' outcome='multiview-supported-path'> <o:pathParam value='first' /> <o:pathParam value='second' /> </h:link> The code above will be rendered as: <a id='...' name='...' href='/context-path/multiview-supported-path/first/second'>Link</a>. The path parameters will be available via @Inject @Param(pathIndex=0) private String first; and @Inject @Param(pathIndex=1) private String second; the usual way. ",
        "name": "pathParam",
        "attribute": [
          {
            "description": " The component identifier for this component. This value must be unique within the closest parent component that is a naming container. ",
            "name": "id",
            "required": "false",
            "type": "java.lang.String"
          },
          {
            "description": " The ValueExpression linking this component to a property in a backing bean. ",
            "name": "binding",
            "required": "false",
            "type": "javax.faces.component.UIComponent"
          },
          {
            "description": " Converter instance registered with this component. ",
            "name": "converter",
            "required": "false",
            "type": "javax.faces.convert.Converter"
          },
          {
            "description": " Flag enabling or disabling the inclusion of the parameter. ",
            "name": "disable",
            "required": "false",
            "type": "boolean"
          },
          {
            "description": " Value of the parameter to be set. ",
            "name": "value",
            "required": "false",
            "type": "java.lang.Object"
          }
        ]
      }
    ]
  }
}