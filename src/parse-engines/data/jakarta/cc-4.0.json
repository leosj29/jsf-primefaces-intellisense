{
  "components": {
    "component": [
      {
        "name": "actionSource",
        "description": "Declares that the\ncomposite component whose contract is declared by the\n<cc:interface> in which this element is nested\nexposes an implementation of ActionSource2 suitable for use\nas the target of attached objects in the using page.\nAny attached objects suitable for implementations of\nActionSource2 may be attached to the composite component.\nConsider this excerpt from the using page:\n             The <f:actionListener> elements on lines 4, 7, and 10\nrefer to the attached objects declared on lines 2, 3 and 4 below. Most of the concepts from example content from <cc:valueHolder>\nalso applies in the case of\n<cc:actionSource>. Please see <cc:interface> for a usage\nexample.",
        "attribute": [
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object\n  nested within a composite component.   If the \"targets\" attribute is not specified,\n  this value also represents the component ID of the target component within the\n  that the <cc:implementation>\n  ActionListener should be mapped to."
          },
          {
            "name": "hidden",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "targets",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If  present, this must be a space (not tab) separated list of client\nids (relative to the top level component) of components within\nthe <cc:implementation> section.  Space is\nused as the delimiter for compatibility with the IDREFS and NMTOKENS\ndata types from the XML Schema."
          }
        ]
      },
      {
        "name": "attribute",
        "description": "Declares an attribute that may be given to an instance of the\ncomposite component tag for this composite component.  There\nmay be zero or many of these inside of the\n<cc:interface> section.  This element may be\nnested within other <cc:attribute> elements to\nconvey a usage contract that includes nested properties. Please see summary\npage for a usage example. The top level component in which this element is\n            ultimately nested must be a NamingContainer.\n            There are certain component properties that must not be\n            exposed using this element.  The motivation for this\n            restriction is that the mapping of markup attributes to\n            component properties/attributes does not allow for these\n            attributes to be set.  The following properties must not be\n            exposed using this element.",
        "attribute": [
          {
            "name": "default",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If this attribute is not required, and a\n                value is not supplied by the page author, use this as\n                the default value."
          },
          {
            "name": "expert",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this component only for expert users?\n                The value of this attribute will be set as the value for\n                this property on the composite component bean\n                descriptor."
          },
          {
            "name": "method-signature",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "Declares that this attribute must be a MethodExpression\nwhose method signature is described by the value of this attribute.  The\nsignature must be described using fully qualified class names wherever a\ntype is required.  This attribute is mutually exclusive with the \"type\"\nattribute.  If both attributes are present, the \"method-signature\"\nattribute is ignored. \n\n\t    Provides the signature of the Java method.  The syntax of\n\t    the method-signature element is as follows (taken from\n\t    function-signature in web-jsptaglibrary_2_1.xsd):\n\n\t\tMethodSignature ::= ReturnType S MethodName S?\n\t\t\t\t      '(' S? Parameters? S? ')'\n\n                ReturnType        ::= Type\n\n\t\tMethodName        ::= Identifier\n\n\t\tParameters        ::=   Parameter\n\t\t\t\t      | ( Parameter S? ',' S? Parameters )\n\n                Parameter         ::= Type\n\n\t\tWhere:\n\n\n\n \t\t    Type is a basic type or a fully qualified\n\t\t      Java class name (including package name),\n\t\t      as per the 'Type' production in the Java\n\t\t      Language Specification, Second Edition,\n\t\t      Chapter 18.\n\n                    Identifier is a Java identifier, as per\n\t\t      the 'Identifier' production in the Java\n\t\t      Language Specification, Second\n\t\t      Edition, Chapter 18.\n\n\n\n\t    Example:\n\n\t    java.lang.String nickName( java.lang.String, int )"
          },
          {
            "name": "preferred",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this a \"preferred\" component.  The value\n                of this attribute will be set as the value for this\n                property on the composite component bean\n                descriptor."
          },
          {
            "name": "shortDescription",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this\n                component.  The value of this attribute will be set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "targets",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If this element has a method-signature attribute, the\nvalue of the targets attribute must be interpreted as a\nspace (not tab) separated list of client ids (relative to the top\nlevel component) of components within the\n<cc:implementation> section.  Space is used as\nthe delimiter for compatibility with the IDREFS and NMTOKENS data types\nfrom the XML Schema.  Each entry in the list must be interpreted as the\nid of an inner component to which the MethodExpression from\nthe composite component tag in the using page must be\napplied.  If this element has a method-signature attribute,\nbut no targets attribute, the value of the\nname attribute is used as the single entry in the list.  If\nthe value of the name attribute is not one\nof the special values listed in the description of the name\nattribute, targets (or its derived value) need not\ncorrespond to the id of an inner component."
          },
          {
            "name": "displayName",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette\n                containing this component.  The value of this attribute will be set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "hidden",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only\n                        for tool use, and which should not be exposed to humans. The value of\n                        this attribute will be set as the value for this property on the\n                        composite component bean descriptor."
          },
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name of the attribute as it must appear on the composite\ncomponent tag in the using page.  If the value of the\nname attribute is equal to (without the quotes)\n“action”, “actionListener”,\n“validator”, or “valueChangeListener”, the\naction described in ViewHandler.retargetMethodExpressions()\nmust be taken to handle the attribute.  In these cases, the\nmethod-signature attribute, if present, must be ignored as\nits value is derived as described in\nretargetMethodExpressions()."
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "True if the page author must supply a value\n                for this attribute.  The default value is false."
          },
          {
            "name": "targetAttributeName",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to \n              java.lang.String\n            )",
            "description": "This attribute allows the name of the attribute exposed to the using\npage to differ from the one actually used in the implementation.  For\nexample, consider a composite component that contains two buttons, one\nthat means \"submit\" and one that means \"cancel\".  It is natural to want\nto declare two composite component attributes to allow these buttons to\nbe customized, for example, \"submitAction\" and \"cancelAction\".  For both\nof these buttons, the method expression should be retargeted to the\ninner button's \"action\" attribute.  This scenario would be expressed as\nfollows. \n\n\n<cc:interface>\n  <cc:attribute name=\"submitAction\" targetAttributeName=\"action\"\n                method-signature=\"java.lang.Object action()\"/>\n  <cc:attribute name=\"cancelAction\" targetAttributeName=\"action\"\n                method-signature=\"java.lang.Object action()\"/>\n  <cc:actionSource name=\"submitAction\"/>\n  <cc:actionSource name=\"cancelAction\"/>  \n</cc:interface>\n<cc:implementation>\n  <h:commandButton id=\"submitAction\" value=\"submit\" />\n  <h:commandButton id=\"cancelAction\" value=\"cancel\" />\n</cc:implementation>"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "Declares that this attribute must be a ValueExpression\n                whose expected type is given by the value of this attribute. If\n                not\n                specified, and no \"method-signature\" attribute is present,\n                java.lang.Object is assumed. This\n                attribute is mutually\n                exclusive with the \"method-signature\" attribute. If both attributes are\n                present, the\n                \"method-signature\" attribute is ignored."
          }
        ]
      },
      {
        "name": "clientBehavior",
        "description": "Declares that the composite component whose contract is declared by\nthe <cc:interface> in which this element is\nnested exposes an implementation of ClientBehaviorHolder\nsuitable for use as the target of attached objects in the\nusing page.  Any attached objects suitable for implementations of\nClientBehaviorHolder may be attached to the composite\ncomponent.",
        "attribute": [
          {
            "name": "default",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "If the evaluated value of this attribute is true, the page\nauthor may omit the the \"event\" attribute when specifying the behavior\nin the using page.  This is analogous to \"action\" being the default\nevent for commandLink.  The usage of this attribute assumes\nonly one clientBehavior is declared in this composite\ncomponent.  If more than one is specified, only the first one is used in\nthe case of a using page with no event attribute."
          },
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object\n  nested within a composite component.   If the \"targets\" attribute is not specified,\n  this value also represents the component ID of the target component within the\n  that the <cc:implementation>\n  to which the ActionListener should be mapped."
          },
          {
            "name": "event",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The evaluated value of this attribute will be passed as the first\nargument to the addClientBehavior() method on\nClientBehaviorHolder."
          },
          {
            "name": "targets",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client\nids (relative to the top level component) of components within\nthe <cc:implementation> section.  Space is\nused as the delimiter for compatibility with the IDREFS and NMTOKENS\ndata types from the XML Schema."
          }
        ]
      },
      {
        "name": "editableValueHolder",
        "description": "Declares that the\ncomposite component whose contract is declared by the\n<cc:interface> in which this element is nested\nexposes an implementation of EditableValueHolder suitable\nfor use as the target of attached objects in the using\npage.  Any attached objects suitable for implementations of\nEditableValueHolder may be attached to the composite\ncomponent.The example from <cc:valueHolder>\nstill applies.\n             Please see <cc:interface> for a usage\nexample.",
        "attribute": [
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on\n                an attachable object\n                nested within a composite component. If the \"targets\" attribute\n                is not specified,\n                this value also represents the component ID of the target\n                component within the\n                that the <cc:implementation>\n                to which the ActionListener should be mapped."
          },
          {
            "name": "targets",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated\n                list of client\n                ids (relative to the top level component)\n                of components within\n                the <cc:implementation>\n                section. Space is\n                used as the delimiter for compatibility with the IDREFS and\n                NMTOKENS\n                data types from the XML Schema."
          }
        ]
      },
      {
        "name": "extension",
        "description": "Used within a <cc:interface>\n            section,\n            within any sub-element of that section, to include XML content not\n            defined by this specification. This element can be used to\n            incorporate\n            JSR-276\n            metadata into a composite component.",
        "attribute": []
      },
      {
        "name": "facet",
        "description": "Declares that this composite component supports a facet\n            with the\n            name given by the value of the \"name\" attribute.  Please see <cc:interface>\n            for a usage\n            example.",
        "attribute": [
          {
            "name": "displayName",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette\n                containing this component. The value of this attribute will be\n                set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "hidden",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are intended only \n                for tool use, and which should not be exposed to humans."
          },
          {
            "name": "preferred",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this a \"preferred\" facet. The value\n                of this attribute will be set as the value for this\n                property on the composite component bean\n                descriptor."
          },
          {
            "name": "shortDescription",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this\n                facet. The value of this attribute will be set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "expert",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this facet only for expert users?\n                The value of this attribute will be set as the value for\n                this property on the composite component bean\n                descriptor."
          },
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name of the attribute as it must appear\n                on the composite component tag in the\n                using page."
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "True if the page author must supply a facet with this\n                name."
          }
        ]
      },
      {
        "name": "implementation",
        "description": "Defines the implementation of the composite\n            component.  There must be zero or one of these in a\n            composite component markup file.  If a\n            <cc:interface> element appears,\n            there must be a corresponding\n            <composite-implementation> element. If no\n            <cc:interface> element appears,\n            the <composite-implementation> element is\n            optional.",
        "attribute": []
      },
      {
        "name": "insertChildren",
        "description": "This element is used in the\n            <cc:implementation>\n            section. Any child\n            components or template text within the composite component tag in\n            the\n            using page will be re-parented into the composite component at the\n            point\n            indicated by this tag's placement within the\n            <cc:implementation>\n            section. The normal\n            use-case for this element is to have only one occurrence within the\n            <cc:implementation>\n            section. Inserting\n            multiple occurrences may cause duplicate id errors. The results are\n            undefined if there are multiple occurrences of this element in the\n            <cc:implementation>\n            section.",
        "attribute": []
      },
      {
        "name": "insertFacet",
        "description": "The presence of this tag in\na <cc:implementation> section must cause the\nnamed facet to be taken from the facet map of the top level\ncomponent and inserted as a facet child of the component in which\nthis element is nested.  The results are\nundefined if there are facets in the composite component tag in the\nusing page, but there is no correspondingly named occurrence of this\nelement in the <cc:implementation>\nsection.",
        "attribute": [
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name of the facet child on the top level\n                component which\n                must be inserted as a facet child of the component in which this\n                element\n                is nested."
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "If true, and there is no such\n                facet present on the top\n                level component, a TagException must be\n                thrown, containing\n                the Location, the facet name, and a\n                localized descriptive\n                error message."
          }
        ]
      },
      {
        "name": "interface",
        "description": "This\n            element declares the usage contract for a composite\n            component.  Optionally, and at the component author's\n            discretion, this contract exposes the features of one or\n            more inner components to the page author.  The page author\n            can work with the composite component as a single component\n            whose feature set is the union of the features declared in\n            the usage contract. For example, consider a composite component that\n            implements the functionality of a \"login panel\".  Such a\n            component would likely have two text fields and one button.\n            The user of such a component might like to do one or more of\n            the following. Be able to listen for the ActionEvent\n            on the button. In this case, a\n            <cc:actionSource> element is\n            included in the usage contract that refers to the inner\n            button in the <cc:implementation>\n            section. Provide an \"action\" to invoke when the button is pressed.\n\t   In this case, a\n            <cc:attribute> element is included\n            in the usage contract that refers to the inner button in the\n            <cc:implementation> section and\n            declares the proper method signature for an \"action\". Provide parameters to the composite component for\n\t  labels and other rendering specific aspects of the composite\n\t  component. In this case, one or more\n          <cc:attribute> elements are included\n          in the usage contract and those parameters are referred to in\n          the <cc:implementation> section\n          using EL expressions like\n          #{cc.attrs.usernameLabel},\n          assuming usernameLabel is the name\n          of one of the <cc:attribute>\n          elements in the usage contract. Add ValueChangeListeners,\n\t  Converters, or Validators to either\n\t  or both text fields.\n\t   In this case, a\n           <cc:editableValueHolder> element is\n           included in the usage contract that refers to the inner text\n           field in the <cc:implementation>\n           section.  In the case of wanting to enable only adding a\n           Converter (and not a\n           ValueChangeListener or Validator, a\n           <cc:valueHolder> element would be\n           used. Add facet children to the login panel. In this case, a <cc:facet>\n          element is included in the usage contract that refers to the\n          inner <cc:renderFacet> element in\n          the <cc:implementation> section.\n           For each of the behaviorial interfaces in\n            section 3.2 \"Component Behavioral Interfaces\" of the Jakarta Faces Specification Document,\n            there is a tag in the\n            cc: library to nest inside of the\n            <cc:interface> section.\n             If the <cc:interface> section\n            is not present in a VDL view, the contract will be\n            inferred as described in the specification.  There must be\n            zero or one of these elements in a composite component VDL\n            file.  If a <cc:interface> element\n            does appear, there must be an accompanying\n            <cc:implementation> element in the\n            same VDL file.   Nesting of composite components The implementation must support nesting of composite\n           components.  Specifically, it must be possible for the\n           <cc:implementation> section of a\n           composite component to act as the using page for\n           another composite component.  When a composite component\n           exposes a behavioral interface to the using page,\n           such as a <cc:actionSource>,\n           <cc:editableValueHolder>,\n           <cc:valueHolder> or other\n           behavioral interface, it must be possible to\n           “propogate” the exposure of such an interface in\n           the case of a nested composite component.  The composite\n           component author must ensure that the value of the\n           name attributes exactly match at all levels of\n           the nesting to enable this exposure to work.  The\n           implementation is not required to support\n           “re-mapping” of names in a nested composite\n           component. For example, consider this nested composite component. Using page actionSourceOuter.xhtml: Outer composite component actionSourceInner.xhtml: the composite component used within a\ncomposite component. The id of the <h:commandButton> on\nline 6 of actionSourceInner.xhtml must match the name on\nline 2 of that file (this is a standard requirement for all composite\ncomponents, nested or not).  That id must also match the\nname on line 2 of actionSourceOuter.xhtml, and the\nfor on line 2 of the using page. The implementation must support any level of nesting as long as the\nfor, name, and id values match\nup.  Furthermore, the targets attribute is also valid for\nuse in this nested fashion. Naming containers within composite components Composite components are themselves naming containers so that any\npossible id conflicts between inner components and components in the\nusing page are avoided.  However, special care must be taken when using\nnaming containers in the <cc:implementation>\nsection.  In such cases the value of the “name” attribute,\nor the values of the “targets” attribute must be used with a\nclientId relative to the top level component to expose any\nattached object targets to the using page.  For example: Using page loginButton.xhtml Because the button on line 8 resides within a form, it must be\nreferred to using a client id, relative to the top level\ncomponent, in the \"targets\" attribute on line 2.  Using a relative\nclientId is required due to the semantics of\nUIComponent.findComponent().",
        "attribute": [
          {
            "name": "componentType",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The component-type of the UIComponent\n                that\n                will serve as the composite component root\n                for this composite\n                component. The declared component-family\n                for this\n                component must be jakarta.faces.NamingContainer."
          },
          {
            "name": "expert",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this component only for expert users?\n                The value of this attribute will be set as the value for\n                this property on the composite component bean\n                descriptor."
          },
          {
            "name": "name",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name of this composite component.\n                Advisory only. The real name is taken from the\n                filename. The value of this attribute will be set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "shortDescription",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "A short description of the purpose of this\n                component. The value of this attribute will be set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "displayName",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The name to display in a tool palette\n                containing this component. The value of this attribute will be\n                set as\n                the value for this property on the composite\n                component bean descriptor."
          },
          {
            "name": "hidden",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are \n                 intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "preferred",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "Is this a \"preferred\" component. The value\n                of this attribute will be set as the value for this\n                property on the composite component bean\n                descriptor."
          }
        ]
      },
      {
        "name": "renderFacet",
        "description": "This element is used in the\n<cc:implementation> section.  The facet with\nthe name equal to the value of the name attribute, given by the page\nauthor in the using page, will be rendered at this point in the\ncomposite component VDL view.  The implementation of this tag handler must insert a\n            component with component-type\n            jakarta.faces.Output and renderer-type\n            jakarta.faces.CompositeFacet as a\n            child at this point in the component tree. The implementation of this tag handler must store an attribute into\nthe created component's attribute map under the key given by the value\nof the symbolic constant UIComponent.FACETS_KEY.  The value\nfor this key must be the evaluated value of the \"name\" attribute.",
        "attribute": [
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The value of the name attribute as it must appear on an\n<f:facet> tag nested within the composite\ncomponent tag in the using page."
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "If true, and there is no such\n                facet present on the top\n                level component, a TagException must be\n                thrown, containing\n                the Location, the facet name, and a\n                localized descriptive\n                error message."
          }
        ]
      },
      {
        "name": "valueHolder",
        "description": "Declares that the\ncomposite component whose contract is declared by the\n<cc:interface> in which this element is nested\nexposes an implementation of ValueHolder suitable for use\nas the target of attached objects in the using page.\nAny attached objects suitable for implementations of\nValueHolder may be attached to the composite component.\nConsider this excerpt from the using page:\n             Line 2 refers to the\n           <cc:valueHolder> declaration on\n           line 2 of foo.xhtml:  It is possible to declare that a single\n<cc:valueHolder> element should cause multiple\ncomponents within the <cc:implementation>\nsection to be the targets of an attached object in the\nusing page.  Assuming the same using page excerpt as\nabove, the revised VDL view is: In this case, the \"targets\" attribute on the\n<cc:valueHolder> element, on line 2 above,\nreplaces the \"name\" attribute in the previous example.  \"targets\" is a\nlist of ids of client ids (relative to the top level component)\nwithin the <cc:implementation> section.  In\nthis case, \"targets\" refers to the <h:inputText>\ncomponents on lines 6 and 7 above. Please see <cc:interface> for a usage\nexample.",
        "attribute": [
          {
            "name": "hidden",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to boolean)",
            "description": "The \"hidden\" flag is used to identify features that are \n                 intended only for tool use, and which should not be exposed to humans."
          },
          {
            "name": "targets",
            "required": "false",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "If present, this must be a space (not tab) separated list of client\nids (relative to the top level component) of components within\nthe <cc:implementation> section.  Space is\nused as the delimiter for compatibility with the IDREFS and NMTOKENS\ndata types from the XML Schema."
          },
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression\n                                \n                                (must evaluate to java.lang.String)",
            "description": "The value of this attribute maps back to the \"for\" attribute on an attachable object\n  nested within a composite component.   If the \"targets\" attribute is not specified,\n  this value also represents the component ID of the target component within the\n  that the <cc:implementation>\n  ActionListener should be mapped to."
          }
        ]
      }
    ]
  }
}