{
  "components": {
    "component": [
      {
        "name": "column",
        "description": "Renders a UIComponent that represents a single column of data within a parent UIData component.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.Column",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for the associated component"
          },
          {
            "name": "headerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any column header generated for this table"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The value binding expression linking this component to a property in a backing bean"
          },
          {
            "name": "footerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any column footer generated for this table"
          },
          {
            "name": "rowHeader",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this column is a row header column and therefore cells in this column should be rendered with 'th' instead of 'td' and must have the scope='row' attribute"
          }
        ]
      },
      {
        "name": "doctype",
        "description": "Render the markup for a <!DOCTYPE> declaration. Decode Behavior No action is required during decode for this renderer. Encode Behavior Output an XML Doctype using the provided attributes. Output the literal text <!DOCTYPE. The 'rootElement' attribute is required and must be rendered next. If the 'public' attribute is defined, render the literal text PUBLIC then render the value of the attribute inside double quotes. If the 'system' attribute is defined, render it next, inside double quotes. Close the doctype declaration with the literal text >. No relocation occurs with the output of this component. It is rendered at whatever position in the view hierarchy it happens to be encountered when traversing the view to render. Therefore, this component must be located in the view hierarchy at the correct location so that the final rendered markup has it in the proper place with respect to the user agent that consumes the rendered markup. In practice this means in front of the <html> or <h:html> element. Furthermore, if multiple <h:doctype> components exist, all of them will be rendered. If this component is present in a view, any DOCTYPE that would otherwise have been rendered by virtue of being present in the VDL page must be ignored.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlDoctype",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Doctype",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "rootElement",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The root XML element"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "public",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Will be output as the public part of the DOCTYPE"
          },
          {
            "name": "system",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Will be output as the system part of the DOCTYPE"
          }
        ]
      },
      {
        "name": "message",
        "description": "Render a single message for a specific component. Set-up for Rendering Obtain the 'summary' and 'detail' properties from UIMessage component. If not present, keep the empty string as the value, respectively. Obtain the first FacesMessage to render from the component, using the 'for' property of the UIMessage. This will be the only message we render. Obtain the severity style for this message. If the severity of the message is FacesMessage.SEVERITY_INFO, the severity style comes from the value of the 'infoStyle' attribute. If the severity of the message is FacesMessage.SEVERITY_WARN, the severity style comes from the value of the 'warnStyle' attribute, and so on for each of the severities, INFO, WARN, ERROR and FATAL. The same rules apply for obtaining the severity style class, but instead of 'infoStyle, warnStyle', etc use 'infoClass, warnClass', etc. Obtain the 'style','styleClass' and 'layout' attributes from the UIMessage component. If we have a 'style' attribute and a severity style attribute, use the severity style attribute as the value of the 'style' attribute. If we have no 'style' attribute, but do have a severity style, use the severity style as the value of the 'style' attribute. The same precedence rules apply for the style class. Obtain the value of the dir and lang attributes. Rendering For the message renderer, we only render one row, for the first message. For the messages renderer, we render as many rows as we have messages. If any of the 'dir','lang', 'style' or 'styleClass' attributes has a non-null value (as determined above), render a 'span' element, outputting the value of the 'style' attribute as the the value of the 'style' attribute, and outputting the value of the 'styleClass' attribute as the value of the 'class' attribute on the 'span' element. Output the 'dir' and 'lang' attributes as well, if they are present. If the UIMessage has a 'tooltip' attribute with the value of 'true', and the UIMessage has 'showSummary' and 'showDetail' properties with the value 'true', if we haven't already written out the 'span', output the 'summary' as the value of the 'title' attribute on the 'span' If we haven't already written out a 'title' attribute, and 'showSummary' is true, output the summary. If 'showDetail' is true, output the detail. Close out the span if necessary.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlMessage",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Message",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "for",
            "required": "true",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "showSummary",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is 'false'"
          },
          {
            "name": "errorClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'ERROR'"
          },
          {
            "name": "fatalClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'FATAL'"
          },
          {
            "name": "infoClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'INFO'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "tooltip",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of the message should be displayed as a tooltip"
          },
          {
            "name": "warnStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'WARN'"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "showDetail",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is 'true'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "errorStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'ERROR'"
          },
          {
            "name": "fatalStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'FATAL'"
          },
          {
            "name": "infoStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'INFO'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "warnClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'WARN'"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "link",
        "description": "Render an HTML 'a' anchor element. The value of the component is rendered as the anchor text and the outcome of the component is used to determine the target URL rendered in the 'href' attribute. Any child UIParameter components are appended to the String to be output as the value of the 'href' attribute as query parameters before rendering. The entire 'href' string must be passed through a call to the encodeResourceURL() method of the ExternalContext. The name of the UIParameter goes on the left hand side, and the value of the UIParameter on the right hand side. The name and the value must be URLEncoded. Each UIParameter instance is separated by an ampersand, as dictated in the URL spec. If the 'fragment' attribute is specified, the value will be included at the end of the resulting URL preceded by a hash mark. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. If the 'id' attribute is specified, follow the same steps as mentioned in the 'General Notes on Encoding' regarding the 'id' attribute for UIInput components. If the 'disabled' attribute is specified, do not render the HTML 'a' anchor element or the 'href' element. Instead, render a 'span' element. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'span' Render any pass-through attributes on the 'span'.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutcomeTargetLink",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Link",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "outcome",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The logical outcome used to resolve a navigation case"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object )",
            "description": "The current value of this component"
          },
          {
            "name": "charset",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The character encoding of the resource designated by this hyperlink"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "fragment",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The identifier of the page fragment which should be brought into focus when the target page is rendered. The value of this attribute is appended to the end of target URL following a hash (#) mark. This notation is part of the standard URL syntax"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "rev",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "disableClientWindow",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Disable appending the ClientWindow on the rendering of this element"
          },
          {
            "name": "includeViewParams",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean )",
            "description": "Whether to include page parameters in the target URI"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "coords",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit"
          },
          {
            "name": "hreflang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The language code of the resource designated by this hyperlink"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "rel",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "shape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "target",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The content type of the resource designated by this hyperlink"
          }
        ]
      },
      {
        "name": "head",
        "description": "Render the markup for a <head> element. Decode Behavior No action is required during decode for this renderer. Encode Behavior Render the starting <head> element tag. Any attributes declared on the element must be passed through unmodified to the rendered output. Just before rendering the closing </head> element tag, render any resources that have been targeted for this 'head' element: Obtain a UIViewRoot instance. Obtain a List of component resources targeted for this 'head' element with a call to UIViewRoot.getComponentResources() with the String 'head' as the argument. Iterate over the returned List of UIComponent instances and call encodeAll on each UIComponent instance. Any attributes declared on the element must be passed through unmodified to the rendered output. Render the ending </head> element tag.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.Output",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Head",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Code describing the language used in the generated markup for this component"
          }
        ]
      },
      {
        "name": "body",
        "description": "Render the markup for a <body> element. Decode Behavior No action is required during decode for this renderer. Encode Behavior Render the starting <body> element tag. Just before rendering the closing </body> element tag, render any resources that have been targeted for this 'body' element: Obtain a UIViewRoot instance. Obtain a List of component resources targeted for this 'body' element with a call to UIViewRoot.getComponentResources() with the String 'body' as the argument. Render the ending </body> element tag. Iterate over the returned List of UIComponent instances and call encodeAll on each UIComponent instance. Any attributes declared on the element must be passed through unmodified to the rendered output.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.Output",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Body",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onload",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when the user agent finishes loading a window or all frames within a frameset"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onunload",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when the user agent removes a document from a window or frame"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "messages",
        "description": "The same as for the Message renderer, but output all the messages. If an 'id' attribute has been specified, it must be rendered on the outermost markup corresponding to this component. If the value of the 'layout' attribute is 'table', render nested 'table', 'tr' and 'td' elements, in that order. If the value of the 'layout' attribute is 'list', or the 'layout' attribute is not specified, render nested 'ul', 'li' elements, in that order. Output the value of the 'style' attribute as the value of the 'style' attribute, output the value of the 'styleClass' attribute as the value of the 'class' attribute, and output the dir and lang attributes. Output these values on the 'table' element or the 'ul' element. Output the values of the 'errorStyle', 'fatalStyle', 'infoStyle', 'warnStyle' attributes as the value of the 'style' attribute on either the 'tr' element or the 'li' element. Output the values of the 'errorClass','fatalClass', 'infoClass','warnClass' attributes as the value of the 'class' attribute on either the 'tr' element or the 'li' element. The component is a UIMessages, and there is no 'for' attribute. Therefore, use either null to obtain the messages from the FacesContext or the empty string if the components 'globalOnly' property is true. If the layout was 'table' close out the table elements, otherwise, close out the list elements. If an h:form does not contain a h:messages tag and the ProjectStage is set to Development the runtime will automatically add h:messages for debugging purposes.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlMessages",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Messages",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "for",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "showDetail",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of displayed messages should be included. Default value is 'false'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "errorStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'ERROR'"
          },
          {
            "name": "fatalStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'FATAL'"
          },
          {
            "name": "infoStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'INFO'"
          },
          {
            "name": "layout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The type of layout markup to use when rendering error messages. Valid values are 'table' (an HTML table) and 'list' (an HTML list). If not specified, the default value is 'list'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "tooltip",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the detail portion of the message should be displayed as a tooltip"
          },
          {
            "name": "warnStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to apply to any message with a severity class of 'WARN'"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "globalOnly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is 'false'"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "showSummary",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether the summary portion of displayed messages should be included. Default value is 'true'"
          },
          {
            "name": "errorClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'ERROR'"
          },
          {
            "name": "fatalClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'FATAL'"
          },
          {
            "name": "infoClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'INFO'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "warnClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to any message with a severity class of 'WARN'"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "form",
        "description": "Renders an HTML 'form' element. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If the map contains an entry for the 'clientId' of this UIForm component, call setSubmitted(true) on the form, otherwise call setSubmitted(false) on the form. Encode Behavior The value of the 'method' attribute must be 'post'. The value of the 'action' attribute must be the result of passing the view identifier of the current view to the getActionURL() method of the ViewHandler for this application, then passing that String to the encodeActionURL() method on the ExternalContext. The value of the acceptcharset attribute must be rendered as the value of 'accept-charset'. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. Render a 'name' attribute with a value the same as the 'id' attribute as described in 'General Notes on Encoding' regarding the 'id' attribute for UIInput components. Obtain the UIViewRoot view identifier and use it to obtain an action URL by calling ViewHandler.getActionURL. Use the action URL to obtain an encoded action URL by calling ExternalContext.encodeActionURL. Obtain an encoded partial action URL by calling ExternalContext.encodePartialActionURL using action URL as the argument. Compare the result from ExternalContext.encodePartialActionURL with the value from ExternalContext.encodeActionURL(). If they are different, render a hidden field with the name jakarta.faces.encodedURL and the value of this hidden field as the value from ExternalContext.encodePartialActionURL. Call ViewHandler.writeState() before the the close of the 'form' element. Render all the necessary hidden fields for all commandLink instances in the page just before the close of the 'form' element. Just before rendering the closing </form> element tag, render any resources that have been targeted for this form: Obtain a UIViewRoot instance. Obtain a List of component resources targeted for this form with a call to UIViewRoot.getComponentResources() with the String 'form' as the argument. Iterate over the returned List of UIComponent instances and call encodeAll on each UIComponent instance.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlForm",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Form",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "acceptcharset",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "List of character encodings for input data that are accepted by the server processing this form"
          },
          {
            "name": "enctype",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Content type used to submit the form to the server. If not specified, the default value is 'application/x-www-form-urlencoded'"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onreset",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this form is reset"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "target",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the response retrieved after this form submit is to be displayed"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "prependId",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this form should prepend its id to its descendent's id during the clientId generation process. If this flag is not set, the default value is true"
          },
          {
            "name": "accept",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "List of content types that a server processing this form will handle correctly"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "onsubmit",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this form is submitted"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "button",
        "description": "Render an HTML 'input' element of type 'button'. The value of the component is rendered as the button text and the outcome of the component is used to determine the target URL which is activated by onclick. If 'image' attribute is specified, render it as the value of the 'src' attribute after passing it to the getResourceURL() method of the ViewHandler for this application, and passing the result through the encodeResourceURL() method of the ExternalContext. Any child UIParameter components are appended to the String to be used as the target URL as query parameters before rendering. The entire target URL string must be passed through a call to the encodeResourceURL() method of the ExternalContext. The name of the UIParameter goes on the left hand side, and the value of the UIParameter on the right hand side. The name and the value must be URLEncoded. Each UIParameter instance is separeted by an ampersand, as dictated in the URL spec. The final encoded result will be written out to the onclick attribute of the button as 'window.location.href = ''. If the developer has specified a custom onlclick the window.location.href name/value pair will be appended at the end of the developer specified script. If the 'fragment' attribute is specified, the value will be included at the end of the resulting URL preceded by a hash mark. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. If the 'id' attribute is specified, follow the same steps as mentioned in the 'General Notes on Encoding' regarding the 'id' attribute for UIInput components. If the 'disabled' attribute is specified, do not render the 'onclick' element and assign the 'disabled' attribute a value of true.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutcomeTargetButton",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Button",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "outcome",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The logical outcome used to resolve a navigation case"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object )",
            "description": "The current value of this component"
          },
          {
            "name": "alt",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Alternate textual description of the element rendered by this component. This attribute is ignored when the image attribute is not specified"
          },
          {
            "name": "fragment",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The identifier of the page fragment which should be brought into focus when the target page is rendered. The value of this attribute is appended to the end of target URL following a hash (#) mark. This notation is part of the standard URL syntax"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "disableClientWindow",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Disable appending the ClientWindow on the rendering of this element"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "includeViewParams",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean )",
            "description": "Whether to include page parameters in the target URI"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "image",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Absolute or relative URL of the image to be displayed for this button. If specified, this 'input' element will be of type 'image'. Otherwise, it will be of the type specified by the 'type' property with a label specified by the 'value' property. Note that if the value of this attribute starts with '/', the rendered value for this attribute will be prefixed with the context-root for this application"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputScript",
        "description": "Render the markup for a <script> element that renders the script Resource specified by the optional name attribute and library attributes. The implementation of this renderer must have a @ListenerFor annotation attached to it, at the class level, declaring PostAddToViewEvent.class as the value of the systemEventClass attribute. The presence of this annotation on a renderer implies the renderer implements ComponentSystemEventListener, which this renderer must do. The implementation of processEvent() must extract the UIComponent from the argument event and look for the presence of the key 'target' in the component's attribute Map. If and only if such a key is present, the implementation of processEvent() must pass the component to UIViewRoot.addComponentResource(). Decode Behavior No action is required during decode for this renderer. Encode Behavior Common Algorithm for Obtaining A Resource to Render This algorithm is used by all resource renderers to obtain a Resource instance which is then rendered in a specific way depending on what kind of renderer is doing the encoding. Look in the component attribute Map for a value under the key name. Look in the component attribute Map for a value under the key library. This attribute is optional, therefore, library may be null. Create the resource by calling Application.getResourceHandler.createResource(name, library);. Common Encode Behavior This algorithm is used by all resource renderers to render the resource. encodeBegin() must take no action. Because this renderer returns true from getRendersChildren(), the encodeChildren() method must take the following action. If there is no name attribute, and the argument component has no children, and ProjectStage is not ProjectStage.Production, add a FacesMessage for this component's clientId to the FacesContext stating that if no name attribute is present, and no body content is present either, then the user should take action to correct this problem. In this case, encodeChildren() must take no further action. If there is no name attribute and the argument component does have children, the renderer must ensure that those children are encoded as usual. If there is a name attribute and the argument component does have children, the renderer must log a descriptive localized message stating that the child content will be ignored. The resource referenced by the name attribute will be rendered in encodeEnd(). If there is a name attribute and the argument component does not have children, encodeChildren() must take no action. encodeEnd() must take specific action based on the specific kind of resource being rendered. Use the algorithm Common Encode Behavior for encodeBegin(), encodeChildren() and getRendersChildren(). For encodeEnd(), use the algorithm Common Algorithm for Obtaining A Resource to Render above to obtain a reference to the Resource to be encoded. If this is NOT the first time this Resource has been referenced on this request take no action and return. Render a script element. Use the result from calling resource.getRequestPath() as the value of the 'src' attribue. Use the result from calling resource.getContentType() as the value of the 'type' attribute, unless the value equals text/javascript and the current doctype is a HTML5 doctype.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.Output",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.resource.Script",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter )",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "library",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The libraryName for this resource"
          },
          {
            "name": "target",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The target area for which this resource will be rendered. For example, target='head' would cause the resource to be rendered within the head element"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object )",
            "description": "The current value of this component"
          },
          {
            "name": "name",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The resourceName for this resource. This attribute is required if the script is NOT inline"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputFormat",
        "description": "Render parameterized text. Obtain the style, styleClass, dir, and lang attributees from this component. If any are present, render a 'span' element. Output the styleClass attribute (if present) as the value of the class attribute. Output the style attribute as the value of the style attribute. Output the dir and lang attributes as pass through attributes. Accrue a list of the values of all child UIParameter components of this component. If there are one or more accumulated parameter values, convert the list of parameter values to an Object array, call MessageFormat.format(), passing the value of this component as the first argument, and the array of parameter values as the second argument, and render the result. Otherwise, render the value of this component unmodified.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutputFormat",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Format",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "escape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to 'true' by default"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "outputLink",
        "description": "Render an HTML 'a' anchor element. The value of the component is rendered as the value of the 'href' attribute. Any child UIParameter components are appended to the String to be output as the value of the 'href' attribute as query parameters before rendering. The entire 'href' string must be passed through a call to the encodeResourceURL() method of the ExternalContext. The name of the UIParameter goes on the left hand side, and the value of the UIParameter on the right hand side. The name and the value must be URLEncoded. Each UIParameter instance is separeted by an ampersand, as dictated in the URL spec. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. If the 'id' attribute is specified, follow the same steps as mentioned in the 'General Notes on Encoding' regarding the 'id' attribute for UIInput components. If the 'disabled' attribute is specified, do not render the HTML 'a' anchor element or the 'href' element. Instead, render a 'span' element. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'span' Render any pass-through attributes on the 'span'.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutputLink",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Link",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "coords",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "rev",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "charset",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "hreflang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "rel",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "shape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "target",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "selectManyCheckbox",
        "description": "Render an HTML checkbox list. Decode Behavior See the 'Decode Behavior for UISelectMany Components' section. Encode Behavior If the 'layout' attribute is specified, and its value is 'list', render a 'ul' element as root element, otherwise render a 'table' element. If the 'styleClass' is specified, render the value of the 'styleClass' attribute as the value of the 'class' attribute on the root element. If the 'style', or 'border' attributes are specified, pass them thru and render their values as the 'style' and 'border' attributes on the root element, respectively. If the 'layout' attribute is specified, and its value is 'pageDirection', render the children elements vertically, otherwise horizontally, in the root element. If any of the children are an instance of SelectItemGroup, render them as a nested root element. Each of the children are ultimately rendererd as follows. Render an 'input' element of 'type' 'checkbox' for each child component. Render the 'name' attribute on the 'input' element with the value of the clientId of the component. Render an 'id' attribute on the 'input' element. Each 'id' value must be unique. If the current SelectItem.isDisabled() returns true, render 'disabled' as the value of the 'disabled' attribute. Close out the 'input' element. Render a 'label' element. Render the 'for' attribute of the 'label' element whose value is the corresponding 'input' element's 'id' value. Render any 'style' as the 'class' attribute on the 'label' element. If the current checkbox would be rendered as being checked, and there is a 'selectedClass' attribute, append a space, followed by the value of the 'selectedClass' attribute to any existing 'class' attribute value on the label element. Otherwise, render the value of the 'selectedClass' attribute as the value of the 'class' attribute on the label element. If the current checkbox would be rendered as being not checked, and there is a 'unselectedClass' attribute, append a space, followed by the value of the 'unselectedClass' attribute to any existing 'class' attribute value on the label element. Otherwise, render the value of the 'unselectedClass' attribute as the value of the 'class' attribute on the label element. Close out the starting 'label' element and render the label value from SelectItem.getLabel(). Close out the 'label' element. As an exception to the general rules about how to handle the 'id' attribute, render it as an attribute on the outer 'table' element, the value of which is the clientId of the component per the rules at the beginning of this specification. The value of the current SelectItem is rendered as the value of the 'value' attribute. Coerce the value of the currently rendered child to the type of the parent UISelectMany value following the Expression Language coercion rules, before comparing the values. If the value of the enclosing UISelectMany matches the current value, render 'checked' as the value of the 'checked' attribute. See the 'Rendering the option elements' specification for ListboxRenderer for more detail on how to render the 'option' elements in this renderer.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectManyCheckbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Checkbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "border",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around the table containing the options list. This attribute is ignored when the 'layout' attribute equals to 'list'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "unselectedClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on unselected options"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "collectionType",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "layout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Orientation of the options list to be created. Valid values are 'pageDirection' (list is laid out vertically), or 'lineDirection' (list is laid out horizontally). If not specified, the default value is 'lineDirection'"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "selectedClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on selected options"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputText",
        "description": "If the 'styleClass', 'style', 'dir' or 'lang' attributes are present, render a 'span' element. If the 'styleClass' attribute is present, render its value as the value of the 'class' attribute. If the 'style' attribute is present, pass it thru. If the 'escape' attribute is not present, or it is present and its value is 'true' all angle brackets should be converted to the ampersand xx semicolon syntax when rendering the value of the 'value' attribute as the value of the component. If the 'escape' attribute is present and is 'false' the value of the component should be rendered as text without escaping.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutputText",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Text",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "escape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to 'true' by default"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "outputStylesheet",
        "description": "Render the markup for a <link> element that renders the style Resource specified by the optional name and library attributes. Decode Behavior No action is required during decode for this renderer. Encode Behavior Use the algorithm Common Encode Behavior for encodeBegin(), encodeChildren() and getRendersChildren(). For encodeEnd(), use the algorithm Common Algorithm for Obtaining A Resource to Render to obtain a reference to the Resource to be encoded. Output a <link> element. Use the result from calling resource.getRequestPath() as the value of the 'href' attribute. Use the result from calling resource.getContentType() as the value of the 'type' attribute, unless the value equals text/css and the current doctype is a HTML5 doctype.. Use the literal string 'stylesheet' as the value of the 'rel' attribute, and the literal string 'screen' as the value of the 'media' attribute. The implementation of this renderer must have a @ListenerFor annotation attached to it, at the class level, declaring PostAddToViewEvent.class as the value of the systemEventClass attribute. The presence of this annotation on a renderer implies the renderer implements ComponentSystemEventListener, which this renderer must do. The implementation of processEvent() must extract the UIComponent from the argument event pass it to UIViewRoot.addComponentResource(), specifying the literal string 'head' as the last argument. The stylsheet renderer must ensure that any stylesheets are included in the <head> of the document.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.Output",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.resource.Stylesheet",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter )",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean )",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "library",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The libraryName for this resource"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent )",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object )",
            "description": "The current value of this component"
          },
          {
            "name": "name",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String )",
            "description": "The resourceName for this resource. This attribute is required if the stylesheet is NOT inline"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "inputHidden",
        "description": "Renders an HTML 'input' element of type 'hidden'. Decode Behavior See the decode description for the Input Text renderer. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. Render the current value of the component as the value of the 'value' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlInputHidden",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Hidden",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "panelGroup",
        "description": "Intended for use in situations when only one UIComponent child can be nested, such as in the case of facets. If the 'style' or 'styleClass' attributes are present, and the 'layout' attribute is present with a value of 'block', render a 'div' element, outputting the value of the 'style' attribute as the value of the 'style' attribute and the value of the 'styleClass' attribute as the value of the 'class' attribute. Otherwise, if the 'layout' attribute is not present, or the 'layout' attribute contains a value other than 'block', render a 'span' element, outputting the value of the 'style' attribute as the value of the 'style' attribute, and the value of the 'styleClass' attribute as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlPanelGroup",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Group",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "layout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The type of layout markup to use when rendering this group. If the value is 'block' the renderer must produce an HTML 'div' element. Otherwise HTML 'span' element must be produced"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' property on generated markup"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "dataTable",
        "description": "Renders an HTML 'table' element compliant with the HTML 401 specification. Render the 'caption' facet, if present, inside a 'caption' element immediately below the 'table' element. If the 'captionClass' attribute is specified, render its value as the value of the 'class' attribute on the 'caption' element. If the 'captionStyle' attribute is specified, render its value as the value of the 'style' attribute on the 'caption' element. Please consult the javadoc for UIData to supplement this specification. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'table' element. Any pass-through attributes are also rendered on the 'table' element. Column Groups If the UIData component has a 'colgroups' facet, render its contents. Consistent with the rules of facets in general, this facet must have only one child. In general, this will be a panel group component that will contain colgroup and col elements per the HTML Table specification. Use of column grouping can improve accessibility. This facet must be rendered before the table header and footer. Rendering the header If the UIData component has a 'header' facet, or any of the child UIColumn components has a 'header' facet, render a 'thead' element. If the UIData component has a 'header' facet, encode its contents inside of 'tr' and 'th' elements, respectively. Output the value of the 'headerClass' attribute of the UIData component, if present, as the value of the 'class' attribute on the 'th'. Output the number of child UIColumn components of the UIData component as the value of the 'colspan' attribute on the 'th'. Output 'colgroup' as the value of the 'scope' attribute on the 'th' element. If any of the child UIColumn components has a 'header' facet render a 'tr' element. For each UIColumn that actually has a 'header' facet, render it inside of a 'th' element. Columns that don't have a 'header' facet cause an empty 'th' element to be rendered. Output the value of the 'headerClass' attribute of the UIColumn component, if present, as the value of the 'class' attribute on the 'th'. If the 'headerClass' attribute of the UIColumn component is not present, output the value of the 'headerClass' attribute of the UIData component, if present, as the value of the 'class' attribute on the 'th'. Output 'col' as the value of the 'scope' attribute on the 'th' element. Close out the 'thead' element. Rendering the footer Follow the same process as for the header, except replace 'header' with 'footer', 'th' with 'td', 'thead' with 'tfoot', and 'headerClass' with 'footerClass'. Do not render any 'scope' attribute for the footer. Rendering the table body Look at the value of the 'bodyrows' attribute. If present, this must be a comma separated list of integers. Each entry in this list is the row index of the row before which a 'tbody' element should be rendered. If there was no 'bodyrows' attribute, or it was empty, render a 'tbody' element. Keep track of the result of the 'rows' property on the UIData component. Keep track of the number of rows we have rendered so far. Iterate through the rows. Set the 'rowIndex' property of the UIData component to be correct as we iterate through the rows. Stop rendering children and close out the 'tbody' element if the 'rowAvailable' property of the UIData returned false. If the current row index is contained in the 'bodyrows' attribute, check if a 'tbody' start element was rendered that needs to be closed, and if so, close the 'tbody' element. Then render a 'tbody' element start. Otherwise, do not render a 'tbody' element. Output a 'tr' element. Output the value of the 'rowClasses' per the attribute description below. For each UIColumn child, if the column component has a 'rowHeader' attribute with a value of 'true', output a 'th' element with a 'scope' attribute with the value of 'row'. Otherwise, if the column component has no 'rowHeader' attribute, or its value is false, output a 'td' element. In either case attach the value of the 'columnClasses' attribute of the UIData component per the attribute description below. Recursively encode each child of each UIColumn child. Close out the 'td' or 'th' element. When done with the row, close out the 'tr' element. When done with all the rows, close out the 'tbody' element. When done rendering all the rows, set the 'rowIndex' property of the UIData to -1, and close out the 'table' element.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlDataTable",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Table",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "first",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Zero-relative row number of the first row to be displayed. If this property is set to zero, rendering will begin with the first row of the underlying data"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "bgcolor",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name or code of the background color for this table"
          },
          {
            "name": "border",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around this table"
          },
          {
            "name": "captionStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this caption is rendered"
          },
          {
            "name": "cellspacing",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the left side of the table and the leftmost column, the top of the table and the top of the top side of the topmost row, and so on for the right and bottom of the table. It also specifies the amount of space to leave between cells"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "frame",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which sides of the frame surrounding this table will be visible. Valid values are: none (no sides, default value); above (top side only); below (bottom side only); hsides (top and bottom sides only); vsides (right and left sides only); lhs (left hand side only); rhs (right hand side only); box (all four sides); and border (all four sides)"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "rules",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which rules will appear between cells within this table. Valid values are: none (no rules, default value); groups (between row groups); rows (between rows only); cols (between columns only); and all (between all rows and columns)"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rows",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of rows to display, starting with the one identified by the 'first' property. If this value is set to zero, all available rows in the underlying data model will be displayed"
          },
          {
            "name": "var",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a request-scope attribute under which the model data for the row selected by the current value of the 'rowIndex' property (i.e. also the current value of the 'rowData' property) will be exposed"
          },
          {
            "name": "bodyrows",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated list of row indices for which a new 'tbody' element should be started (and any previously opened one should be ended)"
          },
          {
            "name": "captionClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any caption generated for this table"
          },
          {
            "name": "cellpadding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the border of each cell and its contents"
          },
          {
            "name": "columnClasses",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of actual column children of the UIData, no 'class' attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of actual column children of the UIData, the elements at the posisiton in the list after the last column are ignored"
          },
          {
            "name": "footerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this table"
          },
          {
            "name": "headerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this table"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "rowClasses",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the rows of this table. A space separated list of classes may also be specified for any individual row. Thes styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "summary",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Summary of this table's purpose and structure, for user agents rendering to non-visual media such as speech and Braille"
          },
          {
            "name": "width",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Width of the entire table, for visual user agents"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "selectOneListbox",
        "description": "Render an HTML option list. Decode Behavior See the 'Decode Behavior for UISelectOne Components' section. Encode Behavior Render an HTML 'select' element. Render the clientId of the component as the value of the 'name' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'select' element. If the component to be rendered is a UISelectMany, render 'multiple' as the value of the 'multiple' attribute. If the 'size' attribute is specified, render its value as the value of the 'size' attribute. Otherwise use the number of items as the value of the 'size' attribute. See the Rendering the option elements' specification for ListboxRenderer for more detail on how to render the 'option' elements in this renderer.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectOneListbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Listbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "size",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Number of available options to be shown at all times. If not specified, all available options are shown"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "inputFile",
        "description": "Renders an HTML 'input' element of 'type''file'. The standard HTML_BASIC RenderKit specifies behavior that assumes Servlet 3.0 or later. Portlet implementations must override this implementation with a semantically equivalent one that functions under the constraints of the Portlet specification. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If the Map contains an entry for the 'clientId' of the component, pass the value of the entry to the setSubmittedValue() method of the component, which must be an instance of EditableValueHolder, and return. Otherwise, obtain the 'request' property from the ExternalContext and cast it to jakarta.servlet.http.HttpServletRequest. Call getParts() on the httpServletRequest. Iterate over the parts. If the 'name' property of the current part is equal to the 'clientId', then collect the part. After the iteration, if the multiple attribute is set to true, then pass java.util.Collection<jakarta.servlet.http.Part> to the setSubmittedValue() method of the component, else pass the first item, if any, as jakarta.servlet.http.Part to the setSubmittedValue() method of the component. If an exception is thrown during the iteration, log the exception and continue. The standard implementation must override the getConvertedValue() so that it filters out from the submittedValue any parts which return null or an empty string on getSubmittedFileName(), or return 0 or less on getSize(). Any exception thrown when interacting with the underlying multi-part API must be wrapped in a FacesException and allowed to reach the ExceptionHandler. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. Do not render the 'value' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. If ProjectStage is not ProjectStage.Production, verify that the enclosing form has an enctype attribute whose value is multipart/form-data. If not, add a FacesMessage for this component's clientId to the FacesContext stating that file upload requires a form with enctype equal to multipart/form-data. If ProjectStage is ProjectStage.Production, do not do this verification.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlInputFile",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.File",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component. If the multiple attribute is set to true, then this must be assignable to java.util.Collection<jakarta.servlet.http.Part>, else this must be assignable to jakarta.servlet.http.Part"
          },
          {
            "name": "accept",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated string of mime types of files to filter in client side file browse dialog. Note: this is not validated in server side"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left). These attributes are case sensitive when rendering to XHTML, so care must be taken to have the correct case"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "multiple",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Flag indicating that this element must allow multiple file selection. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as multiple='multiple'"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "outputLabel",
        "description": "Renders an HTML 'label' element. Render the current value of the component as label text if it is specified. If a 'for' attribute is specified, find the component specified by the value of the 'for' attribute, and render its client id as the value of the 'for' attribute. If 'styleClass' attribute is specified, render its value as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlOutputLabel",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Label",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "escape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. If omitted, this flag is assumed to be 'true'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "for",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Client identifier of the component for which this element is a label"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectOneMenu",
        "description": "Render an HTML option list. Decode Behavior See the 'Decode Behavior for UISelectOne Components' section. Encode Behavior Render an HTML 'select' element. Render the clientId of the component as the value of the 'name' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'select' element. If the component to be rendered is a UISelectMany, render 'true' as the value of the 'multiple' attribute. Use the number of items as the value of the 'size' attribute. See the 'Rendering the option elements' specification for ListboxRenderer for more detail on how to render the 'option' elements in this renderer.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectOneMenu",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Menu",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "inputText",
        "description": "Renders an HTML 'input' element of 'type''text'. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If the Map contains an entry for the 'clientId' of the component, pass the value of the entry to the setSubmittedValue() method of the component, which must be an instance of EditableValueHolder. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. Render the current value of the component as the value of the 'value' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlInputText",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Text",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "autocomplete",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If the value of this attribute is 'off', render 'off' as the value of the attribute. This indicates that the browser should disable its autocomplete feature for this component. This is useful for components that perform autocompletion and do not want the browser interfering. If this attribute is not set or the value is 'on', render nothing"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Controls the data type and associated control of the element. Default value is text. If a value is specified for which already a more specific component exist, such as hidden, password, checkbox, radio, file, submit, image, reset and button, and the ProjectStage is set to Development, then the renderer must add a warning message stating that the more specific component should be preferred"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "alt",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "maxlength",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The maximum number of characters that may be entered in this field"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "size",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of characters used to determine the width of this field"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "graphicImage",
        "description": "Renders an HTML 'img' element. Render the clientId as the value of the 'id' attribute. Handling the Value If the 'name' attribute is present, execute algorithm Common Algorithm for Obtaining A Resource to Render to obtain a Resource instance. Call Resource.getRequestPath() and output the result as the value of the 'src' attribute on the rendered markup. Otherwise, if the 'url' attribute is present, treat its value as if it was the value of the 'value' attribute. Otherwise, if the 'value' attribute is present, render the value of the component as the value of the 'src' attribute, after passing it to the getResourceURL() method of the ViewHandler for this application, and passing the result through the encodeResourceURL() method of the ExternalContext. When handling the 'src' attribute, the value must not be escaped. For example, & must not be turned into &amp;. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlGraphicImage",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Image",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "url",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Context-relative URL to retrieve the resource associated with this component. This is an alias for the 'value' property"
          },
          {
            "name": "alt",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component"
          },
          {
            "name": "height",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Override for the height of this image"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "longdesc",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "URI to a long description of the image represented by this element"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "width",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Override for the width of this image"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "ismap",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this image is to be used as a server side image map. Such an image must be enclosed within a hyperlink ('a'). A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as ismap='ismap'"
          },
          {
            "name": "library",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The libraryName for this resource"
          },
          {
            "name": "name",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The resourceName for this resource"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "usemap",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of a client side image map (an HTML 'map' element) for which this element provides the image"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "commandScript",
        "description": "Render a JavaScript function that invokes faces.ajax.request() function. Encode Behavior Render an HTML script element. If the value of the 'name' attribute does not contain a period . indicating a namespaced function name, then render JavaScript var keyword, followed by a space character. Render the value of the 'name' attribute, followed by JavaScript assignment operator. Render JavaScript function which invokes faces.ajax.request() with data provided by execute, render, onbegin, oncomplete, onsuccess and onerror arguments, if any. If the component being rendered has any UIParameter children, each one of them must be encoded into params object of the options object of the faces.ajax.request() function. If the rendered JavaScript function is invoked with an object argument, each property must be encoded into params object of the options object of the faces.ajax.request() function. This will override any property with the same key. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If the value in the Map for the value of the 'jakarta.faces.source' equals to the 'clientId' property of the component, create a jakarta.faces.event.ActionEvent around the component, and pass it to the queueEvent() method of the component, which must be an instance of UICommand.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlCommandScript",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Script",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "autorun",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to boolean)",
            "description": "Whether to execute declared JavaScript function during load event of the window. Defaults to false"
          },
          {
            "name": "actionListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent) )",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that 'some action happened'"
          },
          {
            "name": "render",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "This is a space separated list of client identifiers of components that will participate in the 'render' portion of the Request Processing Lifecycle. If a literal is specified the identifiers must be space delimited. Any of the keywords '@this','@form','@all','@none, may be specified in the identifier list. If not specified, the default value of '@none' is assumed. For example, @this clientIdOne clientIdTwo"
          },
          {
            "name": "onevent",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the JavaScript function that will handle UI events"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "name",
            "required": "true",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of JavaScript function to be declared, e.g. name='functionName'. This can be a namespaced function name, e.g. name='ez.functionName'"
          },
          {
            "name": "action",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object. The toString() of the returned Object is called to derive the logical outcome. This outcome is passed to the NavigationHandler for this application"
          },
          {
            "name": "execute",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "This is a space separated list of client identifiers of components that will participate in the 'execute' portion of the Request Processing Lifecycle. If a literal is specified the identifiers must be space delimited. Any of the keywords '@this','@form','@all','@none' may be specified in the identifier list. If not specified, the default value of '@this' is assumed. For example, @this clientIdOne clientIdTwo"
          },
          {
            "name": "resetValues",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Reset specific input values. Interpret the value of the render attribute as a space separated list of client identifiers suitable for passing directly to UIViewRoot.resetValues(). The implementation must cause an ActionListener to be attached to the ActionSource component in which this tag is nested that calls UIViewRoot.resetValues() passing the value of the render attribute as the argument"
          },
          {
            "name": "onerror",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The name of the JavaScript function that will handle errors"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. Defaults to true"
          }
        ]
      },
      {
        "name": "inputTextarea",
        "description": "Renders an HTML 'textarea' element. Decode Behavior See the encode description for the Input Text renderer. Encode Behavior Render the clientId as the value of the 'name' attribute. Render the current valu eof the component inside the 'textarea' element.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlInputTextarea",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Textarea",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "cols",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of columns to be displayed"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "rows",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of rows to be displayed"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "panelGrid",
        "description": "Renders an HTML 'table' element, conforming to the rules in the HTML 401 specification. Render the 'caption' facet, if present, inside a 'caption' element immediately below the 'table' element. If the 'captionClass' attribute is specified, render its value as the value of the 'class' attribute on the 'caption' element. If the 'captionStyle' attribute is specified, render its value as the value of the 'style' attribute on the 'caption' element. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. Render the pass-through attributes in the table below. Render the 'header' facet, if present, inside of 'thead','tr' and 'th' elements, nested in that order. If the 'headerClass' attribute is specifed, render its value as the value of the 'class' attribute on the 'th' element. Render 'colgroup' as the value of the 'scope' attribute. Render the value of the 'columns' attribute as the value of the 'colspan' attribute on the 'th' element. Render the 'footer' facet if present, using similar logic to the rendering of the 'header', but replacing 'thead' with 'tfoot','th' with 'td' and 'headerClass' with 'footerClass'. Render the children of the UIPanel component inside of a 'tbody' element. Render the children based on the value of the 'columns' attribute, creating a new row each time a 'columns' worth of children have been rendered. For the start of each row, render a 'tr' element. Output the value of the 'rowClasses' per the attribute description below. For each child, output a 'td' element, attaching the value of the 'columnClasses' attribute per the attribute description below. Recursively encode each child. Close out the 'td' element. When done with the row, close out the 'tr' element. If a child has 'rendered==false' it is not rendered, and the column counter must not be incremented.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlPanelGrid",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Grid",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "bgcolor",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name or code of the background color for this table"
          },
          {
            "name": "border",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around this table"
          },
          {
            "name": "captionStyle",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this caption is rendered"
          },
          {
            "name": "cellspacing",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the left side of the table and the leftmost column, the top of the table and the top of the top side of the topmost row, and so on for the right and bottom of the table. It also specifies the amount of space to leave between cells"
          },
          {
            "name": "columns",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of columns to render before starting a new row"
          },
          {
            "name": "footerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any footer generated for this table"
          },
          {
            "name": "headerClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any header generated for this table"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "rowClasses",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the rows of this table. A space separated list of classes may also be specified for any individual row. Thes styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "summary",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Summary of this table's purpose and structure, for user agents rendering to non-visual media such as speech and Braille"
          },
          {
            "name": "width",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Width of the entire table, for visual user agents"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "bodyrows",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma separated list of row indices for which a new 'tbody' element should be started (and any previously opened one should be ended)"
          },
          {
            "name": "captionClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) that will be applied to any caption generated for this table"
          },
          {
            "name": "cellpadding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Definition of how much space the user agent should leave between the border of each cell and its contents"
          },
          {
            "name": "columnClasses",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Comma-delimited list of CSS style classes that will be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of actual column children of the UIData, no 'class' attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of actual column children of the UIData, the elements at the posisiton in the list after the last column are ignored"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "frame",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which sides of the frame surrounding this table will be visible. Valid values are: none (no sides, default value); above (top side only); below (bottom side only); hsides (top and bottom sides only); vsides (right and left sides only); lhs (left hand side only); rhs (right hand side only); box (all four sides); and border (all four sides)"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "rules",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code specifying which rules will appear between cells within this table. Valid values are: none (no rules, default value); groups (between row groups); rows (between rows only); cols (between columns only); and all (between all rows and columns)"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectManyListbox",
        "description": "Render an HTML option list. Decode Behavior This section documents the decode behavior for all renderers that handle UISelectMany or UISelectOne components. Decode Behavior for UISelectMany components Obtain the Map from the 'requestParameterValuesMap' property of the ExternalContext. If the Map contains an entry for the 'clientId' of the component, pass the value of the entry, cast to a String [], to the setSubmittedValue() method of the component, which must be an EditableValueHolder. If the Map does not contain an entry, create an empty String array and call setSubmittedValue() with it. Please check the javadoc for UISelectMany.getConvertedValue() for additional requirements for renderers that render this kind of component. Decode Behavior for UISelectOne components Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If there is a Map entry for the 'clientId' property of the component, pass it to the setSubmittedValue() method of the component. If the Map does not contain an entry, call setSubmittedValue() passing an empty String as the argument. Encode Behavior Render an HTML 'select' element. Render the clientId of the component as the value of the 'name' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'select' element. If the component is a UISelectMany instance, render 'multiple' as the value of the 'multiple' attribute. If the 'size' attribute is specified, render its value as the value of the 'size' attribute. Otherwise use the number of items as the value of the 'size' attribute. Rendering the 'option' elements The only valid children of this component are UISelectItem or UISelectItems instances. Iterate over the children of this component, and accrue a list of jakarta.faces.model.SelectItem instances. If the current child is a SelectItem whose noSelctionProperty is true, and the UISelectOne or UISelectMany parent of this option has one or more selected values that are not the 'no selection' SelectItem, and the component has a 'hideNoSelectionLabel' attribute whose value is true, then the current option, which is the 'no selection' option, must not be rendered. If the current child is a UISelectItem create a SelectIteminstance from its itemValue, itemLabel, itemEscaped, and itemDescription properties, add it to the list. If the current child is a UISelectItems instance, call its getValue() method. If the result is a SelectItem bean, add it to the list. If the result is an array of SelectItem beans, add each one to the list. If the result is a Collection of SelectItem beans, add each one to the list. If the result is a Map, create a SelectItem bean for each entry in the Map using the key as the label, the value as the value, and null as the description. Iterate over the list of SelectItem beans. If the current element is a SelectItemGroup, render an 'optgroup' element with a 'label' attribute, the value of which is the 'label' property from the current element, then call getSelectItems() and render each element as below. If the current element is not a SelectItemGroup, render an 'option' element. Follow the conversion rules in the spec to obtain a renderable String from the 'value' property of the current element, render that as the value of the 'value' atribute. Now it is time to see if the current element is the selected value. Call its getSubmittedValue() method, casting the result to an Object [], otherwise the component must be a UISelectOne instance, call its getSubmittedValue() method and create an Object [] around the result. Determine the type of the resultant array, if the resultant array is non-null, otherwise the type is String. Coerce the current item value to this type following the Expression Language coercion rules. If the resultant array is non-null, we look in the array for a value that, when we pass the renderable value to its equals() method, it returns true, meaning the current element is selected. If the resultant array is null, if the component is a UISelectMany, call its getValue() method. If the result is a List obtain the values in the list as an array. Otherwise, the component must be a UISelectOne instance. Call its getValue() method, which must be an Object array. Look for an element in the resultant array that, 1. when we pass the renderable value to its equals() method, it returns true, or 2. if the renderable value is null, and there is a null element in the array, also conclude that the current element is selected. Otherwise the current element is not selected. Now, if the current value is selected, write out an HTML boolean property 'selected'. If the current SelectItem.isDisabled() returns true, render 'disabled' as the value of the 'disabled' attribute. If the value of the escape property is true, use the writeText() method of ResponseWriter to write out the value of the label property. Otherwise, use the write() method of the ResponseWriter to do so.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectManyListbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Listbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "collectionType",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "size",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Number of available options to be shown at all times. If not specified, all available options are shown"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectOneRadio",
        "description": "Render a set of html 'input' elements of type 'radio'. Decode Behavior See the 'Decode Behavior for UISelectOne Components' section. Encode Behavior If the 'group' attribute is not specified, render as follows. If the 'layout' attribute is specified, and its value is 'list', render a 'ul' element as root element, otherwise render a 'table' element. As an exception to the general rules about how to handle the 'id' attribute, render it as an attribute on the outer root element, the value of which is the clientId of the component per the rules at the beginning of this specification. If the 'styleClass' attribute is specified, render the value of the 'styleClass' attribute as the value of the 'class' attribute on the root element. If the 'style', 'border' attributes are specified, pass them thru and render their values as the 'style' and 'border' attributes on the root element, respectively.. If the 'layout' attribute is specified, and its value is 'pageDirection', render the children elements vertically, otherwise horizontally, in the root element. If any of the children are an instance of SelectItemGroup, render them as a nested root element. Each of the SelectItem children are ultimately rendered as follows. If the SelectItem.getLabel() is specified, and the group attribute is specified, render as follows. Render a 'label' element. Render the 'for' attribute of the 'label' element whose value is the corresponding 'input' element's 'id' value. Render any 'class' attribute as the 'class' attribute on the 'label' element. Render the label value from SelectItem.getLabel(). Close out the 'label' element. Render an 'input' element of 'type''radio' for each child component. Render an 'id' attribute on the 'input' element. Each 'id' value must be unique. If the 'group' attribute is not specified, render the 'name' attribute on the 'input' element with the value of the clientId of the component. If the 'group' attribute is specified, render as follows. Render the 'name' attribute on the 'input' element with the value of the 'group' attribute. If the 'styleClass' attribute is specified, render the value of the 'styleClass' attribute as the value of the 'class' attribute on the 'input' element. If the 'style' attribute is specified, pass it thru and render its value as the 'style' attribute on the 'input' element. Render the input value from SelectItem.getValue(). Coerce the select item value to the type of the parent UISelectOne value using the Expression Language coercion rules before comparing the values. If the select item value is equal to the value of the parent UISelectOne, render an appropriate HTML boolean value indicating 'checked' for the enclosing 'input'. If the current SelectItem.isDisabled() returns true, render 'disabled' as the value of the 'disabled' attribute. Close out the 'input' element. If the SelectItem.getLabel() is specified, and the group attribute is not specified, render as follows. Render a 'label' element. Render the 'for' attribute of the 'label' element whose value is the corresponding 'input' element's 'id' value. Render any 'class' attribute as the 'class' attribute on the 'label' element. Render the label value from SelectItem.getLabel(). Close out the 'label' element. See the 'Rendering the option elements' specification for ListboxRenderer for more detail on how to render the 'option' elements in this renderer.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectOneRadio",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Radio",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "border",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "Width (in pixels) of the border to be drawn around the table containing the options list. This attribute is ignored when the 'layout' attribute equals to 'list'"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "layout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Orientation of the options list to be created. Valid values are 'pageDirection' (list is laid out vertically), or 'lineDirection' (list is laid out horizontally). If not specified, the default value is 'lineDirection'"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "selectManyMenu",
        "description": "Render an HTML option list. Decode Behavior See the 'Decode Behavior for UISelectMany Components' section. Encode Behavior Render an HTML 'select' element. Render the clientId of the component as the value of the 'name' attribute. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute on the 'select' element. If the component to be rendered is a UISelectMany, render 'multiple' as the value of the 'multiple' attribute. Render '1' as the value of the 'size' attribute. See the 'Rendering the option elements' specification for ListboxRenderer for more detail on how to render the 'option' elements in this renderer.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectManyMenu",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Menu",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "collectionType",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "enabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on enabled options"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "disabledClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style class to apply to the rendered label on disabled options"
          },
          {
            "name": "hideNoSelectionOption",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, The 'no selection option', if any, must be hidden"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          }
        ]
      },
      {
        "name": "commandButton",
        "description": "Renders an HTML 'input' element. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If the value in the Map for the value of the 'clientId' property of the component is null, create a String by concatenating the value of the 'clientId' property of the component with the String '.x' (without the quotes). Create another String in the same manner, but concatenate '.y' (without the quotes). If null is the value in the Map for both Strings, return from decode(). If the value in the Map for the value of the 'clientId' property of the component is not null, get the value of the 'type' attribute, and convert it to lower case. If the result is equal to the String 'reset' (without the quotes), return from decode(). Otherwise, create a jakarta.faces.event.ActionEvent around the component, and pass it to the queueEvent() method of the component, which must be an instance of UICommand. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. Render the current value of the component as the value of the 'value' attribute. If 'image' attribute is specified render it as the value of the 'src' attribute after passing it to the getResourceURL() method of the ViewHandler for this application, and passing the result through the encodeResourceURL() method of the ExternalContext. Note that calling getResourceURL() will prefix the context-root of the current application if the value of the 'src' attribute starts with '/'. When handling the 'image' attribute, the value must not be escaped. For example, & must not be turned into &amp;. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute. If the user has specified an 'onclick' attribute, append that JavaScript to any existing JavaScript before rendering. If the component being rendered by this renderer has any UIParameter children, each one of them must be rendered using the renderer for component-family: 'jakarta.faces.Input' and renderer-type: 'jakarta.faces.Hidden'. For discussion, this is called the hiddenRenderer. A component with component-type 'jakarta.faces.Input' must be created for local use in rendering each UIParameter child. The 'id' property of the temporary component must be set to the 'name' of the UIParameter. The 'value' property of the temporary component must be set to the 'value' of the UIParameter. For each UIParameter child, the hiddenRenderer must have its encodeBegin(), encodeChildren(), and encodeEnd() methods called, in order, passing the temporary component as the second argument.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlCommandButton",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Button",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "actionListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent) )",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that 'some action happened'"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "alt",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Alternate textual description of the element rendered by this component. This attribute is ignored when the image attribute is not specified"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "action",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "image",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Absolute or relative URL of the image to be displayed for this button. If specified, this 'input' element will be of type 'image'. Otherwise, it will be of the type specified by the 'type' property with a label specified by the 'value' property. Note that if the value of this attribute starts with '/', the rendered value for this attribute will be prefixed with the context-root for this application"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Type of button to create. Valid values are 'submit','button' and 'reset'. If not specified, or not a valid value, the default value is 'submit'"
          }
        ]
      },
      {
        "name": "inputSecret",
        "description": "Renders an HTML 'input' element of 'type''password'. Decode Behavior See the decode description for the Input Text renderer. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. Render the current value of the component as the value of the 'value' attribute, if and only if the 'redisplay' component attribute is the string 'true'. If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlInputSecret",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Secret",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "autocomplete",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "If the value of this attribute is 'off', render 'off' as the value of the attribute. This indicates that the browser should disable its autocomplete feature for this component. This is useful for components that perform autocompletion and do not want the browser interfering. If this attribute is not set or the value is 'on', render nothing"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "size",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The number of characters used to determine the width of this field"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "maxlength",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to int)",
            "description": "The maximum number of characters that may be entered in this field"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "redisplay",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that any existing value in this field should be rendered when the form is created. Because this is a potential security risk, password values are not displayed by default"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "selectBooleanCheckbox",
        "description": "Renders an HTML 'input' element of type 'checkbox'. Decode Behavior Obtain the Map from the 'requestParameterMap' property of the ExternalContext. If there is no entry in the Map for the 'clientId' of this component, pass 'false' to the setSubmittedValue() method of the component, which must be an instance of EditableValueHolder. If there is an entry, and its value is equal, ignoring case and without quotes, to any of the Strings: 'on', 'yes' or 'true' pass true to the setSubmittedValue() method of the component. Encode Behavior Render the clientId of the component as the value of the 'name' attribute. If the current value of the component is 'true', output the 'checked' attribute (must be rendered as checked='checked'). If the 'styleClass' attribute is specified, render its value as the value of the 'class' attribute.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlSelectBooleanCheckbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Checkbox",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converter",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.convert.Converter)",
            "description": "Converter instance registered with this component"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "requiredMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the 'required' facility, if the 'required' facility is used"
          },
          {
            "name": "validatorMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator"
          },
          {
            "name": "valueChangeListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void valueChange(jakarta.faces.event.ValueChangeEvent) )",
            "description": "MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "label",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A localized user presentable name for this component"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "readonly",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component will prohibit changes by the user. The element may receive focus unless it has also been disabled. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as readonly='readonly'"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "converterMessage",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase"
          },
          {
            "name": "required",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that the user is required to provide a submitted value for this input component"
          },
          {
            "name": "validator",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void validate(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.Object) )",
            "description": "MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "The current value of this component"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit. A value of false causes no attribute to be rendered, while a value of true causes the attribute to be rendered as disabled='disabled'"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onchange",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus and its value has been modified since gaining focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "onselect",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when text within this element is selected by the user"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      },
      {
        "name": "commandLink",
        "description": "Render an HTML 'a' anchor element that acts like a form submit button when clicked. General Behaviour Both the encode and decode behavior require the ability to get the id/name for a hidden field, which may be rendered in markup or which may be programmatically added via client DOM manipulation, whose value is set by the JavaScript form submit. This name must be constructed as follows: Get the clientId for the form of which this component is a child. Append NamingContainer.SEPARATOR_CHAR. Append a constant string that is the same for all command link components in the tree. In the following text, this String is called hiddenFieldName. Decode Behavior Obtain the 'clientId' property of the component. Obtain the Map from the 'requestParameterMap' property of the ExternalContext. Derive hiddenFieldName as above. Get the entry in the Map under the key that is the hiddenFieldName. If the there is no entry, or the entry is the empty String, or the entry is not equal to the value of the 'clientId' property, return immediately. If there is an entry, and its value is equal to the value of the 'clientId' property, create a new jakarta.faces.event.ActionEvent instance around the component and call queueActionEvent() on the component, passing the event. Encode Behavior If the value of the disabled attribute is true, render a span element. Render all the passthru attributes and the target attribute as pass-through attributes on the span, even though the target attribute will have no effect on a span. Render the current value of the component as the content of the span. Return. If the disabled attribute is not present, or its value is false, render an HTML a element. Render '#' as the value of the 'href' attribute. Render the current value of the component as the link text if it is specified.",
        "attribute": [
          {
            "name": "Component Type",
            "required": "jakarta.faces.HtmlCommandLink",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Renderer Type",
            "required": "jakarta.faces.Link",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "role",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a 'role' attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup. The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to, a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to. It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute"
          },
          {
            "name": "actionListener",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match void actionListener(jakarta.faces.event.ActionEvent) )",
            "description": "MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that 'some action happened'"
          },
          {
            "name": "immediate",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase"
          },
          {
            "name": "value",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Object)",
            "description": "The current value of this component"
          },
          {
            "name": "charset",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The character encoding of the resource designated by this hyperlink"
          },
          {
            "name": "dir",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)"
          },
          {
            "name": "hreflang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The language code of the resource designated by this hyperlink"
          },
          {
            "name": "onblur",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element loses focus"
          },
          {
            "name": "ondblclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is double clicked over this element"
          },
          {
            "name": "onkeydown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed down over this element"
          },
          {
            "name": "onkeyup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is released over this element"
          },
          {
            "name": "onmousemove",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved within this element"
          },
          {
            "name": "onmouseover",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved onto this element"
          },
          {
            "name": "rel",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The relationship from the current document to the anchor specified by this hyperlink. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "shape",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The shape of the hot spot on the screen (for use in client-side image maps). Valid values are: default (entire region); rect (rectangular region); circle (circular region); and poly (polygonal region)"
          },
          {
            "name": "styleClass",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the 'class' attribute on generated markup"
          },
          {
            "name": "target",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Name of a frame where the resource retrieved via this hyperlink is to be displayed"
          },
          {
            "name": "type",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The content type of the resource designated by this hyperlink"
          },
          {
            "name": "Handler Class",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "Description",
            "required": "None",
            "type": "undefined",
            "description": "undefined"
          },
          {
            "name": "action",
            "required": "false",
            "type": "jakarta.el.MethodExpression (signature must match java.lang.Object action())",
            "description": "MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application"
          },
          {
            "name": "id",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The component identifier for this component. This value must be unique within the closest parent component that is a naming container"
          },
          {
            "name": "rendered",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true"
          },
          {
            "name": "accesskey",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Access key that, when pressed, transfers focus to this element"
          },
          {
            "name": "coords",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "The position and shape of the hot spot on the screen (for use in client-side image maps)"
          },
          {
            "name": "disabled",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.Boolean)",
            "description": "Flag indicating that this element must never receive focus or be included in a subsequent submit"
          },
          {
            "name": "lang",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Code describing the language used in the generated markup for this component"
          },
          {
            "name": "onclick",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is clicked over this element"
          },
          {
            "name": "onfocus",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when this element receives focus"
          },
          {
            "name": "onkeypress",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a key is pressed and released over this element"
          },
          {
            "name": "onmousedown",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is pressed down over this element"
          },
          {
            "name": "onmouseout",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is moved away from this element"
          },
          {
            "name": "onmouseup",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Javascript code executed when a pointer button is released over this element"
          },
          {
            "name": "rev",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "A reverse link from the anchor specified by this hyperlink to the current document. The value of this attribute is a space-separated list of link types"
          },
          {
            "name": "style",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "CSS style(s) to be applied when this component is rendered"
          },
          {
            "name": "tabindex",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767"
          },
          {
            "name": "title",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to java.lang.String)",
            "description": "Advisory title information about markup elements generated for this component"
          },
          {
            "name": "binding",
            "required": "false",
            "type": "jakarta.el.ValueExpression (must evaluate to jakarta.faces.component.UIComponent)",
            "description": "The ValueExpression linking this component to a property in a backing bean"
          }
        ]
      }
    ]
  }
}